                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_spi
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _SPI_DeInit
                                     13 	.globl _SPI_Init
                                     14 	.globl _SPI_Cmd
                                     15 	.globl _SPI_ITConfig
                                     16 	.globl _SPI_SendData
                                     17 	.globl _SPI_ReceiveData
                                     18 	.globl _SPI_NSSInternalSoftwareCmd
                                     19 	.globl _SPI_TransmitCRC
                                     20 	.globl _SPI_CalculateCRCCmd
                                     21 	.globl _SPI_GetCRC
                                     22 	.globl _SPI_ResetCRC
                                     23 	.globl _SPI_GetCRCPolynomial
                                     24 	.globl _SPI_BiDirectionalLineConfig
                                     25 	.globl _SPI_GetFlagStatus
                                     26 	.globl _SPI_ClearFlag
                                     27 	.globl _SPI_GetITStatus
                                     28 	.globl _SPI_ClearITPendingBit
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DATA
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area INITIALIZED
                                     37 ;--------------------------------------------------------
                                     38 ; absolute external ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DABS (ABS)
                                     41 
                                     42 ; default segment ordering for linker
                                     43 	.area HOME
                                     44 	.area GSINIT
                                     45 	.area GSFINAL
                                     46 	.area CONST
                                     47 	.area INITIALIZER
                                     48 	.area CODE
                                     49 
                                     50 ;--------------------------------------------------------
                                     51 ; global & static initialisations
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area GSINIT
                                     55 	.area GSFINAL
                                     56 	.area GSINIT
                                     57 ;--------------------------------------------------------
                                     58 ; Home
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area HOME
                                     62 ;--------------------------------------------------------
                                     63 ; code
                                     64 ;--------------------------------------------------------
                                     65 	.area CODE
                                     66 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 50: void SPI_DeInit(void)
                                     67 ;	-----------------------------------------
                                     68 ;	 function SPI_DeInit
                                     69 ;	-----------------------------------------
      000000                         70 _SPI_DeInit:
                                     71 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 52: SPI->CR1    = SPI_CR1_RESET_VALUE;
      000000 35 00 52 00      [ 1]   72 	mov	0x5200+0, #0x00
                                     73 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 53: SPI->CR2    = SPI_CR2_RESET_VALUE;
      000004 35 00 52 01      [ 1]   74 	mov	0x5201+0, #0x00
                                     75 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 54: SPI->ICR    = SPI_ICR_RESET_VALUE;
      000008 35 00 52 02      [ 1]   76 	mov	0x5202+0, #0x00
                                     77 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 55: SPI->SR     = SPI_SR_RESET_VALUE;
      00000C 35 02 52 03      [ 1]   78 	mov	0x5203+0, #0x02
                                     79 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 56: SPI->CRCPR  = SPI_CRCPR_RESET_VALUE;
      000010 35 07 52 05      [ 1]   80 	mov	0x5205+0, #0x07
                                     81 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 57: }
      000014 81               [ 4]   82 	ret
                                     83 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 78: void SPI_Init(SPI_FirstBit_TypeDef FirstBit, SPI_BaudRatePrescaler_TypeDef BaudRatePrescaler, SPI_Mode_TypeDef Mode, SPI_ClockPolarity_TypeDef ClockPolarity, SPI_ClockPhase_TypeDef ClockPhase, SPI_DataDirection_TypeDef Data_Direction, SPI_NSS_TypeDef Slave_Management, uint8_t CRCPolynomial)
                                     84 ;	-----------------------------------------
                                     85 ;	 function SPI_Init
                                     86 ;	-----------------------------------------
      000015                         87 _SPI_Init:
      000015 52 03            [ 2]   88 	sub	sp, #3
                                     89 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 81: assert_param(IS_SPI_FIRSTBIT_OK(FirstBit));
      000017 6B 03            [ 1]   90 	ld	(0x03, sp), a
      000019 27 12            [ 1]   91 	jreq	00107$
      00001B 7B 03            [ 1]   92 	ld	a, (0x03, sp)
      00001D A1 80            [ 1]   93 	cp	a, #0x80
      00001F 27 0C            [ 1]   94 	jreq	00107$
      000021 4B 51            [ 1]   95 	push	#0x51
      000023 5F               [ 1]   96 	clrw	x
      000024 89               [ 2]   97 	pushw	x
      000025 4B 00            [ 1]   98 	push	#0x00
      000027 AEr00r00         [ 2]   99 	ldw	x, #(___str_0+0)
      00002A CDr00r00         [ 4]  100 	call	_assert_failed
      00002D                        101 00107$:
                                    102 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 82: assert_param(IS_SPI_BAUDRATE_PRESCALER_OK(BaudRatePrescaler));
      00002D 0D 06            [ 1]  103 	tnz	(0x06, sp)
      00002F 27 36            [ 1]  104 	jreq	00112$
      000031 7B 06            [ 1]  105 	ld	a, (0x06, sp)
      000033 A1 08            [ 1]  106 	cp	a, #0x08
      000035 27 30            [ 1]  107 	jreq	00112$
      000037 7B 06            [ 1]  108 	ld	a, (0x06, sp)
      000039 A1 10            [ 1]  109 	cp	a, #0x10
      00003B 27 2A            [ 1]  110 	jreq	00112$
      00003D 7B 06            [ 1]  111 	ld	a, (0x06, sp)
      00003F A1 18            [ 1]  112 	cp	a, #0x18
      000041 27 24            [ 1]  113 	jreq	00112$
      000043 7B 06            [ 1]  114 	ld	a, (0x06, sp)
      000045 A1 20            [ 1]  115 	cp	a, #0x20
      000047 27 1E            [ 1]  116 	jreq	00112$
      000049 7B 06            [ 1]  117 	ld	a, (0x06, sp)
      00004B A1 28            [ 1]  118 	cp	a, #0x28
      00004D 27 18            [ 1]  119 	jreq	00112$
      00004F 7B 06            [ 1]  120 	ld	a, (0x06, sp)
      000051 A1 30            [ 1]  121 	cp	a, #0x30
      000053 27 12            [ 1]  122 	jreq	00112$
      000055 7B 06            [ 1]  123 	ld	a, (0x06, sp)
      000057 A1 38            [ 1]  124 	cp	a, #0x38
      000059 27 0C            [ 1]  125 	jreq	00112$
      00005B 4B 52            [ 1]  126 	push	#0x52
      00005D 5F               [ 1]  127 	clrw	x
      00005E 89               [ 2]  128 	pushw	x
      00005F 4B 00            [ 1]  129 	push	#0x00
      000061 AEr00r00         [ 2]  130 	ldw	x, #(___str_0+0)
      000064 CDr00r00         [ 4]  131 	call	_assert_failed
      000067                        132 00112$:
                                    133 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 83: assert_param(IS_SPI_MODE_OK(Mode));
      000067 7B 07            [ 1]  134 	ld	a, (0x07, sp)
      000069 A1 04            [ 1]  135 	cp	a, #0x04
      00006B 26 05            [ 1]  136 	jrne	00314$
      00006D A6 01            [ 1]  137 	ld	a, #0x01
      00006F 6B 01            [ 1]  138 	ld	(0x01, sp), a
      000071 C5                     139 	.byte 0xc5
      000072                        140 00314$:
      000072 0F 01            [ 1]  141 	clr	(0x01, sp)
      000074                        142 00315$:
      000074 0D 01            [ 1]  143 	tnz	(0x01, sp)
      000076 26 10            [ 1]  144 	jrne	00135$
      000078 0D 07            [ 1]  145 	tnz	(0x07, sp)
      00007A 27 0C            [ 1]  146 	jreq	00135$
      00007C 4B 53            [ 1]  147 	push	#0x53
      00007E 5F               [ 1]  148 	clrw	x
      00007F 89               [ 2]  149 	pushw	x
      000080 4B 00            [ 1]  150 	push	#0x00
      000082 AEr00r00         [ 2]  151 	ldw	x, #(___str_0+0)
      000085 CDr00r00         [ 4]  152 	call	_assert_failed
      000088                        153 00135$:
                                    154 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 84: assert_param(IS_SPI_POLARITY_OK(ClockPolarity));
      000088 0D 08            [ 1]  155 	tnz	(0x08, sp)
      00008A 27 12            [ 1]  156 	jreq	00140$
      00008C 7B 08            [ 1]  157 	ld	a, (0x08, sp)
      00008E A1 02            [ 1]  158 	cp	a, #0x02
      000090 27 0C            [ 1]  159 	jreq	00140$
      000092 4B 54            [ 1]  160 	push	#0x54
      000094 5F               [ 1]  161 	clrw	x
      000095 89               [ 2]  162 	pushw	x
      000096 4B 00            [ 1]  163 	push	#0x00
      000098 AEr00r00         [ 2]  164 	ldw	x, #(___str_0+0)
      00009B CDr00r00         [ 4]  165 	call	_assert_failed
      00009E                        166 00140$:
                                    167 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 85: assert_param(IS_SPI_PHASE_OK(ClockPhase));
      00009E 0D 09            [ 1]  168 	tnz	(0x09, sp)
      0000A0 27 10            [ 1]  169 	jreq	00145$
      0000A2 0D 09            [ 1]  170 	tnz	(0x09, sp)
      0000A4 26 0C            [ 1]  171 	jrne	00145$
      0000A6 4B 55            [ 1]  172 	push	#0x55
      0000A8 5F               [ 1]  173 	clrw	x
      0000A9 89               [ 2]  174 	pushw	x
      0000AA 4B 00            [ 1]  175 	push	#0x00
      0000AC AEr00r00         [ 2]  176 	ldw	x, #(___str_0+0)
      0000AF CDr00r00         [ 4]  177 	call	_assert_failed
      0000B2                        178 00145$:
                                    179 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 86: assert_param(IS_SPI_DATA_DIRECTION_OK(Data_Direction));
      0000B2 0D 0A            [ 1]  180 	tnz	(0x0a, sp)
      0000B4 27 1E            [ 1]  181 	jreq	00150$
      0000B6 7B 0A            [ 1]  182 	ld	a, (0x0a, sp)
      0000B8 A1 04            [ 1]  183 	cp	a, #0x04
      0000BA 27 18            [ 1]  184 	jreq	00150$
      0000BC 7B 0A            [ 1]  185 	ld	a, (0x0a, sp)
      0000BE A1 80            [ 1]  186 	cp	a, #0x80
      0000C0 27 12            [ 1]  187 	jreq	00150$
      0000C2 7B 0A            [ 1]  188 	ld	a, (0x0a, sp)
      0000C4 A1 C0            [ 1]  189 	cp	a, #0xc0
      0000C6 27 0C            [ 1]  190 	jreq	00150$
      0000C8 4B 56            [ 1]  191 	push	#0x56
      0000CA 5F               [ 1]  192 	clrw	x
      0000CB 89               [ 2]  193 	pushw	x
      0000CC 4B 00            [ 1]  194 	push	#0x00
      0000CE AEr00r00         [ 2]  195 	ldw	x, #(___str_0+0)
      0000D1 CDr00r00         [ 4]  196 	call	_assert_failed
      0000D4                        197 00150$:
                                    198 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 87: assert_param(IS_SPI_SLAVEMANAGEMENT_OK(Slave_Management));
      0000D4 7B 0B            [ 1]  199 	ld	a, (0x0b, sp)
      0000D6 A1 02            [ 1]  200 	cp	a, #0x02
      0000D8 27 10            [ 1]  201 	jreq	00161$
      0000DA 0D 0B            [ 1]  202 	tnz	(0x0b, sp)
      0000DC 27 0C            [ 1]  203 	jreq	00161$
      0000DE 4B 57            [ 1]  204 	push	#0x57
      0000E0 5F               [ 1]  205 	clrw	x
      0000E1 89               [ 2]  206 	pushw	x
      0000E2 4B 00            [ 1]  207 	push	#0x00
      0000E4 AEr00r00         [ 2]  208 	ldw	x, #(___str_0+0)
      0000E7 CDr00r00         [ 4]  209 	call	_assert_failed
      0000EA                        210 00161$:
                                    211 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 88: assert_param(IS_SPI_CRC_POLYNOMIAL_OK(CRCPolynomial));
      0000EA 0D 0C            [ 1]  212 	tnz	(0x0c, sp)
      0000EC 26 0C            [ 1]  213 	jrne	00166$
      0000EE 4B 58            [ 1]  214 	push	#0x58
      0000F0 5F               [ 1]  215 	clrw	x
      0000F1 89               [ 2]  216 	pushw	x
      0000F2 4B 00            [ 1]  217 	push	#0x00
      0000F4 AEr00r00         [ 2]  218 	ldw	x, #(___str_0+0)
      0000F7 CDr00r00         [ 4]  219 	call	_assert_failed
      0000FA                        220 00166$:
                                    221 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 91: SPI->CR1 = (uint8_t)((uint8_t)((uint8_t)FirstBit | BaudRatePrescaler) |
      0000FA 7B 03            [ 1]  222 	ld	a, (0x03, sp)
      0000FC 1A 06            [ 1]  223 	or	a, (0x06, sp)
      0000FE 6B 02            [ 1]  224 	ld	(0x02, sp), a
                                    225 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 92: (uint8_t)((uint8_t)ClockPolarity | ClockPhase));
      000100 7B 09            [ 1]  226 	ld	a, (0x09, sp)
      000102 1A 08            [ 1]  227 	or	a, (0x08, sp)
      000104 1A 02            [ 1]  228 	or	a, (0x02, sp)
      000106 C7 52 00         [ 1]  229 	ld	0x5200, a
                                    230 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 95: SPI->CR2 = (uint8_t)((uint8_t)(Data_Direction) | (uint8_t)(Slave_Management));
      000109 7B 0A            [ 1]  231 	ld	a, (0x0a, sp)
      00010B 1A 0B            [ 1]  232 	or	a, (0x0b, sp)
      00010D C7 52 01         [ 1]  233 	ld	0x5201, a
                                    234 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 99: SPI->CR2 |= (uint8_t)SPI_CR2_SSI;
      000110 C6 52 01         [ 1]  235 	ld	a, 0x5201
      000113 97               [ 1]  236 	ld	xl, a
                                    237 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 97: if (Mode == SPI_MODE_MASTER)
      000114 7B 01            [ 1]  238 	ld	a, (0x01, sp)
      000116 27 08            [ 1]  239 	jreq	00102$
                                    240 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 99: SPI->CR2 |= (uint8_t)SPI_CR2_SSI;
      000118 9F               [ 1]  241 	ld	a, xl
      000119 AA 01            [ 1]  242 	or	a, #0x01
      00011B C7 52 01         [ 1]  243 	ld	0x5201, a
      00011E 20 06            [ 2]  244 	jra	00103$
      000120                        245 00102$:
                                    246 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 103: SPI->CR2 &= (uint8_t)~(SPI_CR2_SSI);
      000120 9F               [ 1]  247 	ld	a, xl
      000121 A4 FE            [ 1]  248 	and	a, #0xfe
      000123 C7 52 01         [ 1]  249 	ld	0x5201, a
      000126                        250 00103$:
                                    251 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 107: SPI->CR1 |= (uint8_t)(Mode);
      000126 C6 52 00         [ 1]  252 	ld	a, 0x5200
      000129 1A 07            [ 1]  253 	or	a, (0x07, sp)
      00012B C7 52 00         [ 1]  254 	ld	0x5200, a
                                    255 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 110: SPI->CRCPR = (uint8_t)CRCPolynomial;
      00012E AE 52 05         [ 2]  256 	ldw	x, #0x5205
      000131 7B 0C            [ 1]  257 	ld	a, (0x0c, sp)
      000133 F7               [ 1]  258 	ld	(x), a
                                    259 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 111: }
      000134 1E 04            [ 2]  260 	ldw	x, (4, sp)
      000136 5B 0C            [ 2]  261 	addw	sp, #12
      000138 FC               [ 2]  262 	jp	(x)
                                    263 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 119: void SPI_Cmd(FunctionalState NewState)
                                    264 ;	-----------------------------------------
                                    265 ;	 function SPI_Cmd
                                    266 ;	-----------------------------------------
      000139                        267 _SPI_Cmd:
      000139 88               [ 1]  268 	push	a
                                    269 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 122: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      00013A 6B 01            [ 1]  270 	ld	(0x01, sp), a
      00013C 27 10            [ 1]  271 	jreq	00107$
      00013E 0D 01            [ 1]  272 	tnz	(0x01, sp)
      000140 26 0C            [ 1]  273 	jrne	00107$
      000142 4B 7A            [ 1]  274 	push	#0x7a
      000144 5F               [ 1]  275 	clrw	x
      000145 89               [ 2]  276 	pushw	x
      000146 4B 00            [ 1]  277 	push	#0x00
      000148 AEr00r00         [ 2]  278 	ldw	x, #(___str_0+0)
      00014B CDr00r00         [ 4]  279 	call	_assert_failed
      00014E                        280 00107$:
                                    281 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 126: SPI->CR1 |= SPI_CR1_SPE; /* Enable the SPI peripheral*/
      00014E C6 52 00         [ 1]  282 	ld	a, 0x5200
                                    283 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 124: if (NewState != DISABLE)
      000151 0D 01            [ 1]  284 	tnz	(0x01, sp)
      000153 27 07            [ 1]  285 	jreq	00102$
                                    286 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 126: SPI->CR1 |= SPI_CR1_SPE; /* Enable the SPI peripheral*/
      000155 AA 40            [ 1]  287 	or	a, #0x40
      000157 C7 52 00         [ 1]  288 	ld	0x5200, a
      00015A 20 05            [ 2]  289 	jra	00104$
      00015C                        290 00102$:
                                    291 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 130: SPI->CR1 &= (uint8_t)(~SPI_CR1_SPE); /* Disable the SPI peripheral*/
      00015C A4 BF            [ 1]  292 	and	a, #0xbf
      00015E C7 52 00         [ 1]  293 	ld	0x5200, a
      000161                        294 00104$:
                                    295 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 132: }
      000161 84               [ 1]  296 	pop	a
      000162 81               [ 4]  297 	ret
                                    298 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 141: void SPI_ITConfig(SPI_IT_TypeDef SPI_IT, FunctionalState NewState)
                                    299 ;	-----------------------------------------
                                    300 ;	 function SPI_ITConfig
                                    301 ;	-----------------------------------------
      000163                        302 _SPI_ITConfig:
      000163 88               [ 1]  303 	push	a
                                    304 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 145: assert_param(IS_SPI_CONFIG_IT_OK(SPI_IT));
      000164 A1 17            [ 1]  305 	cp	a, #0x17
      000166 27 1A            [ 1]  306 	jreq	00107$
      000168 A1 06            [ 1]  307 	cp	a, #0x06
      00016A 27 16            [ 1]  308 	jreq	00107$
      00016C A1 05            [ 1]  309 	cp	a, #0x05
      00016E 27 12            [ 1]  310 	jreq	00107$
      000170 A1 34            [ 1]  311 	cp	a, #0x34
      000172 27 0E            [ 1]  312 	jreq	00107$
      000174 88               [ 1]  313 	push	a
      000175 4B 91            [ 1]  314 	push	#0x91
      000177 5F               [ 1]  315 	clrw	x
      000178 89               [ 2]  316 	pushw	x
      000179 4B 00            [ 1]  317 	push	#0x00
      00017B AEr00r00         [ 2]  318 	ldw	x, #(___str_0+0)
      00017E CDr00r00         [ 4]  319 	call	_assert_failed
      000181 84               [ 1]  320 	pop	a
      000182                        321 00107$:
                                    322 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 146: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000182 0D 04            [ 1]  323 	tnz	(0x04, sp)
      000184 27 12            [ 1]  324 	jreq	00118$
      000186 0D 04            [ 1]  325 	tnz	(0x04, sp)
      000188 26 0E            [ 1]  326 	jrne	00118$
      00018A 88               [ 1]  327 	push	a
      00018B 4B 92            [ 1]  328 	push	#0x92
      00018D 5F               [ 1]  329 	clrw	x
      00018E 89               [ 2]  330 	pushw	x
      00018F 4B 00            [ 1]  331 	push	#0x00
      000191 AEr00r00         [ 2]  332 	ldw	x, #(___str_0+0)
      000194 CDr00r00         [ 4]  333 	call	_assert_failed
      000197 84               [ 1]  334 	pop	a
      000198                        335 00118$:
                                    336 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 149: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)SPI_IT & (uint8_t)0x0F));
      000198 A4 0F            [ 1]  337 	and	a, #0x0f
      00019A 97               [ 1]  338 	ld	xl, a
      00019B A6 01            [ 1]  339 	ld	a, #0x01
      00019D 88               [ 1]  340 	push	a
      00019E 9F               [ 1]  341 	ld	a, xl
      00019F 4D               [ 1]  342 	tnz	a
      0001A0 27 05            [ 1]  343 	jreq	00172$
      0001A2                        344 00171$:
      0001A2 08 01            [ 1]  345 	sll	(1, sp)
      0001A4 4A               [ 1]  346 	dec	a
      0001A5 26 FB            [ 1]  347 	jrne	00171$
      0001A7                        348 00172$:
      0001A7 84               [ 1]  349 	pop	a
                                    350 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 153: SPI->ICR |= itpos; /* Enable interrupt*/
      0001A8 AE 52 02         [ 2]  351 	ldw	x, #0x5202
      0001AB 88               [ 1]  352 	push	a
      0001AC F6               [ 1]  353 	ld	a, (x)
      0001AD 6B 02            [ 1]  354 	ld	(0x02, sp), a
      0001AF 84               [ 1]  355 	pop	a
                                    356 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 151: if (NewState != DISABLE)
      0001B0 0D 04            [ 1]  357 	tnz	(0x04, sp)
      0001B2 27 07            [ 1]  358 	jreq	00102$
                                    359 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 153: SPI->ICR |= itpos; /* Enable interrupt*/
      0001B4 1A 01            [ 1]  360 	or	a, (0x01, sp)
      0001B6 C7 52 02         [ 1]  361 	ld	0x5202, a
      0001B9 20 06            [ 2]  362 	jra	00104$
      0001BB                        363 00102$:
                                    364 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 157: SPI->ICR &= (uint8_t)(~itpos); /* Disable interrupt*/
      0001BB 43               [ 1]  365 	cpl	a
      0001BC 14 01            [ 1]  366 	and	a, (0x01, sp)
      0001BE C7 52 02         [ 1]  367 	ld	0x5202, a
      0001C1                        368 00104$:
                                    369 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 159: }
      0001C1 84               [ 1]  370 	pop	a
      0001C2 85               [ 2]  371 	popw	x
      0001C3 84               [ 1]  372 	pop	a
      0001C4 FC               [ 2]  373 	jp	(x)
                                    374 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 166: void SPI_SendData(uint8_t Data)
                                    375 ;	-----------------------------------------
                                    376 ;	 function SPI_SendData
                                    377 ;	-----------------------------------------
      0001C5                        378 _SPI_SendData:
                                    379 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 168: SPI->DR = Data; /* Write in the DR register the data to be sent*/
      0001C5 C7 52 04         [ 1]  380 	ld	0x5204, a
                                    381 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 169: }
      0001C8 81               [ 4]  382 	ret
                                    383 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 176: uint8_t SPI_ReceiveData(void)
                                    384 ;	-----------------------------------------
                                    385 ;	 function SPI_ReceiveData
                                    386 ;	-----------------------------------------
      0001C9                        387 _SPI_ReceiveData:
                                    388 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 178: return ((uint8_t)SPI->DR); /* Return the data in the DR register*/
      0001C9 C6 52 04         [ 1]  389 	ld	a, 0x5204
                                    390 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 179: }
      0001CC 81               [ 4]  391 	ret
                                    392 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 187: void SPI_NSSInternalSoftwareCmd(FunctionalState NewState)
                                    393 ;	-----------------------------------------
                                    394 ;	 function SPI_NSSInternalSoftwareCmd
                                    395 ;	-----------------------------------------
      0001CD                        396 _SPI_NSSInternalSoftwareCmd:
      0001CD 88               [ 1]  397 	push	a
                                    398 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 190: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0001CE 6B 01            [ 1]  399 	ld	(0x01, sp), a
      0001D0 27 10            [ 1]  400 	jreq	00107$
      0001D2 0D 01            [ 1]  401 	tnz	(0x01, sp)
      0001D4 26 0C            [ 1]  402 	jrne	00107$
      0001D6 4B BE            [ 1]  403 	push	#0xbe
      0001D8 5F               [ 1]  404 	clrw	x
      0001D9 89               [ 2]  405 	pushw	x
      0001DA 4B 00            [ 1]  406 	push	#0x00
      0001DC AEr00r00         [ 2]  407 	ldw	x, #(___str_0+0)
      0001DF CDr00r00         [ 4]  408 	call	_assert_failed
      0001E2                        409 00107$:
                                    410 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 194: SPI->CR2 |= SPI_CR2_SSI; /* Set NSS pin internally by software*/
      0001E2 C6 52 01         [ 1]  411 	ld	a, 0x5201
                                    412 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 192: if (NewState != DISABLE)
      0001E5 0D 01            [ 1]  413 	tnz	(0x01, sp)
      0001E7 27 07            [ 1]  414 	jreq	00102$
                                    415 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 194: SPI->CR2 |= SPI_CR2_SSI; /* Set NSS pin internally by software*/
      0001E9 AA 01            [ 1]  416 	or	a, #0x01
      0001EB C7 52 01         [ 1]  417 	ld	0x5201, a
      0001EE 20 05            [ 2]  418 	jra	00104$
      0001F0                        419 00102$:
                                    420 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 198: SPI->CR2 &= (uint8_t)(~SPI_CR2_SSI); /* Reset NSS pin internally by software*/
      0001F0 A4 FE            [ 1]  421 	and	a, #0xfe
      0001F2 C7 52 01         [ 1]  422 	ld	0x5201, a
      0001F5                        423 00104$:
                                    424 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 200: }
      0001F5 84               [ 1]  425 	pop	a
      0001F6 81               [ 4]  426 	ret
                                    427 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 207: void SPI_TransmitCRC(void)
                                    428 ;	-----------------------------------------
                                    429 ;	 function SPI_TransmitCRC
                                    430 ;	-----------------------------------------
      0001F7                        431 _SPI_TransmitCRC:
                                    432 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 209: SPI->CR2 |= SPI_CR2_CRCNEXT; /* Enable the CRC transmission*/
      0001F7 72 18 52 01      [ 1]  433 	bset	0x5201, #4
                                    434 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 210: }
      0001FB 81               [ 4]  435 	ret
                                    436 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 218: void SPI_CalculateCRCCmd(FunctionalState NewState)
                                    437 ;	-----------------------------------------
                                    438 ;	 function SPI_CalculateCRCCmd
                                    439 ;	-----------------------------------------
      0001FC                        440 _SPI_CalculateCRCCmd:
      0001FC 88               [ 1]  441 	push	a
                                    442 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 221: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0001FD 6B 01            [ 1]  443 	ld	(0x01, sp), a
      0001FF 27 10            [ 1]  444 	jreq	00107$
      000201 0D 01            [ 1]  445 	tnz	(0x01, sp)
      000203 26 0C            [ 1]  446 	jrne	00107$
      000205 4B DD            [ 1]  447 	push	#0xdd
      000207 5F               [ 1]  448 	clrw	x
      000208 89               [ 2]  449 	pushw	x
      000209 4B 00            [ 1]  450 	push	#0x00
      00020B AEr00r00         [ 2]  451 	ldw	x, #(___str_0+0)
      00020E CDr00r00         [ 4]  452 	call	_assert_failed
      000211                        453 00107$:
                                    454 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 225: SPI->CR2 |= SPI_CR2_CRCEN; /* Enable the CRC calculation*/
      000211 C6 52 01         [ 1]  455 	ld	a, 0x5201
                                    456 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 223: if (NewState != DISABLE)
      000214 0D 01            [ 1]  457 	tnz	(0x01, sp)
      000216 27 07            [ 1]  458 	jreq	00102$
                                    459 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 225: SPI->CR2 |= SPI_CR2_CRCEN; /* Enable the CRC calculation*/
      000218 AA 20            [ 1]  460 	or	a, #0x20
      00021A C7 52 01         [ 1]  461 	ld	0x5201, a
      00021D 20 05            [ 2]  462 	jra	00104$
      00021F                        463 00102$:
                                    464 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 229: SPI->CR2 &= (uint8_t)(~SPI_CR2_CRCEN); /* Disable the CRC calculation*/
      00021F A4 DF            [ 1]  465 	and	a, #0xdf
      000221 C7 52 01         [ 1]  466 	ld	0x5201, a
      000224                        467 00104$:
                                    468 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 231: }
      000224 84               [ 1]  469 	pop	a
      000225 81               [ 4]  470 	ret
                                    471 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 238: uint8_t SPI_GetCRC(SPI_CRC_TypeDef SPI_CRC)
                                    472 ;	-----------------------------------------
                                    473 ;	 function SPI_GetCRC
                                    474 ;	-----------------------------------------
      000226                        475 _SPI_GetCRC:
                                    476 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 243: assert_param(IS_SPI_CRC_OK(SPI_CRC));
      000226 4D               [ 1]  477 	tnz	a
      000227 26 11            [ 1]  478 	jrne	00107$
      000229 4D               [ 1]  479 	tnz	a
      00022A 27 0E            [ 1]  480 	jreq	00107$
      00022C 88               [ 1]  481 	push	a
      00022D 4B F3            [ 1]  482 	push	#0xf3
      00022F 5F               [ 1]  483 	clrw	x
      000230 89               [ 2]  484 	pushw	x
      000231 4B 00            [ 1]  485 	push	#0x00
      000233 AEr00r00         [ 2]  486 	ldw	x, #(___str_0+0)
      000236 CDr00r00         [ 4]  487 	call	_assert_failed
      000239 84               [ 1]  488 	pop	a
      00023A                        489 00107$:
                                    490 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 245: if (SPI_CRC != SPI_CRC_RX)
      00023A 4D               [ 1]  491 	tnz	a
      00023B 27 04            [ 1]  492 	jreq	00102$
                                    493 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 247: crcreg = SPI->TXCRCR;  /* Get the Tx CRC register*/
      00023D C6 52 07         [ 1]  494 	ld	a, 0x5207
      000240 81               [ 4]  495 	ret
      000241                        496 00102$:
                                    497 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 251: crcreg = SPI->RXCRCR; /* Get the Rx CRC register*/
      000241 C6 52 06         [ 1]  498 	ld	a, 0x5206
                                    499 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 255: return crcreg;
                                    500 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 256: }
      000244 81               [ 4]  501 	ret
                                    502 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 263: void SPI_ResetCRC(void)
                                    503 ;	-----------------------------------------
                                    504 ;	 function SPI_ResetCRC
                                    505 ;	-----------------------------------------
      000245                        506 _SPI_ResetCRC:
                                    507 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 267: SPI_CalculateCRCCmd(ENABLE);
      000245 A6 01            [ 1]  508 	ld	a, #0x01
      000247 CDr01rFC         [ 4]  509 	call	_SPI_CalculateCRCCmd
                                    510 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 270: SPI_Cmd(ENABLE);
      00024A A6 01            [ 1]  511 	ld	a, #0x01
                                    512 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 271: }
      00024C CCr01r39         [ 2]  513 	jp	_SPI_Cmd
                                    514 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 278: uint8_t SPI_GetCRCPolynomial(void)
                                    515 ;	-----------------------------------------
                                    516 ;	 function SPI_GetCRCPolynomial
                                    517 ;	-----------------------------------------
      00024F                        518 _SPI_GetCRCPolynomial:
                                    519 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 280: return SPI->CRCPR; /* Return the CRC polynomial register */
      00024F C6 52 05         [ 1]  520 	ld	a, 0x5205
                                    521 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 281: }
      000252 81               [ 4]  522 	ret
                                    523 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 288: void SPI_BiDirectionalLineConfig(SPI_Direction_TypeDef SPI_Direction)
                                    524 ;	-----------------------------------------
                                    525 ;	 function SPI_BiDirectionalLineConfig
                                    526 ;	-----------------------------------------
      000253                        527 _SPI_BiDirectionalLineConfig:
      000253 88               [ 1]  528 	push	a
                                    529 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 291: assert_param(IS_SPI_DIRECTION_OK(SPI_Direction));
      000254 6B 01            [ 1]  530 	ld	(0x01, sp), a
      000256 27 10            [ 1]  531 	jreq	00107$
      000258 0D 01            [ 1]  532 	tnz	(0x01, sp)
      00025A 26 0C            [ 1]  533 	jrne	00107$
      00025C 4B 23            [ 1]  534 	push	#0x23
      00025E 4B 01            [ 1]  535 	push	#0x01
      000260 5F               [ 1]  536 	clrw	x
      000261 89               [ 2]  537 	pushw	x
      000262 AEr00r00         [ 2]  538 	ldw	x, #(___str_0+0)
      000265 CDr00r00         [ 4]  539 	call	_assert_failed
      000268                        540 00107$:
                                    541 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 295: SPI->CR2 |= SPI_CR2_BDOE; /* Set the Tx only mode*/
      000268 C6 52 01         [ 1]  542 	ld	a, 0x5201
                                    543 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 293: if (SPI_Direction != SPI_DIRECTION_RX)
      00026B 0D 01            [ 1]  544 	tnz	(0x01, sp)
      00026D 27 07            [ 1]  545 	jreq	00102$
                                    546 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 295: SPI->CR2 |= SPI_CR2_BDOE; /* Set the Tx only mode*/
      00026F AA 40            [ 1]  547 	or	a, #0x40
      000271 C7 52 01         [ 1]  548 	ld	0x5201, a
      000274 20 05            [ 2]  549 	jra	00104$
      000276                        550 00102$:
                                    551 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 299: SPI->CR2 &= (uint8_t)(~SPI_CR2_BDOE); /* Set the Rx only mode*/
      000276 A4 BF            [ 1]  552 	and	a, #0xbf
      000278 C7 52 01         [ 1]  553 	ld	0x5201, a
      00027B                        554 00104$:
                                    555 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 301: }
      00027B 84               [ 1]  556 	pop	a
      00027C 81               [ 4]  557 	ret
                                    558 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 311: FlagStatus SPI_GetFlagStatus(SPI_Flag_TypeDef SPI_FLAG)
                                    559 ;	-----------------------------------------
                                    560 ;	 function SPI_GetFlagStatus
                                    561 ;	-----------------------------------------
      00027D                        562 _SPI_GetFlagStatus:
      00027D 88               [ 1]  563 	push	a
                                    564 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 315: assert_param(IS_SPI_FLAGS_OK(SPI_FLAG));
      00027E A1 40            [ 1]  565 	cp	a, #0x40
      000280 27 26            [ 1]  566 	jreq	00107$
      000282 A1 20            [ 1]  567 	cp	a, #0x20
      000284 27 22            [ 1]  568 	jreq	00107$
      000286 A1 10            [ 1]  569 	cp	a, #0x10
      000288 27 1E            [ 1]  570 	jreq	00107$
      00028A A1 08            [ 1]  571 	cp	a, #0x08
      00028C 27 1A            [ 1]  572 	jreq	00107$
      00028E A1 02            [ 1]  573 	cp	a, #0x02
      000290 27 16            [ 1]  574 	jreq	00107$
      000292 A1 01            [ 1]  575 	cp	a, #0x01
      000294 27 12            [ 1]  576 	jreq	00107$
      000296 A1 80            [ 1]  577 	cp	a, #0x80
      000298 27 0E            [ 1]  578 	jreq	00107$
      00029A 88               [ 1]  579 	push	a
      00029B 4B 3B            [ 1]  580 	push	#0x3b
      00029D 4B 01            [ 1]  581 	push	#0x01
      00029F 5F               [ 1]  582 	clrw	x
      0002A0 89               [ 2]  583 	pushw	x
      0002A1 AEr00r00         [ 2]  584 	ldw	x, #(___str_0+0)
      0002A4 CDr00r00         [ 4]  585 	call	_assert_failed
      0002A7 84               [ 1]  586 	pop	a
      0002A8                        587 00107$:
                                    588 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 318: if ((SPI->SR & (uint8_t)SPI_FLAG) != (uint8_t)RESET)
      0002A8 AE 52 03         [ 2]  589 	ldw	x, #0x5203
      0002AB 88               [ 1]  590 	push	a
      0002AC F6               [ 1]  591 	ld	a, (x)
      0002AD 6B 02            [ 1]  592 	ld	(0x02, sp), a
      0002AF 84               [ 1]  593 	pop	a
      0002B0 14 01            [ 1]  594 	and	a, (0x01, sp)
      0002B2 27 03            [ 1]  595 	jreq	00102$
                                    596 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 320: status = SET; /* SPI_FLAG is set */
      0002B4 A6 01            [ 1]  597 	ld	a, #0x01
                                    598 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 324: status = RESET; /* SPI_FLAG is reset*/
      0002B6 21                     599 	.byte 0x21
      0002B7                        600 00102$:
      0002B7 4F               [ 1]  601 	clr	a
      0002B8                        602 00103$:
                                    603 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 328: return status;
                                    604 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 329: }
      0002B8 5B 01            [ 2]  605 	addw	sp, #1
      0002BA 81               [ 4]  606 	ret
                                    607 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 346: void SPI_ClearFlag(SPI_Flag_TypeDef SPI_FLAG)
                                    608 ;	-----------------------------------------
                                    609 ;	 function SPI_ClearFlag
                                    610 ;	-----------------------------------------
      0002BB                        611 _SPI_ClearFlag:
                                    612 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 348: assert_param(IS_SPI_CLEAR_FLAGS_OK(SPI_FLAG));
      0002BB A1 10            [ 1]  613 	cp	a, #0x10
      0002BD 27 12            [ 1]  614 	jreq	00104$
      0002BF A1 08            [ 1]  615 	cp	a, #0x08
      0002C1 27 0E            [ 1]  616 	jreq	00104$
      0002C3 88               [ 1]  617 	push	a
      0002C4 4B 5C            [ 1]  618 	push	#0x5c
      0002C6 4B 01            [ 1]  619 	push	#0x01
      0002C8 5F               [ 1]  620 	clrw	x
      0002C9 89               [ 2]  621 	pushw	x
      0002CA AEr00r00         [ 2]  622 	ldw	x, #(___str_0+0)
      0002CD CDr00r00         [ 4]  623 	call	_assert_failed
      0002D0 84               [ 1]  624 	pop	a
      0002D1                        625 00104$:
                                    626 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 350: SPI->SR = (uint8_t)(~SPI_FLAG);
      0002D1 43               [ 1]  627 	cpl	a
      0002D2 C7 52 03         [ 1]  628 	ld	0x5203, a
                                    629 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 351: }
      0002D5 81               [ 4]  630 	ret
                                    631 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 366: ITStatus SPI_GetITStatus(SPI_IT_TypeDef SPI_IT)
                                    632 ;	-----------------------------------------
                                    633 ;	 function SPI_GetITStatus
                                    634 ;	-----------------------------------------
      0002D6                        635 _SPI_GetITStatus:
      0002D6 89               [ 2]  636 	pushw	x
                                    637 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 373: assert_param(IS_SPI_GET_IT_OK(SPI_IT));
      0002D7 A1 65            [ 1]  638 	cp	a, #0x65
      0002D9 27 22            [ 1]  639 	jreq	00108$
      0002DB A1 55            [ 1]  640 	cp	a, #0x55
      0002DD 27 1E            [ 1]  641 	jreq	00108$
      0002DF A1 45            [ 1]  642 	cp	a, #0x45
      0002E1 27 1A            [ 1]  643 	jreq	00108$
      0002E3 A1 34            [ 1]  644 	cp	a, #0x34
      0002E5 27 16            [ 1]  645 	jreq	00108$
      0002E7 A1 17            [ 1]  646 	cp	a, #0x17
      0002E9 27 12            [ 1]  647 	jreq	00108$
      0002EB A1 06            [ 1]  648 	cp	a, #0x06
      0002ED 27 0E            [ 1]  649 	jreq	00108$
      0002EF 88               [ 1]  650 	push	a
      0002F0 4B 75            [ 1]  651 	push	#0x75
      0002F2 4B 01            [ 1]  652 	push	#0x01
      0002F4 5F               [ 1]  653 	clrw	x
      0002F5 89               [ 2]  654 	pushw	x
      0002F6 AEr00r00         [ 2]  655 	ldw	x, #(___str_0+0)
      0002F9 CDr00r00         [ 4]  656 	call	_assert_failed
      0002FC 84               [ 1]  657 	pop	a
      0002FD                        658 00108$:
                                    659 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 375: itpos = (uint8_t)((uint8_t)1 << ((uint8_t)SPI_IT & (uint8_t)0x0F));
      0002FD 88               [ 1]  660 	push	a
      0002FE A4 0F            [ 1]  661 	and	a, #0x0f
      000300 97               [ 1]  662 	ld	xl, a
      000301 A6 01            [ 1]  663 	ld	a, #0x01
      000303 6B 02            [ 1]  664 	ld	(0x02, sp), a
      000305 9F               [ 1]  665 	ld	a, xl
      000306 4D               [ 1]  666 	tnz	a
      000307 27 05            [ 1]  667 	jreq	00183$
      000309                        668 00182$:
      000309 08 02            [ 1]  669 	sll	(0x02, sp)
      00030B 4A               [ 1]  670 	dec	a
      00030C 26 FB            [ 1]  671 	jrne	00182$
      00030E                        672 00183$:
      00030E 84               [ 1]  673 	pop	a
                                    674 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 378: itmask1 = (uint8_t)((uint8_t)SPI_IT >> (uint8_t)4);
      00030F 4E               [ 1]  675 	swap	a
      000310 A4 0F            [ 1]  676 	and	a, #0x0f
                                    677 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 380: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      000312 88               [ 1]  678 	push	a
      000313 A6 01            [ 1]  679 	ld	a, #0x01
      000315 6B 03            [ 1]  680 	ld	(0x03, sp), a
      000317 84               [ 1]  681 	pop	a
      000318 4D               [ 1]  682 	tnz	a
      000319 27 05            [ 1]  683 	jreq	00185$
      00031B                        684 00184$:
      00031B 08 02            [ 1]  685 	sll	(0x02, sp)
      00031D 4A               [ 1]  686 	dec	a
      00031E 26 FB            [ 1]  687 	jrne	00184$
      000320                        688 00185$:
                                    689 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 382: enablestatus = (uint8_t)((uint8_t)SPI->SR & itmask2);
      000320 C6 52 03         [ 1]  690 	ld	a, 0x5203
      000323 14 02            [ 1]  691 	and	a, (0x02, sp)
      000325 97               [ 1]  692 	ld	xl, a
                                    693 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 384: if (((SPI->ICR & itpos) != RESET) && enablestatus)
      000326 C6 52 02         [ 1]  694 	ld	a, 0x5202
      000329 14 01            [ 1]  695 	and	a, (0x01, sp)
      00032B 27 07            [ 1]  696 	jreq	00102$
      00032D 9F               [ 1]  697 	ld	a, xl
      00032E 4D               [ 1]  698 	tnz	a
      00032F 27 03            [ 1]  699 	jreq	00102$
                                    700 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 387: pendingbitstatus = SET;
      000331 A6 01            [ 1]  701 	ld	a, #0x01
                                    702 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 392: pendingbitstatus = RESET;
      000333 21                     703 	.byte 0x21
      000334                        704 00102$:
      000334 4F               [ 1]  705 	clr	a
      000335                        706 00103$:
                                    707 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 395: return  pendingbitstatus;
                                    708 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 396: }
      000335 85               [ 2]  709 	popw	x
      000336 81               [ 4]  710 	ret
                                    711 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 412: void SPI_ClearITPendingBit(SPI_IT_TypeDef SPI_IT)
                                    712 ;	-----------------------------------------
                                    713 ;	 function SPI_ClearITPendingBit
                                    714 ;	-----------------------------------------
      000337                        715 _SPI_ClearITPendingBit:
                                    716 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 415: assert_param(IS_SPI_CLEAR_IT_OK(SPI_IT));
      000337 A1 45            [ 1]  717 	cp	a, #0x45
      000339 27 12            [ 1]  718 	jreq	00104$
      00033B A1 34            [ 1]  719 	cp	a, #0x34
      00033D 27 0E            [ 1]  720 	jreq	00104$
      00033F 88               [ 1]  721 	push	a
      000340 4B 9F            [ 1]  722 	push	#0x9f
      000342 4B 01            [ 1]  723 	push	#0x01
      000344 5F               [ 1]  724 	clrw	x
      000345 89               [ 2]  725 	pushw	x
      000346 AEr00r00         [ 2]  726 	ldw	x, #(___str_0+0)
      000349 CDr00r00         [ 4]  727 	call	_assert_failed
      00034C 84               [ 1]  728 	pop	a
      00034D                        729 00104$:
                                    730 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 420: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)(SPI_IT & (uint8_t)0xF0) >> 4));
      00034D A4 F0            [ 1]  731 	and	a, #0xf0
      00034F 4E               [ 1]  732 	swap	a
      000350 A4 0F            [ 1]  733 	and	a, #0x0f
      000352 97               [ 1]  734 	ld	xl, a
      000353 A6 01            [ 1]  735 	ld	a, #0x01
      000355 88               [ 1]  736 	push	a
      000356 9F               [ 1]  737 	ld	a, xl
      000357 4D               [ 1]  738 	tnz	a
      000358 27 05            [ 1]  739 	jreq	00125$
      00035A                        740 00124$:
      00035A 08 01            [ 1]  741 	sll	(1, sp)
      00035C 4A               [ 1]  742 	dec	a
      00035D 26 FB            [ 1]  743 	jrne	00124$
      00035F                        744 00125$:
      00035F 84               [ 1]  745 	pop	a
                                    746 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 422: SPI->SR = (uint8_t)(~itpos);
      000360 43               [ 1]  747 	cpl	a
      000361 C7 52 03         [ 1]  748 	ld	0x5203, a
                                    749 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_spi.c: 424: }
      000364 81               [ 4]  750 	ret
                                    751 	.area CODE
                                    752 	.area CONST
                                    753 	.area CONST
      000000                        754 ___str_0:
      000000 2E 2F 53 54 4D 38 53   755 	.ascii "./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/s"
             5F 53 74 64 50 65 72
             69 70 68 5F 4C 69 62
             2F 4C 69 62 72 61 72
             69 65 73 2F 53 54 4D
             38 53 5F 53 74 64 50
             65 72 69 70 68 5F 44
             72 69 76 65 72 2F 73
             72 63 2F 73
      00003C 74 6D 38 73 5F 73 70   756 	.ascii "tm8s_spi.c"
             69 2E 63
      000046 00                     757 	.db 0x00
                                    758 	.area CODE
                                    759 	.area INITIALIZER
                                    760 	.area CABS (ABS)
