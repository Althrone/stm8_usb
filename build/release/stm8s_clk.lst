                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLKPrescTable
                                     12 	.globl _HSIDivFactor
                                     13 	.globl _assert_failed
                                     14 	.globl _CLK_DeInit
                                     15 	.globl _CLK_FastHaltWakeUpCmd
                                     16 	.globl _CLK_HSECmd
                                     17 	.globl _CLK_HSICmd
                                     18 	.globl _CLK_LSICmd
                                     19 	.globl _CLK_CCOCmd
                                     20 	.globl _CLK_ClockSwitchCmd
                                     21 	.globl _CLK_SlowActiveHaltWakeUpCmd
                                     22 	.globl _CLK_PeripheralClockConfig
                                     23 	.globl _CLK_ClockSwitchConfig
                                     24 	.globl _CLK_HSIPrescalerConfig
                                     25 	.globl _CLK_CCOConfig
                                     26 	.globl _CLK_ITConfig
                                     27 	.globl _CLK_SYSCLKConfig
                                     28 	.globl _CLK_SWIMConfig
                                     29 	.globl _CLK_ClockSecuritySystemEnable
                                     30 	.globl _CLK_GetSYSCLKSource
                                     31 	.globl _CLK_GetClockFreq
                                     32 	.globl _CLK_AdjustHSICalibrationValue
                                     33 	.globl _CLK_SYSCLKEmergencyClear
                                     34 	.globl _CLK_GetFlagStatus
                                     35 	.globl _CLK_GetITStatus
                                     36 	.globl _CLK_ClearITPendingBit
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DATA
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area INITIALIZED
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS (ABS)
                                     49 
                                     50 ; default segment ordering for linker
                                     51 	.area HOME
                                     52 	.area GSINIT
                                     53 	.area GSFINAL
                                     54 	.area CONST
                                     55 	.area INITIALIZER
                                     56 	.area CODE
                                     57 
                                     58 ;--------------------------------------------------------
                                     59 ; global & static initialisations
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area GSINIT
                                     63 	.area GSFINAL
                                     64 	.area GSINIT
                                     65 ;--------------------------------------------------------
                                     66 ; Home
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area HOME
                                     70 ;--------------------------------------------------------
                                     71 ; code
                                     72 ;--------------------------------------------------------
                                     73 	.area CODE
                                     74 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 72: void CLK_DeInit(void)
                                     75 ;	-----------------------------------------
                                     76 ;	 function CLK_DeInit
                                     77 ;	-----------------------------------------
      000000                         78 _CLK_DeInit:
                                     79 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 74: CLK->ICKR = CLK_ICKR_RESET_VALUE;
      000000 35 01 50 C0      [ 1]   80 	mov	0x50c0+0, #0x01
                                     81 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 75: CLK->ECKR = CLK_ECKR_RESET_VALUE;
      000004 35 00 50 C1      [ 1]   82 	mov	0x50c1+0, #0x00
                                     83 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 76: CLK->SWR  = CLK_SWR_RESET_VALUE;
      000008 35 E1 50 C4      [ 1]   84 	mov	0x50c4+0, #0xe1
                                     85 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 77: CLK->SWCR = CLK_SWCR_RESET_VALUE;
      00000C 35 00 50 C5      [ 1]   86 	mov	0x50c5+0, #0x00
                                     87 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 78: CLK->CKDIVR = CLK_CKDIVR_RESET_VALUE;
      000010 35 18 50 C6      [ 1]   88 	mov	0x50c6+0, #0x18
                                     89 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 79: CLK->PCKENR1 = CLK_PCKENR1_RESET_VALUE;
      000014 35 FF 50 C7      [ 1]   90 	mov	0x50c7+0, #0xff
                                     91 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 80: CLK->PCKENR2 = CLK_PCKENR2_RESET_VALUE;
      000018 35 FF 50 CA      [ 1]   92 	mov	0x50ca+0, #0xff
                                     93 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 81: CLK->CSSR = CLK_CSSR_RESET_VALUE;
      00001C 35 00 50 C8      [ 1]   94 	mov	0x50c8+0, #0x00
                                     95 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 82: CLK->CCOR = CLK_CCOR_RESET_VALUE;
      000020 35 00 50 C9      [ 1]   96 	mov	0x50c9+0, #0x00
                                     97 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 83: while ((CLK->CCOR & CLK_CCOR_CCOEN)!= 0)
      000024                         98 00101$:
      000024 72 00 50 C9 FB   [ 2]   99 	btjt	0x50c9, #0, 00101$
                                    100 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 85: CLK->CCOR = CLK_CCOR_RESET_VALUE;
      000029 35 00 50 C9      [ 1]  101 	mov	0x50c9+0, #0x00
                                    102 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 86: CLK->HSITRIMR = CLK_HSITRIMR_RESET_VALUE;
      00002D 35 00 50 CC      [ 1]  103 	mov	0x50cc+0, #0x00
                                    104 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 87: CLK->SWIMCCR = CLK_SWIMCCR_RESET_VALUE;
      000031 35 00 50 CD      [ 1]  105 	mov	0x50cd+0, #0x00
                                    106 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 88: }
      000035 81               [ 4]  107 	ret
                                    108 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 99: void CLK_FastHaltWakeUpCmd(FunctionalState NewState)
                                    109 ;	-----------------------------------------
                                    110 ;	 function CLK_FastHaltWakeUpCmd
                                    111 ;	-----------------------------------------
      000036                        112 _CLK_FastHaltWakeUpCmd:
      000036 88               [ 1]  113 	push	a
                                    114 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 102: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000037 6B 01            [ 1]  115 	ld	(0x01, sp), a
      000039 27 10            [ 1]  116 	jreq	00107$
      00003B 0D 01            [ 1]  117 	tnz	(0x01, sp)
      00003D 26 0C            [ 1]  118 	jrne	00107$
      00003F 4B 66            [ 1]  119 	push	#0x66
      000041 5F               [ 1]  120 	clrw	x
      000042 89               [ 2]  121 	pushw	x
      000043 4B 00            [ 1]  122 	push	#0x00
      000045 AEr00r0C         [ 2]  123 	ldw	x, #(___str_0+0)
      000048 CDr00r00         [ 4]  124 	call	_assert_failed
      00004B                        125 00107$:
                                    126 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 107: CLK->ICKR |= CLK_ICKR_FHWU;
      00004B C6 50 C0         [ 1]  127 	ld	a, 0x50c0
                                    128 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 104: if (NewState != DISABLE)
      00004E 0D 01            [ 1]  129 	tnz	(0x01, sp)
      000050 27 07            [ 1]  130 	jreq	00102$
                                    131 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 107: CLK->ICKR |= CLK_ICKR_FHWU;
      000052 AA 04            [ 1]  132 	or	a, #0x04
      000054 C7 50 C0         [ 1]  133 	ld	0x50c0, a
      000057 20 05            [ 2]  134 	jra	00104$
      000059                        135 00102$:
                                    136 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 112: CLK->ICKR &= (uint8_t)(~CLK_ICKR_FHWU);
      000059 A4 FB            [ 1]  137 	and	a, #0xfb
      00005B C7 50 C0         [ 1]  138 	ld	0x50c0, a
      00005E                        139 00104$:
                                    140 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 114: }
      00005E 84               [ 1]  141 	pop	a
      00005F 81               [ 4]  142 	ret
                                    143 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 121: void CLK_HSECmd(FunctionalState NewState)
                                    144 ;	-----------------------------------------
                                    145 ;	 function CLK_HSECmd
                                    146 ;	-----------------------------------------
      000060                        147 _CLK_HSECmd:
      000060 88               [ 1]  148 	push	a
                                    149 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 124: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000061 6B 01            [ 1]  150 	ld	(0x01, sp), a
      000063 27 10            [ 1]  151 	jreq	00107$
      000065 0D 01            [ 1]  152 	tnz	(0x01, sp)
      000067 26 0C            [ 1]  153 	jrne	00107$
      000069 4B 7C            [ 1]  154 	push	#0x7c
      00006B 5F               [ 1]  155 	clrw	x
      00006C 89               [ 2]  156 	pushw	x
      00006D 4B 00            [ 1]  157 	push	#0x00
      00006F AEr00r0C         [ 2]  158 	ldw	x, #(___str_0+0)
      000072 CDr00r00         [ 4]  159 	call	_assert_failed
      000075                        160 00107$:
                                    161 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 129: CLK->ECKR |= CLK_ECKR_HSEEN;
      000075 C6 50 C1         [ 1]  162 	ld	a, 0x50c1
                                    163 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 126: if (NewState != DISABLE)
      000078 0D 01            [ 1]  164 	tnz	(0x01, sp)
      00007A 27 07            [ 1]  165 	jreq	00102$
                                    166 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 129: CLK->ECKR |= CLK_ECKR_HSEEN;
      00007C AA 01            [ 1]  167 	or	a, #0x01
      00007E C7 50 C1         [ 1]  168 	ld	0x50c1, a
      000081 20 05            [ 2]  169 	jra	00104$
      000083                        170 00102$:
                                    171 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 134: CLK->ECKR &= (uint8_t)(~CLK_ECKR_HSEEN);
      000083 A4 FE            [ 1]  172 	and	a, #0xfe
      000085 C7 50 C1         [ 1]  173 	ld	0x50c1, a
      000088                        174 00104$:
                                    175 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 136: }
      000088 84               [ 1]  176 	pop	a
      000089 81               [ 4]  177 	ret
                                    178 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 143: void CLK_HSICmd(FunctionalState NewState)
                                    179 ;	-----------------------------------------
                                    180 ;	 function CLK_HSICmd
                                    181 ;	-----------------------------------------
      00008A                        182 _CLK_HSICmd:
      00008A 88               [ 1]  183 	push	a
                                    184 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 146: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      00008B 6B 01            [ 1]  185 	ld	(0x01, sp), a
      00008D 27 10            [ 1]  186 	jreq	00107$
      00008F 0D 01            [ 1]  187 	tnz	(0x01, sp)
      000091 26 0C            [ 1]  188 	jrne	00107$
      000093 4B 92            [ 1]  189 	push	#0x92
      000095 5F               [ 1]  190 	clrw	x
      000096 89               [ 2]  191 	pushw	x
      000097 4B 00            [ 1]  192 	push	#0x00
      000099 AEr00r0C         [ 2]  193 	ldw	x, #(___str_0+0)
      00009C CDr00r00         [ 4]  194 	call	_assert_failed
      00009F                        195 00107$:
                                    196 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 151: CLK->ICKR |= CLK_ICKR_HSIEN;
      00009F C6 50 C0         [ 1]  197 	ld	a, 0x50c0
                                    198 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 148: if (NewState != DISABLE)
      0000A2 0D 01            [ 1]  199 	tnz	(0x01, sp)
      0000A4 27 07            [ 1]  200 	jreq	00102$
                                    201 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 151: CLK->ICKR |= CLK_ICKR_HSIEN;
      0000A6 AA 01            [ 1]  202 	or	a, #0x01
      0000A8 C7 50 C0         [ 1]  203 	ld	0x50c0, a
      0000AB 20 05            [ 2]  204 	jra	00104$
      0000AD                        205 00102$:
                                    206 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 156: CLK->ICKR &= (uint8_t)(~CLK_ICKR_HSIEN);
      0000AD A4 FE            [ 1]  207 	and	a, #0xfe
      0000AF C7 50 C0         [ 1]  208 	ld	0x50c0, a
      0000B2                        209 00104$:
                                    210 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 158: }
      0000B2 84               [ 1]  211 	pop	a
      0000B3 81               [ 4]  212 	ret
                                    213 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 166: void CLK_LSICmd(FunctionalState NewState)
                                    214 ;	-----------------------------------------
                                    215 ;	 function CLK_LSICmd
                                    216 ;	-----------------------------------------
      0000B4                        217 _CLK_LSICmd:
      0000B4 88               [ 1]  218 	push	a
                                    219 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 169: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0000B5 6B 01            [ 1]  220 	ld	(0x01, sp), a
      0000B7 27 10            [ 1]  221 	jreq	00107$
      0000B9 0D 01            [ 1]  222 	tnz	(0x01, sp)
      0000BB 26 0C            [ 1]  223 	jrne	00107$
      0000BD 4B A9            [ 1]  224 	push	#0xa9
      0000BF 5F               [ 1]  225 	clrw	x
      0000C0 89               [ 2]  226 	pushw	x
      0000C1 4B 00            [ 1]  227 	push	#0x00
      0000C3 AEr00r0C         [ 2]  228 	ldw	x, #(___str_0+0)
      0000C6 CDr00r00         [ 4]  229 	call	_assert_failed
      0000C9                        230 00107$:
                                    231 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 174: CLK->ICKR |= CLK_ICKR_LSIEN;
      0000C9 C6 50 C0         [ 1]  232 	ld	a, 0x50c0
                                    233 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 171: if (NewState != DISABLE)
      0000CC 0D 01            [ 1]  234 	tnz	(0x01, sp)
      0000CE 27 07            [ 1]  235 	jreq	00102$
                                    236 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 174: CLK->ICKR |= CLK_ICKR_LSIEN;
      0000D0 AA 08            [ 1]  237 	or	a, #0x08
      0000D2 C7 50 C0         [ 1]  238 	ld	0x50c0, a
      0000D5 20 05            [ 2]  239 	jra	00104$
      0000D7                        240 00102$:
                                    241 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 179: CLK->ICKR &= (uint8_t)(~CLK_ICKR_LSIEN);
      0000D7 A4 F7            [ 1]  242 	and	a, #0xf7
      0000D9 C7 50 C0         [ 1]  243 	ld	0x50c0, a
      0000DC                        244 00104$:
                                    245 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 181: }
      0000DC 84               [ 1]  246 	pop	a
      0000DD 81               [ 4]  247 	ret
                                    248 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 189: void CLK_CCOCmd(FunctionalState NewState)
                                    249 ;	-----------------------------------------
                                    250 ;	 function CLK_CCOCmd
                                    251 ;	-----------------------------------------
      0000DE                        252 _CLK_CCOCmd:
      0000DE 88               [ 1]  253 	push	a
                                    254 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 192: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0000DF 6B 01            [ 1]  255 	ld	(0x01, sp), a
      0000E1 27 10            [ 1]  256 	jreq	00107$
      0000E3 0D 01            [ 1]  257 	tnz	(0x01, sp)
      0000E5 26 0C            [ 1]  258 	jrne	00107$
      0000E7 4B C0            [ 1]  259 	push	#0xc0
      0000E9 5F               [ 1]  260 	clrw	x
      0000EA 89               [ 2]  261 	pushw	x
      0000EB 4B 00            [ 1]  262 	push	#0x00
      0000ED AEr00r0C         [ 2]  263 	ldw	x, #(___str_0+0)
      0000F0 CDr00r00         [ 4]  264 	call	_assert_failed
      0000F3                        265 00107$:
                                    266 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 197: CLK->CCOR |= CLK_CCOR_CCOEN;
      0000F3 C6 50 C9         [ 1]  267 	ld	a, 0x50c9
                                    268 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 194: if (NewState != DISABLE)
      0000F6 0D 01            [ 1]  269 	tnz	(0x01, sp)
      0000F8 27 07            [ 1]  270 	jreq	00102$
                                    271 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 197: CLK->CCOR |= CLK_CCOR_CCOEN;
      0000FA AA 01            [ 1]  272 	or	a, #0x01
      0000FC C7 50 C9         [ 1]  273 	ld	0x50c9, a
      0000FF 20 05            [ 2]  274 	jra	00104$
      000101                        275 00102$:
                                    276 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 202: CLK->CCOR &= (uint8_t)(~CLK_CCOR_CCOEN);
      000101 A4 FE            [ 1]  277 	and	a, #0xfe
      000103 C7 50 C9         [ 1]  278 	ld	0x50c9, a
      000106                        279 00104$:
                                    280 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 204: }
      000106 84               [ 1]  281 	pop	a
      000107 81               [ 4]  282 	ret
                                    283 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 213: void CLK_ClockSwitchCmd(FunctionalState NewState)
                                    284 ;	-----------------------------------------
                                    285 ;	 function CLK_ClockSwitchCmd
                                    286 ;	-----------------------------------------
      000108                        287 _CLK_ClockSwitchCmd:
      000108 88               [ 1]  288 	push	a
                                    289 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 216: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000109 6B 01            [ 1]  290 	ld	(0x01, sp), a
      00010B 27 10            [ 1]  291 	jreq	00107$
      00010D 0D 01            [ 1]  292 	tnz	(0x01, sp)
      00010F 26 0C            [ 1]  293 	jrne	00107$
      000111 4B D8            [ 1]  294 	push	#0xd8
      000113 5F               [ 1]  295 	clrw	x
      000114 89               [ 2]  296 	pushw	x
      000115 4B 00            [ 1]  297 	push	#0x00
      000117 AEr00r0C         [ 2]  298 	ldw	x, #(___str_0+0)
      00011A CDr00r00         [ 4]  299 	call	_assert_failed
      00011D                        300 00107$:
                                    301 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 221: CLK->SWCR |= CLK_SWCR_SWEN;
      00011D C6 50 C5         [ 1]  302 	ld	a, 0x50c5
                                    303 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 218: if (NewState != DISABLE )
      000120 0D 01            [ 1]  304 	tnz	(0x01, sp)
      000122 27 07            [ 1]  305 	jreq	00102$
                                    306 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 221: CLK->SWCR |= CLK_SWCR_SWEN;
      000124 AA 02            [ 1]  307 	or	a, #0x02
      000126 C7 50 C5         [ 1]  308 	ld	0x50c5, a
      000129 20 05            [ 2]  309 	jra	00104$
      00012B                        310 00102$:
                                    311 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 226: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWEN);
      00012B A4 FD            [ 1]  312 	and	a, #0xfd
      00012D C7 50 C5         [ 1]  313 	ld	0x50c5, a
      000130                        314 00104$:
                                    315 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 228: }
      000130 84               [ 1]  316 	pop	a
      000131 81               [ 4]  317 	ret
                                    318 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 238: void CLK_SlowActiveHaltWakeUpCmd(FunctionalState NewState)
                                    319 ;	-----------------------------------------
                                    320 ;	 function CLK_SlowActiveHaltWakeUpCmd
                                    321 ;	-----------------------------------------
      000132                        322 _CLK_SlowActiveHaltWakeUpCmd:
      000132 88               [ 1]  323 	push	a
                                    324 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 241: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000133 6B 01            [ 1]  325 	ld	(0x01, sp), a
      000135 27 10            [ 1]  326 	jreq	00107$
      000137 0D 01            [ 1]  327 	tnz	(0x01, sp)
      000139 26 0C            [ 1]  328 	jrne	00107$
      00013B 4B F1            [ 1]  329 	push	#0xf1
      00013D 5F               [ 1]  330 	clrw	x
      00013E 89               [ 2]  331 	pushw	x
      00013F 4B 00            [ 1]  332 	push	#0x00
      000141 AEr00r0C         [ 2]  333 	ldw	x, #(___str_0+0)
      000144 CDr00r00         [ 4]  334 	call	_assert_failed
      000147                        335 00107$:
                                    336 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 246: CLK->ICKR |= CLK_ICKR_SWUAH;
      000147 C6 50 C0         [ 1]  337 	ld	a, 0x50c0
                                    338 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 243: if (NewState != DISABLE)
      00014A 0D 01            [ 1]  339 	tnz	(0x01, sp)
      00014C 27 07            [ 1]  340 	jreq	00102$
                                    341 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 246: CLK->ICKR |= CLK_ICKR_SWUAH;
      00014E AA 20            [ 1]  342 	or	a, #0x20
      000150 C7 50 C0         [ 1]  343 	ld	0x50c0, a
      000153 20 05            [ 2]  344 	jra	00104$
      000155                        345 00102$:
                                    346 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 251: CLK->ICKR &= (uint8_t)(~CLK_ICKR_SWUAH);
      000155 A4 DF            [ 1]  347 	and	a, #0xdf
      000157 C7 50 C0         [ 1]  348 	ld	0x50c0, a
      00015A                        349 00104$:
                                    350 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 253: }
      00015A 84               [ 1]  351 	pop	a
      00015B 81               [ 4]  352 	ret
                                    353 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 263: void CLK_PeripheralClockConfig(CLK_Peripheral_TypeDef CLK_Peripheral, FunctionalState NewState)
                                    354 ;	-----------------------------------------
                                    355 ;	 function CLK_PeripheralClockConfig
                                    356 ;	-----------------------------------------
      00015C                        357 _CLK_PeripheralClockConfig:
      00015C 52 03            [ 2]  358 	sub	sp, #3
      00015E 6B 03            [ 1]  359 	ld	(0x03, sp), a
                                    360 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 266: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000160 0D 06            [ 1]  361 	tnz	(0x06, sp)
      000162 27 10            [ 1]  362 	jreq	00113$
      000164 0D 06            [ 1]  363 	tnz	(0x06, sp)
      000166 26 0C            [ 1]  364 	jrne	00113$
      000168 4B 0A            [ 1]  365 	push	#0x0a
      00016A 4B 01            [ 1]  366 	push	#0x01
      00016C 5F               [ 1]  367 	clrw	x
      00016D 89               [ 2]  368 	pushw	x
      00016E AEr00r0C         [ 2]  369 	ldw	x, #(___str_0+0)
      000171 CDr00r00         [ 4]  370 	call	_assert_failed
      000174                        371 00113$:
                                    372 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 267: assert_param(IS_CLK_PERIPHERAL_OK(CLK_Peripheral));
      000174 0D 03            [ 1]  373 	tnz	(0x03, sp)
      000176 27 64            [ 1]  374 	jreq	00118$
      000178 7B 03            [ 1]  375 	ld	a, (0x03, sp)
      00017A 4A               [ 1]  376 	dec	a
      00017B 27 5F            [ 1]  377 	jreq	00118$
      00017D 7B 03            [ 1]  378 	ld	a, (0x03, sp)
      00017F A0 03            [ 1]  379 	sub	a, #0x03
      000181 26 02            [ 1]  380 	jrne	00260$
      000183 4C               [ 1]  381 	inc	a
      000184 21                     382 	.byte 0x21
      000185                        383 00260$:
      000185 4F               [ 1]  384 	clr	a
      000186                        385 00261$:
      000186 4D               [ 1]  386 	tnz	a
      000187 26 53            [ 1]  387 	jrne	00118$
      000189 4D               [ 1]  388 	tnz	a
      00018A 26 50            [ 1]  389 	jrne	00118$
      00018C 4D               [ 1]  390 	tnz	a
      00018D 26 4D            [ 1]  391 	jrne	00118$
      00018F 7B 03            [ 1]  392 	ld	a, (0x03, sp)
      000191 A0 04            [ 1]  393 	sub	a, #0x04
      000193 26 04            [ 1]  394 	jrne	00266$
      000195 4C               [ 1]  395 	inc	a
      000196 97               [ 1]  396 	ld	xl, a
      000197 20 02            [ 2]  397 	jra	00267$
      000199                        398 00266$:
      000199 4F               [ 1]  399 	clr	a
      00019A 97               [ 1]  400 	ld	xl, a
      00019B                        401 00267$:
      00019B 9F               [ 1]  402 	ld	a, xl
      00019C 4D               [ 1]  403 	tnz	a
      00019D 26 3D            [ 1]  404 	jrne	00118$
      00019F 7B 03            [ 1]  405 	ld	a, (0x03, sp)
      0001A1 A0 05            [ 1]  406 	sub	a, #0x05
      0001A3 26 02            [ 1]  407 	jrne	00270$
      0001A5 4C               [ 1]  408 	inc	a
      0001A6 21                     409 	.byte 0x21
      0001A7                        410 00270$:
      0001A7 4F               [ 1]  411 	clr	a
      0001A8                        412 00271$:
      0001A8 4D               [ 1]  413 	tnz	a
      0001A9 26 31            [ 1]  414 	jrne	00118$
      0001AB 4D               [ 1]  415 	tnz	a
      0001AC 26 2E            [ 1]  416 	jrne	00118$
      0001AE 9F               [ 1]  417 	ld	a, xl
      0001AF 4D               [ 1]  418 	tnz	a
      0001B0 26 2A            [ 1]  419 	jrne	00118$
      0001B2 7B 03            [ 1]  420 	ld	a, (0x03, sp)
      0001B4 A1 06            [ 1]  421 	cp	a, #0x06
      0001B6 27 24            [ 1]  422 	jreq	00118$
      0001B8 7B 03            [ 1]  423 	ld	a, (0x03, sp)
      0001BA A1 07            [ 1]  424 	cp	a, #0x07
      0001BC 27 1E            [ 1]  425 	jreq	00118$
      0001BE 7B 03            [ 1]  426 	ld	a, (0x03, sp)
      0001C0 A1 17            [ 1]  427 	cp	a, #0x17
      0001C2 27 18            [ 1]  428 	jreq	00118$
      0001C4 7B 03            [ 1]  429 	ld	a, (0x03, sp)
      0001C6 A1 13            [ 1]  430 	cp	a, #0x13
      0001C8 27 12            [ 1]  431 	jreq	00118$
      0001CA 7B 03            [ 1]  432 	ld	a, (0x03, sp)
      0001CC A1 12            [ 1]  433 	cp	a, #0x12
      0001CE 27 0C            [ 1]  434 	jreq	00118$
      0001D0 4B 0B            [ 1]  435 	push	#0x0b
      0001D2 4B 01            [ 1]  436 	push	#0x01
      0001D4 5F               [ 1]  437 	clrw	x
      0001D5 89               [ 2]  438 	pushw	x
      0001D6 AEr00r0C         [ 2]  439 	ldw	x, #(___str_0+0)
      0001D9 CDr00r00         [ 4]  440 	call	_assert_failed
      0001DC                        441 00118$:
                                    442 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 274: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0001DC 7B 03            [ 1]  443 	ld	a, (0x03, sp)
      0001DE A4 0F            [ 1]  444 	and	a, #0x0f
      0001E0 88               [ 1]  445 	push	a
      0001E1 A6 01            [ 1]  446 	ld	a, #0x01
      0001E3 6B 02            [ 1]  447 	ld	(0x02, sp), a
      0001E5 84               [ 1]  448 	pop	a
      0001E6 4D               [ 1]  449 	tnz	a
      0001E7 27 05            [ 1]  450 	jreq	00291$
      0001E9                        451 00290$:
      0001E9 08 01            [ 1]  452 	sll	(0x01, sp)
      0001EB 4A               [ 1]  453 	dec	a
      0001EC 26 FB            [ 1]  454 	jrne	00290$
      0001EE                        455 00291$:
                                    456 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 279: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      0001EE 7B 01            [ 1]  457 	ld	a, (0x01, sp)
      0001F0 43               [ 1]  458 	cpl	a
      0001F1 6B 02            [ 1]  459 	ld	(0x02, sp), a
                                    460 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 269: if (((uint8_t)CLK_Peripheral & (uint8_t)0x10) == 0x00)
      0001F3 7B 03            [ 1]  461 	ld	a, (0x03, sp)
      0001F5 A5 10            [ 1]  462 	bcp	a, #0x10
      0001F7 26 15            [ 1]  463 	jrne	00108$
                                    464 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 274: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0001F9 C6 50 C7         [ 1]  465 	ld	a, 0x50c7
                                    466 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 271: if (NewState != DISABLE)
      0001FC 0D 06            [ 1]  467 	tnz	(0x06, sp)
      0001FE 27 07            [ 1]  468 	jreq	00102$
                                    469 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 274: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      000200 1A 01            [ 1]  470 	or	a, (0x01, sp)
      000202 C7 50 C7         [ 1]  471 	ld	0x50c7, a
      000205 20 1A            [ 2]  472 	jra	00110$
      000207                        473 00102$:
                                    474 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 279: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      000207 14 02            [ 1]  475 	and	a, (0x02, sp)
      000209 C7 50 C7         [ 1]  476 	ld	0x50c7, a
      00020C 20 13            [ 2]  477 	jra	00110$
      00020E                        478 00108$:
                                    479 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 287: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      00020E C6 50 CA         [ 1]  480 	ld	a, 0x50ca
                                    481 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 284: if (NewState != DISABLE)
      000211 0D 06            [ 1]  482 	tnz	(0x06, sp)
      000213 27 07            [ 1]  483 	jreq	00105$
                                    484 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 287: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      000215 1A 01            [ 1]  485 	or	a, (0x01, sp)
      000217 C7 50 CA         [ 1]  486 	ld	0x50ca, a
      00021A 20 05            [ 2]  487 	jra	00110$
      00021C                        488 00105$:
                                    489 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 292: CLK->PCKENR2 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      00021C 14 02            [ 1]  490 	and	a, (0x02, sp)
      00021E C7 50 CA         [ 1]  491 	ld	0x50ca, a
      000221                        492 00110$:
                                    493 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 295: }
      000221 5B 03            [ 2]  494 	addw	sp, #3
      000223 85               [ 2]  495 	popw	x
      000224 84               [ 1]  496 	pop	a
      000225 FC               [ 2]  497 	jp	(x)
                                    498 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 309: ErrorStatus CLK_ClockSwitchConfig(CLK_SwitchMode_TypeDef CLK_SwitchMode, CLK_Source_TypeDef CLK_NewClock, FunctionalState ITState, CLK_CurrentClockState_TypeDef CLK_CurrentClockState)
                                    499 ;	-----------------------------------------
                                    500 ;	 function CLK_ClockSwitchConfig
                                    501 ;	-----------------------------------------
      000226                        502 _CLK_ClockSwitchConfig:
      000226 88               [ 1]  503 	push	a
      000227 6B 01            [ 1]  504 	ld	(0x01, sp), a
                                    505 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 316: assert_param(IS_CLK_SOURCE_OK(CLK_NewClock));
      000229 7B 04            [ 1]  506 	ld	a, (0x04, sp)
      00022B A1 E1            [ 1]  507 	cp	a, #0xe1
      00022D 27 18            [ 1]  508 	jreq	00140$
      00022F 7B 04            [ 1]  509 	ld	a, (0x04, sp)
      000231 A1 D2            [ 1]  510 	cp	a, #0xd2
      000233 27 12            [ 1]  511 	jreq	00140$
      000235 7B 04            [ 1]  512 	ld	a, (0x04, sp)
      000237 A1 B4            [ 1]  513 	cp	a, #0xb4
      000239 27 0C            [ 1]  514 	jreq	00140$
      00023B 4B 3C            [ 1]  515 	push	#0x3c
      00023D 4B 01            [ 1]  516 	push	#0x01
      00023F 5F               [ 1]  517 	clrw	x
      000240 89               [ 2]  518 	pushw	x
      000241 AEr00r0C         [ 2]  519 	ldw	x, #(___str_0+0)
      000244 CDr00r00         [ 4]  520 	call	_assert_failed
      000247                        521 00140$:
                                    522 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 317: assert_param(IS_CLK_SWITCHMODE_OK(CLK_SwitchMode));
      000247 0D 01            [ 1]  523 	tnz	(0x01, sp)
      000249 27 10            [ 1]  524 	jreq	00148$
      00024B 0D 01            [ 1]  525 	tnz	(0x01, sp)
      00024D 26 0C            [ 1]  526 	jrne	00148$
      00024F 4B 3D            [ 1]  527 	push	#0x3d
      000251 4B 01            [ 1]  528 	push	#0x01
      000253 5F               [ 1]  529 	clrw	x
      000254 89               [ 2]  530 	pushw	x
      000255 AEr00r0C         [ 2]  531 	ldw	x, #(___str_0+0)
      000258 CDr00r00         [ 4]  532 	call	_assert_failed
      00025B                        533 00148$:
                                    534 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 318: assert_param(IS_FUNCTIONALSTATE_OK(ITState));
      00025B 0D 05            [ 1]  535 	tnz	(0x05, sp)
      00025D 27 10            [ 1]  536 	jreq	00153$
      00025F 0D 05            [ 1]  537 	tnz	(0x05, sp)
      000261 26 0C            [ 1]  538 	jrne	00153$
      000263 4B 3E            [ 1]  539 	push	#0x3e
      000265 4B 01            [ 1]  540 	push	#0x01
      000267 5F               [ 1]  541 	clrw	x
      000268 89               [ 2]  542 	pushw	x
      000269 AEr00r0C         [ 2]  543 	ldw	x, #(___str_0+0)
      00026C CDr00r00         [ 4]  544 	call	_assert_failed
      00026F                        545 00153$:
                                    546 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 319: assert_param(IS_CLK_CURRENTCLOCKSTATE_OK(CLK_CurrentClockState));
      00026F 0D 06            [ 1]  547 	tnz	(0x06, sp)
      000271 27 10            [ 1]  548 	jreq	00158$
      000273 0D 06            [ 1]  549 	tnz	(0x06, sp)
      000275 26 0C            [ 1]  550 	jrne	00158$
      000277 4B 3F            [ 1]  551 	push	#0x3f
      000279 4B 01            [ 1]  552 	push	#0x01
      00027B 5F               [ 1]  553 	clrw	x
      00027C 89               [ 2]  554 	pushw	x
      00027D AEr00r0C         [ 2]  555 	ldw	x, #(___str_0+0)
      000280 CDr00r00         [ 4]  556 	call	_assert_failed
      000283                        557 00158$:
                                    558 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 322: clock_master = (CLK_Source_TypeDef)CLK->CMSR;
      000283 C6 50 C3         [ 1]  559 	ld	a, 0x50c3
      000286 90 97            [ 1]  560 	ld	yl, a
                                    561 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 328: CLK->SWCR |= CLK_SWCR_SWEN;
      000288 C6 50 C5         [ 1]  562 	ld	a, 0x50c5
                                    563 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 325: if (CLK_SwitchMode == CLK_SWITCHMODE_AUTO)
      00028B 0D 01            [ 1]  564 	tnz	(0x01, sp)
      00028D 27 36            [ 1]  565 	jreq	00122$
                                    566 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 328: CLK->SWCR |= CLK_SWCR_SWEN;
      00028F AA 02            [ 1]  567 	or	a, #0x02
      000291 C7 50 C5         [ 1]  568 	ld	0x50c5, a
      000294 C6 50 C5         [ 1]  569 	ld	a, 0x50c5
                                    570 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 331: if (ITState != DISABLE)
      000297 0D 05            [ 1]  571 	tnz	(0x05, sp)
      000299 27 07            [ 1]  572 	jreq	00102$
                                    573 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 333: CLK->SWCR |= CLK_SWCR_SWIEN;
      00029B AA 04            [ 1]  574 	or	a, #0x04
      00029D C7 50 C5         [ 1]  575 	ld	0x50c5, a
      0002A0 20 05            [ 2]  576 	jra	00103$
      0002A2                        577 00102$:
                                    578 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 337: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIEN);
      0002A2 A4 FB            [ 1]  579 	and	a, #0xfb
      0002A4 C7 50 C5         [ 1]  580 	ld	0x50c5, a
      0002A7                        581 00103$:
                                    582 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 341: CLK->SWR = (uint8_t)CLK_NewClock;
      0002A7 AE 50 C4         [ 2]  583 	ldw	x, #0x50c4
      0002AA 7B 04            [ 1]  584 	ld	a, (0x04, sp)
      0002AC F7               [ 1]  585 	ld	(x), a
                                    586 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 344: while((((CLK->SWCR & CLK_SWCR_SWBSY) != 0 )&& (DownCounter != 0)))
      0002AD 5F               [ 1]  587 	clrw	x
      0002AE 5A               [ 2]  588 	decw	x
      0002AF                        589 00105$:
      0002AF 72 01 50 C5 06   [ 2]  590 	btjf	0x50c5, #0, 00107$
      0002B4 5D               [ 2]  591 	tnzw	x
      0002B5 27 03            [ 1]  592 	jreq	00107$
                                    593 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 346: DownCounter--;
      0002B7 5A               [ 2]  594 	decw	x
      0002B8 20 F5            [ 2]  595 	jra	00105$
      0002BA                        596 00107$:
                                    597 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 349: if(DownCounter != 0)
      0002BA 5D               [ 2]  598 	tnzw	x
      0002BB 27 05            [ 1]  599 	jreq	00109$
                                    600 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 351: Swif = SUCCESS;
      0002BD A6 01            [ 1]  601 	ld	a, #0x01
      0002BF 97               [ 1]  602 	ld	xl, a
      0002C0 20 32            [ 2]  603 	jra	00123$
      0002C2                        604 00109$:
                                    605 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 355: Swif = ERROR;
      0002C2 5F               [ 1]  606 	clrw	x
      0002C3 20 2F            [ 2]  607 	jra	00123$
      0002C5                        608 00122$:
                                    609 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 361: if (ITState != DISABLE)
      0002C5 0D 05            [ 1]  610 	tnz	(0x05, sp)
      0002C7 27 07            [ 1]  611 	jreq	00112$
                                    612 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 363: CLK->SWCR |= CLK_SWCR_SWIEN;
      0002C9 AA 04            [ 1]  613 	or	a, #0x04
      0002CB C7 50 C5         [ 1]  614 	ld	0x50c5, a
      0002CE 20 05            [ 2]  615 	jra	00113$
      0002D0                        616 00112$:
                                    617 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 367: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIEN);
      0002D0 A4 FB            [ 1]  618 	and	a, #0xfb
      0002D2 C7 50 C5         [ 1]  619 	ld	0x50c5, a
      0002D5                        620 00113$:
                                    621 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 371: CLK->SWR = (uint8_t)CLK_NewClock;
      0002D5 AE 50 C4         [ 2]  622 	ldw	x, #0x50c4
      0002D8 7B 04            [ 1]  623 	ld	a, (0x04, sp)
      0002DA F7               [ 1]  624 	ld	(x), a
                                    625 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 374: while((((CLK->SWCR & CLK_SWCR_SWIF) != 0 ) && (DownCounter != 0)))
      0002DB 5F               [ 1]  626 	clrw	x
      0002DC 5A               [ 2]  627 	decw	x
      0002DD                        628 00115$:
      0002DD 72 07 50 C5 06   [ 2]  629 	btjf	0x50c5, #3, 00117$
      0002E2 5D               [ 2]  630 	tnzw	x
      0002E3 27 03            [ 1]  631 	jreq	00117$
                                    632 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 376: DownCounter--;
      0002E5 5A               [ 2]  633 	decw	x
      0002E6 20 F5            [ 2]  634 	jra	00115$
      0002E8                        635 00117$:
                                    636 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 379: if(DownCounter != 0)
      0002E8 5D               [ 2]  637 	tnzw	x
      0002E9 27 08            [ 1]  638 	jreq	00119$
                                    639 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 382: CLK->SWCR |= CLK_SWCR_SWEN;
      0002EB 72 12 50 C5      [ 1]  640 	bset	0x50c5, #1
                                    641 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 383: Swif = SUCCESS;
      0002EF A6 01            [ 1]  642 	ld	a, #0x01
      0002F1 97               [ 1]  643 	ld	xl, a
                                    644 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 387: Swif = ERROR;
      0002F2 21                     645 	.byte 0x21
      0002F3                        646 00119$:
      0002F3 5F               [ 1]  647 	clrw	x
      0002F4                        648 00123$:
                                    649 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 390: if(Swif != ERROR)
      0002F4 9F               [ 1]  650 	ld	a, xl
      0002F5 4D               [ 1]  651 	tnz	a
      0002F6 27 2E            [ 1]  652 	jreq	00136$
                                    653 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 393: if((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_HSI))
      0002F8 0D 06            [ 1]  654 	tnz	(0x06, sp)
      0002FA 26 0C            [ 1]  655 	jrne	00132$
      0002FC 90 9F            [ 1]  656 	ld	a, yl
      0002FE A1 E1            [ 1]  657 	cp	a, #0xe1
      000300 26 06            [ 1]  658 	jrne	00132$
                                    659 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 395: CLK->ICKR &= (uint8_t)(~CLK_ICKR_HSIEN);
      000302 72 11 50 C0      [ 1]  660 	bres	0x50c0, #0
      000306 20 1E            [ 2]  661 	jra	00136$
      000308                        662 00132$:
                                    663 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 397: else if((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_LSI))
      000308 0D 06            [ 1]  664 	tnz	(0x06, sp)
      00030A 26 0C            [ 1]  665 	jrne	00128$
      00030C 90 9F            [ 1]  666 	ld	a, yl
      00030E A1 D2            [ 1]  667 	cp	a, #0xd2
      000310 26 06            [ 1]  668 	jrne	00128$
                                    669 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 399: CLK->ICKR &= (uint8_t)(~CLK_ICKR_LSIEN);
      000312 72 17 50 C0      [ 1]  670 	bres	0x50c0, #3
      000316 20 0E            [ 2]  671 	jra	00136$
      000318                        672 00128$:
                                    673 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 401: else if ((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_HSE))
      000318 0D 06            [ 1]  674 	tnz	(0x06, sp)
      00031A 26 0A            [ 1]  675 	jrne	00136$
      00031C 90 9F            [ 1]  676 	ld	a, yl
      00031E A1 B4            [ 1]  677 	cp	a, #0xb4
      000320 26 04            [ 1]  678 	jrne	00136$
                                    679 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 403: CLK->ECKR &= (uint8_t)(~CLK_ECKR_HSEEN);
      000322 72 11 50 C1      [ 1]  680 	bres	0x50c1, #0
      000326                        681 00136$:
                                    682 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 406: return(Swif);
      000326 9F               [ 1]  683 	ld	a, xl
                                    684 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 407: }
      000327 1E 02            [ 2]  685 	ldw	x, (2, sp)
      000329 5B 06            [ 2]  686 	addw	sp, #6
      00032B FC               [ 2]  687 	jp	(x)
                                    688 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 415: void CLK_HSIPrescalerConfig(CLK_Prescaler_TypeDef HSIPrescaler)
                                    689 ;	-----------------------------------------
                                    690 ;	 function CLK_HSIPrescalerConfig
                                    691 ;	-----------------------------------------
      00032C                        692 _CLK_HSIPrescalerConfig:
      00032C 88               [ 1]  693 	push	a
                                    694 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 418: assert_param(IS_CLK_HSIPRESCALER_OK(HSIPrescaler));
      00032D 6B 01            [ 1]  695 	ld	(0x01, sp), a
      00032F 27 1E            [ 1]  696 	jreq	00104$
      000331 7B 01            [ 1]  697 	ld	a, (0x01, sp)
      000333 A1 08            [ 1]  698 	cp	a, #0x08
      000335 27 18            [ 1]  699 	jreq	00104$
      000337 7B 01            [ 1]  700 	ld	a, (0x01, sp)
      000339 A1 10            [ 1]  701 	cp	a, #0x10
      00033B 27 12            [ 1]  702 	jreq	00104$
      00033D 7B 01            [ 1]  703 	ld	a, (0x01, sp)
      00033F A1 18            [ 1]  704 	cp	a, #0x18
      000341 27 0C            [ 1]  705 	jreq	00104$
      000343 4B A2            [ 1]  706 	push	#0xa2
      000345 4B 01            [ 1]  707 	push	#0x01
      000347 5F               [ 1]  708 	clrw	x
      000348 89               [ 2]  709 	pushw	x
      000349 AEr00r0C         [ 2]  710 	ldw	x, #(___str_0+0)
      00034C CDr00r00         [ 4]  711 	call	_assert_failed
      00034F                        712 00104$:
                                    713 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 421: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      00034F C6 50 C6         [ 1]  714 	ld	a, 0x50c6
      000352 A4 E7            [ 1]  715 	and	a, #0xe7
      000354 C7 50 C6         [ 1]  716 	ld	0x50c6, a
                                    717 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 424: CLK->CKDIVR |= (uint8_t)HSIPrescaler;
      000357 C6 50 C6         [ 1]  718 	ld	a, 0x50c6
      00035A 1A 01            [ 1]  719 	or	a, (0x01, sp)
      00035C C7 50 C6         [ 1]  720 	ld	0x50c6, a
                                    721 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 425: }
      00035F 84               [ 1]  722 	pop	a
      000360 81               [ 4]  723 	ret
                                    724 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 436: void CLK_CCOConfig(CLK_Output_TypeDef CLK_CCO)
                                    725 ;	-----------------------------------------
                                    726 ;	 function CLK_CCOConfig
                                    727 ;	-----------------------------------------
      000361                        728 _CLK_CCOConfig:
      000361 88               [ 1]  729 	push	a
                                    730 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 439: assert_param(IS_CLK_OUTPUT_OK(CLK_CCO));
      000362 4D               [ 1]  731 	tnz	a
      000363 27 3E            [ 1]  732 	jreq	00104$
      000365 A1 04            [ 1]  733 	cp	a, #0x04
      000367 27 3A            [ 1]  734 	jreq	00104$
      000369 A1 02            [ 1]  735 	cp	a, #0x02
      00036B 27 36            [ 1]  736 	jreq	00104$
      00036D A1 08            [ 1]  737 	cp	a, #0x08
      00036F 27 32            [ 1]  738 	jreq	00104$
      000371 A1 0A            [ 1]  739 	cp	a, #0x0a
      000373 27 2E            [ 1]  740 	jreq	00104$
      000375 A1 0C            [ 1]  741 	cp	a, #0x0c
      000377 27 2A            [ 1]  742 	jreq	00104$
      000379 A1 0E            [ 1]  743 	cp	a, #0x0e
      00037B 27 26            [ 1]  744 	jreq	00104$
      00037D A1 10            [ 1]  745 	cp	a, #0x10
      00037F 27 22            [ 1]  746 	jreq	00104$
      000381 A1 12            [ 1]  747 	cp	a, #0x12
      000383 27 1E            [ 1]  748 	jreq	00104$
      000385 A1 14            [ 1]  749 	cp	a, #0x14
      000387 27 1A            [ 1]  750 	jreq	00104$
      000389 A1 16            [ 1]  751 	cp	a, #0x16
      00038B 27 16            [ 1]  752 	jreq	00104$
      00038D A1 18            [ 1]  753 	cp	a, #0x18
      00038F 27 12            [ 1]  754 	jreq	00104$
      000391 A1 1A            [ 1]  755 	cp	a, #0x1a
      000393 27 0E            [ 1]  756 	jreq	00104$
      000395 88               [ 1]  757 	push	a
      000396 4B B7            [ 1]  758 	push	#0xb7
      000398 4B 01            [ 1]  759 	push	#0x01
      00039A 5F               [ 1]  760 	clrw	x
      00039B 89               [ 2]  761 	pushw	x
      00039C AEr00r0C         [ 2]  762 	ldw	x, #(___str_0+0)
      00039F CDr00r00         [ 4]  763 	call	_assert_failed
      0003A2 84               [ 1]  764 	pop	a
      0003A3                        765 00104$:
                                    766 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 442: CLK->CCOR &= (uint8_t)(~CLK_CCOR_CCOSEL);
      0003A3 AE 50 C9         [ 2]  767 	ldw	x, #0x50c9
      0003A6 88               [ 1]  768 	push	a
      0003A7 F6               [ 1]  769 	ld	a, (x)
      0003A8 A4 E1            [ 1]  770 	and	a, #0xe1
      0003AA 6B 02            [ 1]  771 	ld	(0x02, sp), a
      0003AC 84               [ 1]  772 	pop	a
      0003AD AE 50 C9         [ 2]  773 	ldw	x, #0x50c9
      0003B0 88               [ 1]  774 	push	a
      0003B1 7B 02            [ 1]  775 	ld	a, (0x02, sp)
      0003B3 F7               [ 1]  776 	ld	(x), a
      0003B4 84               [ 1]  777 	pop	a
                                    778 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 445: CLK->CCOR |= (uint8_t)CLK_CCO;
      0003B5 AE 50 C9         [ 2]  779 	ldw	x, #0x50c9
      0003B8 88               [ 1]  780 	push	a
      0003B9 F6               [ 1]  781 	ld	a, (x)
      0003BA 6B 02            [ 1]  782 	ld	(0x02, sp), a
      0003BC 84               [ 1]  783 	pop	a
      0003BD 1A 01            [ 1]  784 	or	a, (0x01, sp)
      0003BF C7 50 C9         [ 1]  785 	ld	0x50c9, a
                                    786 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 448: CLK->CCOR |= CLK_CCOR_CCOEN;
      0003C2 72 10 50 C9      [ 1]  787 	bset	0x50c9, #0
                                    788 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 449: }
      0003C6 84               [ 1]  789 	pop	a
      0003C7 81               [ 4]  790 	ret
                                    791 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 459: void CLK_ITConfig(CLK_IT_TypeDef CLK_IT, FunctionalState NewState)
                                    792 ;	-----------------------------------------
                                    793 ;	 function CLK_ITConfig
                                    794 ;	-----------------------------------------
      0003C8                        795 _CLK_ITConfig:
                                    796 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 462: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0003C8 0D 03            [ 1]  797 	tnz	(0x03, sp)
      0003CA 27 12            [ 1]  798 	jreq	00115$
      0003CC 0D 03            [ 1]  799 	tnz	(0x03, sp)
      0003CE 26 0E            [ 1]  800 	jrne	00115$
      0003D0 88               [ 1]  801 	push	a
      0003D1 4B CE            [ 1]  802 	push	#0xce
      0003D3 4B 01            [ 1]  803 	push	#0x01
      0003D5 5F               [ 1]  804 	clrw	x
      0003D6 89               [ 2]  805 	pushw	x
      0003D7 AEr00r0C         [ 2]  806 	ldw	x, #(___str_0+0)
      0003DA CDr00r00         [ 4]  807 	call	_assert_failed
      0003DD 84               [ 1]  808 	pop	a
      0003DE                        809 00115$:
                                    810 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 463: assert_param(IS_CLK_IT_OK(CLK_IT));
      0003DE A1 0C            [ 1]  811 	cp	a, #0x0c
      0003E0 26 06            [ 1]  812 	jrne	00172$
      0003E2 41               [ 1]  813 	exg	a, xl
      0003E3 A6 01            [ 1]  814 	ld	a, #0x01
      0003E5 41               [ 1]  815 	exg	a, xl
      0003E6 20 03            [ 2]  816 	jra	00173$
      0003E8                        817 00172$:
      0003E8 41               [ 1]  818 	exg	a, xl
      0003E9 4F               [ 1]  819 	clr	a
      0003EA 41               [ 1]  820 	exg	a, xl
      0003EB                        821 00173$:
      0003EB A0 1C            [ 1]  822 	sub	a, #0x1c
      0003ED 26 04            [ 1]  823 	jrne	00175$
      0003EF 4C               [ 1]  824 	inc	a
      0003F0 95               [ 1]  825 	ld	xh, a
      0003F1 20 02            [ 2]  826 	jra	00176$
      0003F3                        827 00175$:
      0003F3 4F               [ 1]  828 	clr	a
      0003F4 95               [ 1]  829 	ld	xh, a
      0003F5                        830 00176$:
      0003F5 9F               [ 1]  831 	ld	a, xl
      0003F6 4D               [ 1]  832 	tnz	a
      0003F7 26 14            [ 1]  833 	jrne	00120$
      0003F9 9E               [ 1]  834 	ld	a, xh
      0003FA 4D               [ 1]  835 	tnz	a
      0003FB 26 10            [ 1]  836 	jrne	00120$
      0003FD 89               [ 2]  837 	pushw	x
      0003FE 4B CF            [ 1]  838 	push	#0xcf
      000400 4B 01            [ 1]  839 	push	#0x01
      000402 4B 00            [ 1]  840 	push	#0x00
      000404 4B 00            [ 1]  841 	push	#0x00
      000406 AEr00r0C         [ 2]  842 	ldw	x, #(___str_0+0)
      000409 CDr00r00         [ 4]  843 	call	_assert_failed
      00040C 85               [ 2]  844 	popw	x
      00040D                        845 00120$:
                                    846 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 465: if (NewState != DISABLE)
      00040D 0D 03            [ 1]  847 	tnz	(0x03, sp)
      00040F 27 1C            [ 1]  848 	jreq	00110$
                                    849 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 467: switch (CLK_IT)
      000411 9F               [ 1]  850 	ld	a, xl
      000412 4D               [ 1]  851 	tnz	a
      000413 26 0E            [ 1]  852 	jrne	00102$
      000415 9E               [ 1]  853 	ld	a, xh
      000416 4D               [ 1]  854 	tnz	a
      000417 27 2E            [ 1]  855 	jreq	00112$
                                    856 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 470: CLK->SWCR |= CLK_SWCR_SWIEN;
      000419 C6 50 C5         [ 1]  857 	ld	a, 0x50c5
      00041C AA 04            [ 1]  858 	or	a, #0x04
      00041E C7 50 C5         [ 1]  859 	ld	0x50c5, a
                                    860 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 471: break;
      000421 20 24            [ 2]  861 	jra	00112$
                                    862 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 472: case CLK_IT_CSSD: /* Enable the clock security system detection interrupt */
      000423                        863 00102$:
                                    864 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 473: CLK->CSSR |= CLK_CSSR_CSSDIE;
      000423 C6 50 C8         [ 1]  865 	ld	a, 0x50c8
      000426 AA 04            [ 1]  866 	or	a, #0x04
      000428 C7 50 C8         [ 1]  867 	ld	0x50c8, a
                                    868 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 474: break;
      00042B 20 1A            [ 2]  869 	jra	00112$
                                    870 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 477: }
      00042D                        871 00110$:
                                    872 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 481: switch (CLK_IT)
      00042D 9F               [ 1]  873 	ld	a, xl
      00042E 4D               [ 1]  874 	tnz	a
      00042F 26 0E            [ 1]  875 	jrne	00106$
      000431 9E               [ 1]  876 	ld	a, xh
      000432 4D               [ 1]  877 	tnz	a
      000433 27 12            [ 1]  878 	jreq	00112$
                                    879 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 484: CLK->SWCR  &= (uint8_t)(~CLK_SWCR_SWIEN);
      000435 C6 50 C5         [ 1]  880 	ld	a, 0x50c5
      000438 A4 FB            [ 1]  881 	and	a, #0xfb
      00043A C7 50 C5         [ 1]  882 	ld	0x50c5, a
                                    883 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 485: break;
      00043D 20 08            [ 2]  884 	jra	00112$
                                    885 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 486: case CLK_IT_CSSD: /* Disable the clock security system detection interrupt */
      00043F                        886 00106$:
                                    887 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 487: CLK->CSSR &= (uint8_t)(~CLK_CSSR_CSSDIE);
      00043F C6 50 C8         [ 1]  888 	ld	a, 0x50c8
      000442 A4 FB            [ 1]  889 	and	a, #0xfb
      000444 C7 50 C8         [ 1]  890 	ld	0x50c8, a
                                    891 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 491: }
      000447                        892 00112$:
                                    893 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 493: }
      000447 85               [ 2]  894 	popw	x
      000448 84               [ 1]  895 	pop	a
      000449 FC               [ 2]  896 	jp	(x)
                                    897 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 500: void CLK_SYSCLKConfig(CLK_Prescaler_TypeDef CLK_Prescaler)
                                    898 ;	-----------------------------------------
                                    899 ;	 function CLK_SYSCLKConfig
                                    900 ;	-----------------------------------------
      00044A                        901 _CLK_SYSCLKConfig:
      00044A 88               [ 1]  902 	push	a
                                    903 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 503: assert_param(IS_CLK_PRESCALER_OK(CLK_Prescaler));
      00044B 95               [ 1]  904 	ld	xh, a
      00044C 4D               [ 1]  905 	tnz	a
      00044D 27 4A            [ 1]  906 	jreq	00107$
      00044F 9E               [ 1]  907 	ld	a, xh
      000450 A1 08            [ 1]  908 	cp	a, #0x08
      000452 27 45            [ 1]  909 	jreq	00107$
      000454 9E               [ 1]  910 	ld	a, xh
      000455 A1 10            [ 1]  911 	cp	a, #0x10
      000457 27 40            [ 1]  912 	jreq	00107$
      000459 9E               [ 1]  913 	ld	a, xh
      00045A A1 18            [ 1]  914 	cp	a, #0x18
      00045C 27 3B            [ 1]  915 	jreq	00107$
      00045E 9E               [ 1]  916 	ld	a, xh
      00045F A1 80            [ 1]  917 	cp	a, #0x80
      000461 27 36            [ 1]  918 	jreq	00107$
      000463 9E               [ 1]  919 	ld	a, xh
      000464 A1 81            [ 1]  920 	cp	a, #0x81
      000466 27 31            [ 1]  921 	jreq	00107$
      000468 9E               [ 1]  922 	ld	a, xh
      000469 A1 82            [ 1]  923 	cp	a, #0x82
      00046B 27 2C            [ 1]  924 	jreq	00107$
      00046D 9E               [ 1]  925 	ld	a, xh
      00046E A1 83            [ 1]  926 	cp	a, #0x83
      000470 27 27            [ 1]  927 	jreq	00107$
      000472 9E               [ 1]  928 	ld	a, xh
      000473 A1 84            [ 1]  929 	cp	a, #0x84
      000475 27 22            [ 1]  930 	jreq	00107$
      000477 9E               [ 1]  931 	ld	a, xh
      000478 A1 85            [ 1]  932 	cp	a, #0x85
      00047A 27 1D            [ 1]  933 	jreq	00107$
      00047C 9E               [ 1]  934 	ld	a, xh
      00047D A1 86            [ 1]  935 	cp	a, #0x86
      00047F 27 18            [ 1]  936 	jreq	00107$
      000481 9E               [ 1]  937 	ld	a, xh
      000482 A1 87            [ 1]  938 	cp	a, #0x87
      000484 27 13            [ 1]  939 	jreq	00107$
      000486 89               [ 2]  940 	pushw	x
      000487 4B F7            [ 1]  941 	push	#0xf7
      000489 4B 01            [ 1]  942 	push	#0x01
      00048B 4B 00            [ 1]  943 	push	#0x00
      00048D 4B 00            [ 1]  944 	push	#0x00
      00048F AEr00r0C         [ 2]  945 	ldw	x, #(___str_0+0)
      000492 CDr00r00         [ 4]  946 	call	_assert_failed
      000495 02               [ 1]  947 	rlwa	x
      000496 84               [ 1]  948 	pop	a
      000497 01               [ 1]  949 	rrwa	x
      000498 84               [ 1]  950 	pop	a
      000499                        951 00107$:
                                    952 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 507: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      000499 C6 50 C6         [ 1]  953 	ld	a, 0x50c6
                                    954 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 505: if (((uint8_t)CLK_Prescaler & (uint8_t)0x80) == 0x00) /* Bit7 = 0 means HSI divider */
      00049C 5D               [ 2]  955 	tnzw	x
      00049D 2B 14            [ 1]  956 	jrmi	00102$
                                    957 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 507: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      00049F A4 E7            [ 1]  958 	and	a, #0xe7
      0004A1 C7 50 C6         [ 1]  959 	ld	0x50c6, a
                                    960 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 508: CLK->CKDIVR |= (uint8_t)((uint8_t)CLK_Prescaler & (uint8_t)CLK_CKDIVR_HSIDIV);
      0004A4 C6 50 C6         [ 1]  961 	ld	a, 0x50c6
      0004A7 6B 01            [ 1]  962 	ld	(0x01, sp), a
      0004A9 9E               [ 1]  963 	ld	a, xh
      0004AA A4 18            [ 1]  964 	and	a, #0x18
      0004AC 1A 01            [ 1]  965 	or	a, (0x01, sp)
      0004AE C7 50 C6         [ 1]  966 	ld	0x50c6, a
      0004B1 20 12            [ 2]  967 	jra	00104$
      0004B3                        968 00102$:
                                    969 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 512: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_CPUDIV);
      0004B3 A4 F8            [ 1]  970 	and	a, #0xf8
      0004B5 C7 50 C6         [ 1]  971 	ld	0x50c6, a
                                    972 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 513: CLK->CKDIVR |= (uint8_t)((uint8_t)CLK_Prescaler & (uint8_t)CLK_CKDIVR_CPUDIV);
      0004B8 C6 50 C6         [ 1]  973 	ld	a, 0x50c6
      0004BB 6B 01            [ 1]  974 	ld	(0x01, sp), a
      0004BD 9E               [ 1]  975 	ld	a, xh
      0004BE A4 07            [ 1]  976 	and	a, #0x07
      0004C0 1A 01            [ 1]  977 	or	a, (0x01, sp)
      0004C2 C7 50 C6         [ 1]  978 	ld	0x50c6, a
      0004C5                        979 00104$:
                                    980 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 515: }
      0004C5 84               [ 1]  981 	pop	a
      0004C6 81               [ 4]  982 	ret
                                    983 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 523: void CLK_SWIMConfig(CLK_SWIMDivider_TypeDef CLK_SWIMDivider)
                                    984 ;	-----------------------------------------
                                    985 ;	 function CLK_SWIMConfig
                                    986 ;	-----------------------------------------
      0004C7                        987 _CLK_SWIMConfig:
      0004C7 88               [ 1]  988 	push	a
                                    989 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 526: assert_param(IS_CLK_SWIMDIVIDER_OK(CLK_SWIMDivider));
      0004C8 6B 01            [ 1]  990 	ld	(0x01, sp), a
      0004CA 27 10            [ 1]  991 	jreq	00107$
      0004CC 0D 01            [ 1]  992 	tnz	(0x01, sp)
      0004CE 26 0C            [ 1]  993 	jrne	00107$
      0004D0 4B 0E            [ 1]  994 	push	#0x0e
      0004D2 4B 02            [ 1]  995 	push	#0x02
      0004D4 5F               [ 1]  996 	clrw	x
      0004D5 89               [ 2]  997 	pushw	x
      0004D6 AEr00r0C         [ 2]  998 	ldw	x, #(___str_0+0)
      0004D9 CDr00r00         [ 4]  999 	call	_assert_failed
      0004DC                       1000 00107$:
                                   1001 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 531: CLK->SWIMCCR |= CLK_SWIMCCR_SWIMDIV;
      0004DC C6 50 CD         [ 1] 1002 	ld	a, 0x50cd
                                   1003 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 528: if (CLK_SWIMDivider != CLK_SWIMDIVIDER_2)
      0004DF 0D 01            [ 1] 1004 	tnz	(0x01, sp)
      0004E1 27 07            [ 1] 1005 	jreq	00102$
                                   1006 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 531: CLK->SWIMCCR |= CLK_SWIMCCR_SWIMDIV;
      0004E3 AA 01            [ 1] 1007 	or	a, #0x01
      0004E5 C7 50 CD         [ 1] 1008 	ld	0x50cd, a
      0004E8 20 05            [ 2] 1009 	jra	00104$
      0004EA                       1010 00102$:
                                   1011 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 536: CLK->SWIMCCR &= (uint8_t)(~CLK_SWIMCCR_SWIMDIV);
      0004EA A4 FE            [ 1] 1012 	and	a, #0xfe
      0004EC C7 50 CD         [ 1] 1013 	ld	0x50cd, a
      0004EF                       1014 00104$:
                                   1015 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 538: }
      0004EF 84               [ 1] 1016 	pop	a
      0004F0 81               [ 4] 1017 	ret
                                   1018 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 547: void CLK_ClockSecuritySystemEnable(void)
                                   1019 ;	-----------------------------------------
                                   1020 ;	 function CLK_ClockSecuritySystemEnable
                                   1021 ;	-----------------------------------------
      0004F1                       1022 _CLK_ClockSecuritySystemEnable:
                                   1023 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 550: CLK->CSSR |= CLK_CSSR_CSSEN;
      0004F1 72 10 50 C8      [ 1] 1024 	bset	0x50c8, #0
                                   1025 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 551: }
      0004F5 81               [ 4] 1026 	ret
                                   1027 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 559: CLK_Source_TypeDef CLK_GetSYSCLKSource(void)
                                   1028 ;	-----------------------------------------
                                   1029 ;	 function CLK_GetSYSCLKSource
                                   1030 ;	-----------------------------------------
      0004F6                       1031 _CLK_GetSYSCLKSource:
                                   1032 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 561: return((CLK_Source_TypeDef)CLK->CMSR);
      0004F6 C6 50 C3         [ 1] 1033 	ld	a, 0x50c3
                                   1034 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 562: }
      0004F9 81               [ 4] 1035 	ret
                                   1036 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 569: uint32_t CLK_GetClockFreq(void)
                                   1037 ;	-----------------------------------------
                                   1038 ;	 function CLK_GetClockFreq
                                   1039 ;	-----------------------------------------
      0004FA                       1040 _CLK_GetClockFreq:
      0004FA 52 04            [ 2] 1041 	sub	sp, #4
                                   1042 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 576: clocksource = (CLK_Source_TypeDef)CLK->CMSR;
      0004FC C6 50 C3         [ 1] 1043 	ld	a, 0x50c3
                                   1044 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 578: if (clocksource == CLK_SOURCE_HSI)
      0004FF 6B 04            [ 1] 1045 	ld	(0x04, sp), a
      000501 A1 E1            [ 1] 1046 	cp	a, #0xe1
      000503 26 26            [ 1] 1047 	jrne	00105$
                                   1048 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 580: tmp = (uint8_t)(CLK->CKDIVR & CLK_CKDIVR_HSIDIV);
      000505 C6 50 C6         [ 1] 1049 	ld	a, 0x50c6
      000508 A4 18            [ 1] 1050 	and	a, #0x18
                                   1051 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 581: tmp = (uint8_t)(tmp >> 3);
      00050A 44               [ 1] 1052 	srl	a
      00050B 44               [ 1] 1053 	srl	a
      00050C 44               [ 1] 1054 	srl	a
                                   1055 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 582: presc = HSIDivFactor[tmp];
      00050D 5F               [ 1] 1056 	clrw	x
      00050E 97               [ 1] 1057 	ld	xl, a
      00050F D6u00u00         [ 1] 1058 	ld	a, (_HSIDivFactor+0, x)
                                   1059 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 583: clockfrequency = HSI_VALUE / presc;
      000512 5F               [ 1] 1060 	clrw	x
      000513 97               [ 1] 1061 	ld	xl, a
      000514 90 5F            [ 1] 1062 	clrw	y
      000516 89               [ 2] 1063 	pushw	x
      000517 90 89            [ 2] 1064 	pushw	y
      000519 4B 00            [ 1] 1065 	push	#0x00
      00051B 4B 24            [ 1] 1066 	push	#0x24
      00051D 4B F4            [ 1] 1067 	push	#0xf4
      00051F 4B 00            [ 1] 1068 	push	#0x00
      000521 CDr00r00         [ 4] 1069 	call	__divulong
      000524 5B 08            [ 2] 1070 	addw	sp, #8
      000526 51               [ 1] 1071 	exgw	x, y
      000527 17 03            [ 2] 1072 	ldw	(0x03, sp), y
      000529 20 17            [ 2] 1073 	jra	00106$
      00052B                       1074 00105$:
                                   1075 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 585: else if ( clocksource == CLK_SOURCE_LSI)
      00052B 7B 04            [ 1] 1076 	ld	a, (0x04, sp)
      00052D A1 D2            [ 1] 1077 	cp	a, #0xd2
      00052F 26 09            [ 1] 1078 	jrne	00102$
                                   1079 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 587: clockfrequency = LSI_VALUE;
      000531 AE F4 00         [ 2] 1080 	ldw	x, #0xf400
      000534 1F 03            [ 2] 1081 	ldw	(0x03, sp), x
      000536 5F               [ 1] 1082 	clrw	x
      000537 5C               [ 1] 1083 	incw	x
      000538 20 08            [ 2] 1084 	jra	00106$
      00053A                       1085 00102$:
                                   1086 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 591: clockfrequency = HSE_VALUE;
      00053A AE 1B 00         [ 2] 1087 	ldw	x, #0x1b00
      00053D 1F 03            [ 2] 1088 	ldw	(0x03, sp), x
      00053F AE 00 B7         [ 2] 1089 	ldw	x, #0x00b7
      000542                       1090 00106$:
                                   1091 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 594: return((uint32_t)clockfrequency);
      000542 51               [ 1] 1092 	exgw	x, y
      000543 1E 03            [ 2] 1093 	ldw	x, (0x03, sp)
                                   1094 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 595: }
      000545 5B 04            [ 2] 1095 	addw	sp, #4
      000547 81               [ 4] 1096 	ret
                                   1097 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 604: void CLK_AdjustHSICalibrationValue(CLK_HSITrimValue_TypeDef CLK_HSICalibrationValue)
                                   1098 ;	-----------------------------------------
                                   1099 ;	 function CLK_AdjustHSICalibrationValue
                                   1100 ;	-----------------------------------------
      000548                       1101 _CLK_AdjustHSICalibrationValue:
      000548 88               [ 1] 1102 	push	a
                                   1103 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 607: assert_param(IS_CLK_HSITRIMVALUE_OK(CLK_HSICalibrationValue));
      000549 4D               [ 1] 1104 	tnz	a
      00054A 27 2A            [ 1] 1105 	jreq	00104$
      00054C A1 01            [ 1] 1106 	cp	a, #0x01
      00054E 27 26            [ 1] 1107 	jreq	00104$
      000550 A1 02            [ 1] 1108 	cp	a, #0x02
      000552 27 22            [ 1] 1109 	jreq	00104$
      000554 A1 03            [ 1] 1110 	cp	a, #0x03
      000556 27 1E            [ 1] 1111 	jreq	00104$
      000558 A1 04            [ 1] 1112 	cp	a, #0x04
      00055A 27 1A            [ 1] 1113 	jreq	00104$
      00055C A1 05            [ 1] 1114 	cp	a, #0x05
      00055E 27 16            [ 1] 1115 	jreq	00104$
      000560 A1 06            [ 1] 1116 	cp	a, #0x06
      000562 27 12            [ 1] 1117 	jreq	00104$
      000564 A1 07            [ 1] 1118 	cp	a, #0x07
      000566 27 0E            [ 1] 1119 	jreq	00104$
      000568 88               [ 1] 1120 	push	a
      000569 4B 5F            [ 1] 1121 	push	#0x5f
      00056B 4B 02            [ 1] 1122 	push	#0x02
      00056D 5F               [ 1] 1123 	clrw	x
      00056E 89               [ 2] 1124 	pushw	x
      00056F AEr00r0C         [ 2] 1125 	ldw	x, #(___str_0+0)
      000572 CDr00r00         [ 4] 1126 	call	_assert_failed
      000575 84               [ 1] 1127 	pop	a
      000576                       1128 00104$:
                                   1129 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 610: CLK->HSITRIMR = (uint8_t)( (uint8_t)(CLK->HSITRIMR & (uint8_t)(~CLK_HSITRIMR_HSITRIM))|((uint8_t)CLK_HSICalibrationValue));
      000576 AE 50 CC         [ 2] 1130 	ldw	x, #0x50cc
      000579 88               [ 1] 1131 	push	a
      00057A F6               [ 1] 1132 	ld	a, (x)
      00057B A4 F8            [ 1] 1133 	and	a, #0xf8
      00057D 6B 02            [ 1] 1134 	ld	(0x02, sp), a
      00057F 84               [ 1] 1135 	pop	a
      000580 1A 01            [ 1] 1136 	or	a, (0x01, sp)
      000582 C7 50 CC         [ 1] 1137 	ld	0x50cc, a
                                   1138 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 611: }
      000585 84               [ 1] 1139 	pop	a
      000586 81               [ 4] 1140 	ret
                                   1141 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 622: void CLK_SYSCLKEmergencyClear(void)
                                   1142 ;	-----------------------------------------
                                   1143 ;	 function CLK_SYSCLKEmergencyClear
                                   1144 ;	-----------------------------------------
      000587                       1145 _CLK_SYSCLKEmergencyClear:
                                   1146 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 624: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWBSY);
      000587 72 11 50 C5      [ 1] 1147 	bres	0x50c5, #0
                                   1148 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 625: }
      00058B 81               [ 4] 1149 	ret
                                   1150 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 634: FlagStatus CLK_GetFlagStatus(CLK_Flag_TypeDef CLK_FLAG)
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function CLK_GetFlagStatus
                                   1153 ;	-----------------------------------------
      00058C                       1154 _CLK_GetFlagStatus:
                                   1155 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 641: assert_param(IS_CLK_FLAG_OK(CLK_FLAG));
      00058C 90 93            [ 1] 1156 	ldw	y, x
      00058E A3 01 10         [ 2] 1157 	cpw	x, #0x0110
      000591 27 3C            [ 1] 1158 	jreq	00119$
      000593 A3 01 02         [ 2] 1159 	cpw	x, #0x0102
      000596 27 37            [ 1] 1160 	jreq	00119$
      000598 A3 02 02         [ 2] 1161 	cpw	x, #0x0202
      00059B 27 32            [ 1] 1162 	jreq	00119$
      00059D A3 03 08         [ 2] 1163 	cpw	x, #0x0308
      0005A0 27 2D            [ 1] 1164 	jreq	00119$
      0005A2 A3 03 01         [ 2] 1165 	cpw	x, #0x0301
      0005A5 27 28            [ 1] 1166 	jreq	00119$
      0005A7 A3 04 08         [ 2] 1167 	cpw	x, #0x0408
      0005AA 27 23            [ 1] 1168 	jreq	00119$
      0005AC A3 04 02         [ 2] 1169 	cpw	x, #0x0402
      0005AF 27 1E            [ 1] 1170 	jreq	00119$
      0005B1 A3 05 04         [ 2] 1171 	cpw	x, #0x0504
      0005B4 27 19            [ 1] 1172 	jreq	00119$
      0005B6 A3 05 02         [ 2] 1173 	cpw	x, #0x0502
      0005B9 27 14            [ 1] 1174 	jreq	00119$
      0005BB 89               [ 2] 1175 	pushw	x
      0005BC 90 89            [ 2] 1176 	pushw	y
      0005BE 4B 81            [ 1] 1177 	push	#0x81
      0005C0 4B 02            [ 1] 1178 	push	#0x02
      0005C2 4B 00            [ 1] 1179 	push	#0x00
      0005C4 4B 00            [ 1] 1180 	push	#0x00
      0005C6 AEr00r0C         [ 2] 1181 	ldw	x, #(___str_0+0)
      0005C9 CDr00r00         [ 4] 1182 	call	_assert_failed
      0005CC 90 85            [ 2] 1183 	popw	y
      0005CE 85               [ 2] 1184 	popw	x
      0005CF                       1185 00119$:
                                   1186 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 644: statusreg = (uint16_t)((uint16_t)CLK_FLAG & (uint16_t)0xFF00);
      0005CF 4F               [ 1] 1187 	clr	a
                                   1188 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 647: if (statusreg == 0x0100) /* The flag to check is in ICKRregister */
      0005D0 97               [ 1] 1189 	ld	xl, a
      0005D1 A3 01 00         [ 2] 1190 	cpw	x, #0x0100
      0005D4 26 05            [ 1] 1191 	jrne	00111$
                                   1192 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 649: tmpreg = CLK->ICKR;
      0005D6 C6 50 C0         [ 1] 1193 	ld	a, 0x50c0
      0005D9 20 21            [ 2] 1194 	jra	00112$
      0005DB                       1195 00111$:
                                   1196 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 651: else if (statusreg == 0x0200) /* The flag to check is in ECKRregister */
      0005DB A3 02 00         [ 2] 1197 	cpw	x, #0x0200
      0005DE 26 05            [ 1] 1198 	jrne	00108$
                                   1199 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 653: tmpreg = CLK->ECKR;
      0005E0 C6 50 C1         [ 1] 1200 	ld	a, 0x50c1
      0005E3 20 17            [ 2] 1201 	jra	00112$
      0005E5                       1202 00108$:
                                   1203 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 655: else if (statusreg == 0x0300) /* The flag to check is in SWIC register */
      0005E5 A3 03 00         [ 2] 1204 	cpw	x, #0x0300
      0005E8 26 05            [ 1] 1205 	jrne	00105$
                                   1206 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 657: tmpreg = CLK->SWCR;
      0005EA C6 50 C5         [ 1] 1207 	ld	a, 0x50c5
      0005ED 20 0D            [ 2] 1208 	jra	00112$
      0005EF                       1209 00105$:
                                   1210 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 659: else if (statusreg == 0x0400) /* The flag to check is in CSS register */
      0005EF A3 04 00         [ 2] 1211 	cpw	x, #0x0400
      0005F2 26 05            [ 1] 1212 	jrne	00102$
                                   1213 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 661: tmpreg = CLK->CSSR;
      0005F4 C6 50 C8         [ 1] 1214 	ld	a, 0x50c8
      0005F7 20 03            [ 2] 1215 	jra	00112$
      0005F9                       1216 00102$:
                                   1217 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 665: tmpreg = CLK->CCOR;
      0005F9 C6 50 C9         [ 1] 1218 	ld	a, 0x50c9
      0005FC                       1219 00112$:
                                   1220 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 668: if ((tmpreg & (uint8_t)CLK_FLAG) != (uint8_t)RESET)
      0005FC 93               [ 1] 1221 	ldw	x, y
      0005FD 89               [ 2] 1222 	pushw	x
      0005FE 14 02            [ 1] 1223 	and	a, (2, sp)
      000600 85               [ 2] 1224 	popw	x
      000601 4D               [ 1] 1225 	tnz	a
      000602 27 03            [ 1] 1226 	jreq	00114$
                                   1227 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 670: bitstatus = SET;
      000604 A6 01            [ 1] 1228 	ld	a, #0x01
      000606 81               [ 4] 1229 	ret
      000607                       1230 00114$:
                                   1231 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 674: bitstatus = RESET;
      000607 4F               [ 1] 1232 	clr	a
                                   1233 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 678: return((FlagStatus)bitstatus);
                                   1234 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 679: }
      000608 81               [ 4] 1235 	ret
                                   1236 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 687: ITStatus CLK_GetITStatus(CLK_IT_TypeDef CLK_IT)
                                   1237 ;	-----------------------------------------
                                   1238 ;	 function CLK_GetITStatus
                                   1239 ;	-----------------------------------------
      000609                       1240 _CLK_GetITStatus:
      000609 88               [ 1] 1241 	push	a
                                   1242 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 692: assert_param(IS_CLK_IT_OK(CLK_IT));
      00060A 6B 01            [ 1] 1243 	ld	(0x01, sp), a
      00060C A0 1C            [ 1] 1244 	sub	a, #0x1c
      00060E 26 02            [ 1] 1245 	jrne	00143$
      000610 4C               [ 1] 1246 	inc	a
      000611 21                    1247 	.byte 0x21
      000612                       1248 00143$:
      000612 4F               [ 1] 1249 	clr	a
      000613                       1250 00144$:
      000613 88               [ 1] 1251 	push	a
      000614 7B 02            [ 1] 1252 	ld	a, (0x02, sp)
      000616 A1 0C            [ 1] 1253 	cp	a, #0x0c
      000618 84               [ 1] 1254 	pop	a
      000619 27 11            [ 1] 1255 	jreq	00113$
      00061B 4D               [ 1] 1256 	tnz	a
      00061C 26 0E            [ 1] 1257 	jrne	00113$
      00061E 88               [ 1] 1258 	push	a
      00061F 4B B4            [ 1] 1259 	push	#0xb4
      000621 4B 02            [ 1] 1260 	push	#0x02
      000623 5F               [ 1] 1261 	clrw	x
      000624 89               [ 2] 1262 	pushw	x
      000625 AEr00r0C         [ 2] 1263 	ldw	x, #(___str_0+0)
      000628 CDr00r00         [ 4] 1264 	call	_assert_failed
      00062B 84               [ 1] 1265 	pop	a
      00062C                       1266 00113$:
                                   1267 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 694: if (CLK_IT == CLK_IT_SWIF)
      00062C 4D               [ 1] 1268 	tnz	a
      00062D 27 0F            [ 1] 1269 	jreq	00108$
                                   1270 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 697: if ((CLK->SWCR & (uint8_t)CLK_IT) == (uint8_t)0x0C)
      00062F C6 50 C5         [ 1] 1271 	ld	a, 0x50c5
      000632 14 01            [ 1] 1272 	and	a, (0x01, sp)
                                   1273 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 699: bitstatus = SET;
      000634 A0 0C            [ 1] 1274 	sub	a, #0x0c
      000636 26 03            [ 1] 1275 	jrne	00102$
      000638 4C               [ 1] 1276 	inc	a
      000639 20 0F            [ 2] 1277 	jra	00109$
      00063B                       1278 00102$:
                                   1279 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 703: bitstatus = RESET;
      00063B 4F               [ 1] 1280 	clr	a
      00063C 20 0C            [ 2] 1281 	jra	00109$
      00063E                       1282 00108$:
                                   1283 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 709: if ((CLK->CSSR & (uint8_t)CLK_IT) == (uint8_t)0x0C)
      00063E C6 50 C8         [ 1] 1284 	ld	a, 0x50c8
      000641 14 01            [ 1] 1285 	and	a, (0x01, sp)
                                   1286 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 711: bitstatus = SET;
      000643 A0 0C            [ 1] 1287 	sub	a, #0x0c
      000645 26 02            [ 1] 1288 	jrne	00105$
      000647 4C               [ 1] 1289 	inc	a
                                   1290 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 715: bitstatus = RESET;
      000648 21                    1291 	.byte 0x21
      000649                       1292 00105$:
      000649 4F               [ 1] 1293 	clr	a
      00064A                       1294 00109$:
                                   1295 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 720: return bitstatus;
                                   1296 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 721: }
      00064A 5B 01            [ 2] 1297 	addw	sp, #1
      00064C 81               [ 4] 1298 	ret
                                   1299 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 729: void CLK_ClearITPendingBit(CLK_IT_TypeDef CLK_IT)
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function CLK_ClearITPendingBit
                                   1302 ;	-----------------------------------------
      00064D                       1303 _CLK_ClearITPendingBit:
                                   1304 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 732: assert_param(IS_CLK_IT_OK(CLK_IT));
      00064D 97               [ 1] 1305 	ld	xl, a
      00064E A0 0C            [ 1] 1306 	sub	a, #0x0c
      000650 26 02            [ 1] 1307 	jrne	00127$
      000652 4C               [ 1] 1308 	inc	a
      000653 21                    1309 	.byte 0x21
      000654                       1310 00127$:
      000654 4F               [ 1] 1311 	clr	a
      000655                       1312 00128$:
      000655 4D               [ 1] 1313 	tnz	a
      000656 26 15            [ 1] 1314 	jrne	00107$
      000658 88               [ 1] 1315 	push	a
      000659 9F               [ 1] 1316 	ld	a, xl
      00065A A1 1C            [ 1] 1317 	cp	a, #0x1c
      00065C 84               [ 1] 1318 	pop	a
      00065D 27 0E            [ 1] 1319 	jreq	00107$
      00065F 88               [ 1] 1320 	push	a
      000660 4B DC            [ 1] 1321 	push	#0xdc
      000662 4B 02            [ 1] 1322 	push	#0x02
      000664 5F               [ 1] 1323 	clrw	x
      000665 89               [ 2] 1324 	pushw	x
      000666 AEr00r0C         [ 2] 1325 	ldw	x, #(___str_0+0)
      000669 CDr00r00         [ 4] 1326 	call	_assert_failed
      00066C 84               [ 1] 1327 	pop	a
      00066D                       1328 00107$:
                                   1329 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 734: if (CLK_IT == (uint8_t)CLK_IT_CSSD)
      00066D 4D               [ 1] 1330 	tnz	a
      00066E 27 05            [ 1] 1331 	jreq	00102$
                                   1332 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 737: CLK->CSSR &= (uint8_t)(~CLK_CSSR_CSSD);
      000670 72 17 50 C8      [ 1] 1333 	bres	0x50c8, #3
      000674 81               [ 4] 1334 	ret
      000675                       1335 00102$:
                                   1336 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 742: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIF);
      000675 72 17 50 C5      [ 1] 1337 	bres	0x50c5, #3
                                   1338 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_clk.c: 745: }
      000679 81               [ 4] 1339 	ret
                                   1340 	.area CODE
                                   1341 	.area CONST
      000000                       1342 _HSIDivFactor:
      000000 01                    1343 	.db #0x01	; 1
      000001 02                    1344 	.db #0x02	; 2
      000002 04                    1345 	.db #0x04	; 4
      000003 08                    1346 	.db #0x08	; 8
      000004                       1347 _CLKPrescTable:
      000004 01                    1348 	.db #0x01	; 1
      000005 02                    1349 	.db #0x02	; 2
      000006 04                    1350 	.db #0x04	; 4
      000007 08                    1351 	.db #0x08	; 8
      000008 0A                    1352 	.db #0x0a	; 10
      000009 10                    1353 	.db #0x10	; 16
      00000A 14                    1354 	.db #0x14	; 20
      00000B 28                    1355 	.db #0x28	; 40
                                   1356 	.area CONST
      00000C                       1357 ___str_0:
      00000C 2E 2F 53 54 4D 38 53  1358 	.ascii "./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/s"
             5F 53 74 64 50 65 72
             69 70 68 5F 4C 69 62
             2F 4C 69 62 72 61 72
             69 65 73 2F 53 54 4D
             38 53 5F 53 74 64 50
             65 72 69 70 68 5F 44
             72 69 76 65 72 2F 73
             72 63 2F 73
      000048 74 6D 38 73 5F 63 6C  1359 	.ascii "tm8s_clk.c"
             6B 2E 63
      000052 00                    1360 	.db 0x00
                                   1361 	.area CODE
                                   1362 	.area INITIALIZER
                                   1363 	.area CABS (ABS)
