                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _ADC1_DeInit
                                     13 	.globl _ADC1_Init
                                     14 	.globl _ADC1_Cmd
                                     15 	.globl _ADC1_ScanModeCmd
                                     16 	.globl _ADC1_DataBufferCmd
                                     17 	.globl _ADC1_ITConfig
                                     18 	.globl _ADC1_PrescalerConfig
                                     19 	.globl _ADC1_SchmittTriggerConfig
                                     20 	.globl _ADC1_ConversionConfig
                                     21 	.globl _ADC1_ExternalTriggerConfig
                                     22 	.globl _ADC1_StartConversion
                                     23 	.globl _ADC1_GetConversionValue
                                     24 	.globl _ADC1_AWDChannelConfig
                                     25 	.globl _ADC1_SetHighThreshold
                                     26 	.globl _ADC1_SetLowThreshold
                                     27 	.globl _ADC1_GetBufferValue
                                     28 	.globl _ADC1_GetAWDChannelStatus
                                     29 	.globl _ADC1_GetFlagStatus
                                     30 	.globl _ADC1_ClearFlag
                                     31 	.globl _ADC1_GetITStatus
                                     32 	.globl _ADC1_ClearITPendingBit
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DATA
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area INITIALIZED
                                     41 ;--------------------------------------------------------
                                     42 ; absolute external ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DABS (ABS)
                                     45 
                                     46 ; default segment ordering for linker
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area CONST
                                     51 	.area INITIALIZER
                                     52 	.area CODE
                                     53 
                                     54 ;--------------------------------------------------------
                                     55 ; global & static initialisations
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
                                     58 	.area GSINIT
                                     59 	.area GSFINAL
                                     60 	.area GSINIT
                                     61 ;--------------------------------------------------------
                                     62 ; Home
                                     63 ;--------------------------------------------------------
                                     64 	.area HOME
                                     65 	.area HOME
                                     66 ;--------------------------------------------------------
                                     67 ; code
                                     68 ;--------------------------------------------------------
                                     69 	.area CODE
                                     70 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 52: void ADC1_DeInit(void)
                                     71 ;	-----------------------------------------
                                     72 ;	 function ADC1_DeInit
                                     73 ;	-----------------------------------------
      000000                         74 _ADC1_DeInit:
                                     75 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 54: ADC1->CSR  = ADC1_CSR_RESET_VALUE;
      000000 35 00 54 00      [ 1]   76 	mov	0x5400+0, #0x00
                                     77 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 55: ADC1->CR1  = ADC1_CR1_RESET_VALUE;
      000004 35 00 54 01      [ 1]   78 	mov	0x5401+0, #0x00
                                     79 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 56: ADC1->CR2  = ADC1_CR2_RESET_VALUE;
      000008 35 00 54 02      [ 1]   80 	mov	0x5402+0, #0x00
                                     81 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 57: ADC1->CR3  = ADC1_CR3_RESET_VALUE;
      00000C 35 00 54 03      [ 1]   82 	mov	0x5403+0, #0x00
                                     83 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 58: ADC1->TDRH = ADC1_TDRH_RESET_VALUE;
      000010 35 00 54 06      [ 1]   84 	mov	0x5406+0, #0x00
                                     85 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 59: ADC1->TDRL = ADC1_TDRL_RESET_VALUE;
      000014 35 00 54 07      [ 1]   86 	mov	0x5407+0, #0x00
                                     87 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 60: ADC1->HTRH = ADC1_HTRH_RESET_VALUE;
      000018 35 FF 54 08      [ 1]   88 	mov	0x5408+0, #0xff
                                     89 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 61: ADC1->HTRL = ADC1_HTRL_RESET_VALUE;
      00001C 35 03 54 09      [ 1]   90 	mov	0x5409+0, #0x03
                                     91 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 62: ADC1->LTRH = ADC1_LTRH_RESET_VALUE;
      000020 35 00 54 0A      [ 1]   92 	mov	0x540a+0, #0x00
                                     93 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 63: ADC1->LTRL = ADC1_LTRL_RESET_VALUE;
      000024 35 00 54 0B      [ 1]   94 	mov	0x540b+0, #0x00
                                     95 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 64: ADC1->AWCRH = ADC1_AWCRH_RESET_VALUE;
      000028 35 00 54 0E      [ 1]   96 	mov	0x540e+0, #0x00
                                     97 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 65: ADC1->AWCRL = ADC1_AWCRL_RESET_VALUE;
      00002C 35 00 54 0F      [ 1]   98 	mov	0x540f+0, #0x00
                                     99 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 66: }
      000030 81               [ 4]  100 	ret
                                    101 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 88: void ADC1_Init(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_PresSel_TypeDef ADC1_PrescalerSelection, ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState ADC1_ExtTriggerState, ADC1_Align_TypeDef ADC1_Align, ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState ADC1_SchmittTriggerState)
                                    102 ;	-----------------------------------------
                                    103 ;	 function ADC1_Init
                                    104 ;	-----------------------------------------
      000031                        105 _ADC1_Init:
      000031 88               [ 1]  106 	push	a
                                    107 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 91: assert_param(IS_ADC1_CONVERSIONMODE_OK(ADC1_ConversionMode));
      000032 6B 01            [ 1]  108 	ld	(0x01, sp), a
      000034 27 10            [ 1]  109 	jreq	00104$
      000036 0D 01            [ 1]  110 	tnz	(0x01, sp)
      000038 26 0C            [ 1]  111 	jrne	00104$
      00003A 4B 5B            [ 1]  112 	push	#0x5b
      00003C 5F               [ 1]  113 	clrw	x
      00003D 89               [ 2]  114 	pushw	x
      00003E 4B 00            [ 1]  115 	push	#0x00
      000040 AEr00r00         [ 2]  116 	ldw	x, #(___str_0+0)
      000043 CDr00r00         [ 4]  117 	call	_assert_failed
      000046                        118 00104$:
                                    119 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 92: assert_param(IS_ADC1_CHANNEL_OK(ADC1_Channel));
      000046 0D 04            [ 1]  120 	tnz	(0x04, sp)
      000048 27 47            [ 1]  121 	jreq	00109$
      00004A 7B 04            [ 1]  122 	ld	a, (0x04, sp)
      00004C 4A               [ 1]  123 	dec	a
      00004D 27 42            [ 1]  124 	jreq	00109$
      00004F 7B 04            [ 1]  125 	ld	a, (0x04, sp)
      000051 A1 02            [ 1]  126 	cp	a, #0x02
      000053 27 3C            [ 1]  127 	jreq	00109$
      000055 7B 04            [ 1]  128 	ld	a, (0x04, sp)
      000057 A1 03            [ 1]  129 	cp	a, #0x03
      000059 27 36            [ 1]  130 	jreq	00109$
      00005B 7B 04            [ 1]  131 	ld	a, (0x04, sp)
      00005D A1 04            [ 1]  132 	cp	a, #0x04
      00005F 27 30            [ 1]  133 	jreq	00109$
      000061 7B 04            [ 1]  134 	ld	a, (0x04, sp)
      000063 A1 05            [ 1]  135 	cp	a, #0x05
      000065 27 2A            [ 1]  136 	jreq	00109$
      000067 7B 04            [ 1]  137 	ld	a, (0x04, sp)
      000069 A1 06            [ 1]  138 	cp	a, #0x06
      00006B 27 24            [ 1]  139 	jreq	00109$
      00006D 7B 04            [ 1]  140 	ld	a, (0x04, sp)
      00006F A1 07            [ 1]  141 	cp	a, #0x07
      000071 27 1E            [ 1]  142 	jreq	00109$
      000073 7B 04            [ 1]  143 	ld	a, (0x04, sp)
      000075 A1 08            [ 1]  144 	cp	a, #0x08
      000077 27 18            [ 1]  145 	jreq	00109$
      000079 7B 04            [ 1]  146 	ld	a, (0x04, sp)
      00007B A1 0C            [ 1]  147 	cp	a, #0x0c
      00007D 27 12            [ 1]  148 	jreq	00109$
      00007F 7B 04            [ 1]  149 	ld	a, (0x04, sp)
      000081 A1 09            [ 1]  150 	cp	a, #0x09
      000083 27 0C            [ 1]  151 	jreq	00109$
      000085 4B 5C            [ 1]  152 	push	#0x5c
      000087 5F               [ 1]  153 	clrw	x
      000088 89               [ 2]  154 	pushw	x
      000089 4B 00            [ 1]  155 	push	#0x00
      00008B AEr00r00         [ 2]  156 	ldw	x, #(___str_0+0)
      00008E CDr00r00         [ 4]  157 	call	_assert_failed
      000091                        158 00109$:
                                    159 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 93: assert_param(IS_ADC1_PRESSEL_OK(ADC1_PrescalerSelection));
      000091 0D 05            [ 1]  160 	tnz	(0x05, sp)
      000093 27 36            [ 1]  161 	jreq	00141$
      000095 7B 05            [ 1]  162 	ld	a, (0x05, sp)
      000097 A1 10            [ 1]  163 	cp	a, #0x10
      000099 27 30            [ 1]  164 	jreq	00141$
      00009B 7B 05            [ 1]  165 	ld	a, (0x05, sp)
      00009D A1 20            [ 1]  166 	cp	a, #0x20
      00009F 27 2A            [ 1]  167 	jreq	00141$
      0000A1 7B 05            [ 1]  168 	ld	a, (0x05, sp)
      0000A3 A1 30            [ 1]  169 	cp	a, #0x30
      0000A5 27 24            [ 1]  170 	jreq	00141$
      0000A7 7B 05            [ 1]  171 	ld	a, (0x05, sp)
      0000A9 A1 40            [ 1]  172 	cp	a, #0x40
      0000AB 27 1E            [ 1]  173 	jreq	00141$
      0000AD 7B 05            [ 1]  174 	ld	a, (0x05, sp)
      0000AF A1 50            [ 1]  175 	cp	a, #0x50
      0000B1 27 18            [ 1]  176 	jreq	00141$
      0000B3 7B 05            [ 1]  177 	ld	a, (0x05, sp)
      0000B5 A1 60            [ 1]  178 	cp	a, #0x60
      0000B7 27 12            [ 1]  179 	jreq	00141$
      0000B9 7B 05            [ 1]  180 	ld	a, (0x05, sp)
      0000BB A1 70            [ 1]  181 	cp	a, #0x70
      0000BD 27 0C            [ 1]  182 	jreq	00141$
      0000BF 4B 5D            [ 1]  183 	push	#0x5d
      0000C1 5F               [ 1]  184 	clrw	x
      0000C2 89               [ 2]  185 	pushw	x
      0000C3 4B 00            [ 1]  186 	push	#0x00
      0000C5 AEr00r00         [ 2]  187 	ldw	x, #(___str_0+0)
      0000C8 CDr00r00         [ 4]  188 	call	_assert_failed
      0000CB                        189 00141$:
                                    190 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 94: assert_param(IS_ADC1_EXTTRIG_OK(ADC1_ExtTrigger));
      0000CB 0D 06            [ 1]  191 	tnz	(0x06, sp)
      0000CD 27 12            [ 1]  192 	jreq	00164$
      0000CF 7B 06            [ 1]  193 	ld	a, (0x06, sp)
      0000D1 A1 10            [ 1]  194 	cp	a, #0x10
      0000D3 27 0C            [ 1]  195 	jreq	00164$
      0000D5 4B 5E            [ 1]  196 	push	#0x5e
      0000D7 5F               [ 1]  197 	clrw	x
      0000D8 89               [ 2]  198 	pushw	x
      0000D9 4B 00            [ 1]  199 	push	#0x00
      0000DB AEr00r00         [ 2]  200 	ldw	x, #(___str_0+0)
      0000DE CDr00r00         [ 4]  201 	call	_assert_failed
      0000E1                        202 00164$:
                                    203 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 95: assert_param(IS_FUNCTIONALSTATE_OK(((ADC1_ExtTriggerState))));
      0000E1 0D 07            [ 1]  204 	tnz	(0x07, sp)
      0000E3 27 10            [ 1]  205 	jreq	00169$
      0000E5 0D 07            [ 1]  206 	tnz	(0x07, sp)
      0000E7 26 0C            [ 1]  207 	jrne	00169$
      0000E9 4B 5F            [ 1]  208 	push	#0x5f
      0000EB 5F               [ 1]  209 	clrw	x
      0000EC 89               [ 2]  210 	pushw	x
      0000ED 4B 00            [ 1]  211 	push	#0x00
      0000EF AEr00r00         [ 2]  212 	ldw	x, #(___str_0+0)
      0000F2 CDr00r00         [ 4]  213 	call	_assert_failed
      0000F5                        214 00169$:
                                    215 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 96: assert_param(IS_ADC1_ALIGN_OK(ADC1_Align));
      0000F5 0D 08            [ 1]  216 	tnz	(0x08, sp)
      0000F7 27 12            [ 1]  217 	jreq	00174$
      0000F9 7B 08            [ 1]  218 	ld	a, (0x08, sp)
      0000FB A1 08            [ 1]  219 	cp	a, #0x08
      0000FD 27 0C            [ 1]  220 	jreq	00174$
      0000FF 4B 60            [ 1]  221 	push	#0x60
      000101 5F               [ 1]  222 	clrw	x
      000102 89               [ 2]  223 	pushw	x
      000103 4B 00            [ 1]  224 	push	#0x00
      000105 AEr00r00         [ 2]  225 	ldw	x, #(___str_0+0)
      000108 CDr00r00         [ 4]  226 	call	_assert_failed
      00010B                        227 00174$:
                                    228 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 97: assert_param(IS_ADC1_SCHMITTTRIG_OK(ADC1_SchmittTriggerChannel));
      00010B 0D 09            [ 1]  229 	tnz	(0x09, sp)
      00010D 27 4C            [ 1]  230 	jreq	00179$
      00010F 7B 09            [ 1]  231 	ld	a, (0x09, sp)
      000111 4A               [ 1]  232 	dec	a
      000112 27 47            [ 1]  233 	jreq	00179$
      000114 7B 09            [ 1]  234 	ld	a, (0x09, sp)
      000116 A1 02            [ 1]  235 	cp	a, #0x02
      000118 27 41            [ 1]  236 	jreq	00179$
      00011A 7B 09            [ 1]  237 	ld	a, (0x09, sp)
      00011C A1 03            [ 1]  238 	cp	a, #0x03
      00011E 27 3B            [ 1]  239 	jreq	00179$
      000120 7B 09            [ 1]  240 	ld	a, (0x09, sp)
      000122 A1 04            [ 1]  241 	cp	a, #0x04
      000124 27 35            [ 1]  242 	jreq	00179$
      000126 7B 09            [ 1]  243 	ld	a, (0x09, sp)
      000128 A1 05            [ 1]  244 	cp	a, #0x05
      00012A 27 2F            [ 1]  245 	jreq	00179$
      00012C 7B 09            [ 1]  246 	ld	a, (0x09, sp)
      00012E A1 06            [ 1]  247 	cp	a, #0x06
      000130 27 29            [ 1]  248 	jreq	00179$
      000132 7B 09            [ 1]  249 	ld	a, (0x09, sp)
      000134 A1 07            [ 1]  250 	cp	a, #0x07
      000136 27 23            [ 1]  251 	jreq	00179$
      000138 7B 09            [ 1]  252 	ld	a, (0x09, sp)
      00013A A1 08            [ 1]  253 	cp	a, #0x08
      00013C 27 1D            [ 1]  254 	jreq	00179$
      00013E 7B 09            [ 1]  255 	ld	a, (0x09, sp)
      000140 A1 0C            [ 1]  256 	cp	a, #0x0c
      000142 27 17            [ 1]  257 	jreq	00179$
      000144 7B 09            [ 1]  258 	ld	a, (0x09, sp)
      000146 4C               [ 1]  259 	inc	a
      000147 27 12            [ 1]  260 	jreq	00179$
      000149 7B 09            [ 1]  261 	ld	a, (0x09, sp)
      00014B A1 09            [ 1]  262 	cp	a, #0x09
      00014D 27 0C            [ 1]  263 	jreq	00179$
      00014F 4B 61            [ 1]  264 	push	#0x61
      000151 5F               [ 1]  265 	clrw	x
      000152 89               [ 2]  266 	pushw	x
      000153 4B 00            [ 1]  267 	push	#0x00
      000155 AEr00r00         [ 2]  268 	ldw	x, #(___str_0+0)
      000158 CDr00r00         [ 4]  269 	call	_assert_failed
      00015B                        270 00179$:
                                    271 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 98: assert_param(IS_FUNCTIONALSTATE_OK(ADC1_SchmittTriggerState));
      00015B 0D 0A            [ 1]  272 	tnz	(0x0a, sp)
      00015D 27 10            [ 1]  273 	jreq	00214$
      00015F 0D 0A            [ 1]  274 	tnz	(0x0a, sp)
      000161 26 0C            [ 1]  275 	jrne	00214$
      000163 4B 62            [ 1]  276 	push	#0x62
      000165 5F               [ 1]  277 	clrw	x
      000166 89               [ 2]  278 	pushw	x
      000167 4B 00            [ 1]  279 	push	#0x00
      000169 AEr00r00         [ 2]  280 	ldw	x, #(___str_0+0)
      00016C CDr00r00         [ 4]  281 	call	_assert_failed
      00016F                        282 00214$:
                                    283 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 103: ADC1_ConversionConfig(ADC1_ConversionMode, ADC1_Channel, ADC1_Align);
      00016F 7B 08            [ 1]  284 	ld	a, (0x08, sp)
      000171 88               [ 1]  285 	push	a
      000172 7B 05            [ 1]  286 	ld	a, (0x05, sp)
      000174 88               [ 1]  287 	push	a
      000175 7B 03            [ 1]  288 	ld	a, (0x03, sp)
      000177 CDr03rA3         [ 4]  289 	call	_ADC1_ConversionConfig
                                    290 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 105: ADC1_PrescalerConfig(ADC1_PrescalerSelection);
      00017A 7B 05            [ 1]  291 	ld	a, (0x05, sp)
      00017C CDr02r70         [ 4]  292 	call	_ADC1_PrescalerConfig
                                    293 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 110: ADC1_ExternalTriggerConfig(ADC1_ExtTrigger, ADC1_ExtTriggerState);
      00017F 7B 07            [ 1]  294 	ld	a, (0x07, sp)
      000181 88               [ 1]  295 	push	a
      000182 7B 07            [ 1]  296 	ld	a, (0x07, sp)
      000184 CDr04r4D         [ 4]  297 	call	_ADC1_ExternalTriggerConfig
                                    298 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 115: ADC1_SchmittTriggerConfig(ADC1_SchmittTriggerChannel, ADC1_SchmittTriggerState);
      000187 7B 0A            [ 1]  299 	ld	a, (0x0a, sp)
      000189 88               [ 1]  300 	push	a
      00018A 7B 0A            [ 1]  301 	ld	a, (0x0a, sp)
      00018C CDr02rBD         [ 4]  302 	call	_ADC1_SchmittTriggerConfig
                                    303 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 118: ADC1->CR1 |= ADC1_CR1_ADON;
      00018F C6 54 01         [ 1]  304 	ld	a, 0x5401
      000192 AA 01            [ 1]  305 	or	a, #0x01
      000194 C7 54 01         [ 1]  306 	ld	0x5401, a
                                    307 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 119: }
      000197 1E 02            [ 2]  308 	ldw	x, (2, sp)
      000199 5B 0A            [ 2]  309 	addw	sp, #10
      00019B FC               [ 2]  310 	jp	(x)
                                    311 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 126: void ADC1_Cmd(FunctionalState NewState)
                                    312 ;	-----------------------------------------
                                    313 ;	 function ADC1_Cmd
                                    314 ;	-----------------------------------------
      00019C                        315 _ADC1_Cmd:
      00019C 88               [ 1]  316 	push	a
                                    317 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 129: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      00019D 6B 01            [ 1]  318 	ld	(0x01, sp), a
      00019F 27 10            [ 1]  319 	jreq	00107$
      0001A1 0D 01            [ 1]  320 	tnz	(0x01, sp)
      0001A3 26 0C            [ 1]  321 	jrne	00107$
      0001A5 4B 81            [ 1]  322 	push	#0x81
      0001A7 5F               [ 1]  323 	clrw	x
      0001A8 89               [ 2]  324 	pushw	x
      0001A9 4B 00            [ 1]  325 	push	#0x00
      0001AB AEr00r00         [ 2]  326 	ldw	x, #(___str_0+0)
      0001AE CDr00r00         [ 4]  327 	call	_assert_failed
      0001B1                        328 00107$:
                                    329 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 133: ADC1->CR1 |= ADC1_CR1_ADON;
      0001B1 C6 54 01         [ 1]  330 	ld	a, 0x5401
                                    331 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 131: if (NewState != DISABLE)
      0001B4 0D 01            [ 1]  332 	tnz	(0x01, sp)
      0001B6 27 07            [ 1]  333 	jreq	00102$
                                    334 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 133: ADC1->CR1 |= ADC1_CR1_ADON;
      0001B8 AA 01            [ 1]  335 	or	a, #0x01
      0001BA C7 54 01         [ 1]  336 	ld	0x5401, a
      0001BD 20 05            [ 2]  337 	jra	00104$
      0001BF                        338 00102$:
                                    339 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 137: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_ADON);
      0001BF A4 FE            [ 1]  340 	and	a, #0xfe
      0001C1 C7 54 01         [ 1]  341 	ld	0x5401, a
      0001C4                        342 00104$:
                                    343 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 139: }
      0001C4 84               [ 1]  344 	pop	a
      0001C5 81               [ 4]  345 	ret
                                    346 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 146: void ADC1_ScanModeCmd(FunctionalState NewState)
                                    347 ;	-----------------------------------------
                                    348 ;	 function ADC1_ScanModeCmd
                                    349 ;	-----------------------------------------
      0001C6                        350 _ADC1_ScanModeCmd:
      0001C6 88               [ 1]  351 	push	a
                                    352 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 149: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0001C7 6B 01            [ 1]  353 	ld	(0x01, sp), a
      0001C9 27 10            [ 1]  354 	jreq	00107$
      0001CB 0D 01            [ 1]  355 	tnz	(0x01, sp)
      0001CD 26 0C            [ 1]  356 	jrne	00107$
      0001CF 4B 95            [ 1]  357 	push	#0x95
      0001D1 5F               [ 1]  358 	clrw	x
      0001D2 89               [ 2]  359 	pushw	x
      0001D3 4B 00            [ 1]  360 	push	#0x00
      0001D5 AEr00r00         [ 2]  361 	ldw	x, #(___str_0+0)
      0001D8 CDr00r00         [ 4]  362 	call	_assert_failed
      0001DB                        363 00107$:
                                    364 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 153: ADC1->CR2 |= ADC1_CR2_SCAN;
      0001DB C6 54 02         [ 1]  365 	ld	a, 0x5402
                                    366 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 151: if (NewState != DISABLE)
      0001DE 0D 01            [ 1]  367 	tnz	(0x01, sp)
      0001E0 27 07            [ 1]  368 	jreq	00102$
                                    369 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 153: ADC1->CR2 |= ADC1_CR2_SCAN;
      0001E2 AA 02            [ 1]  370 	or	a, #0x02
      0001E4 C7 54 02         [ 1]  371 	ld	0x5402, a
      0001E7 20 05            [ 2]  372 	jra	00104$
      0001E9                        373 00102$:
                                    374 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 157: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_SCAN);
      0001E9 A4 FD            [ 1]  375 	and	a, #0xfd
      0001EB C7 54 02         [ 1]  376 	ld	0x5402, a
      0001EE                        377 00104$:
                                    378 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 159: }
      0001EE 84               [ 1]  379 	pop	a
      0001EF 81               [ 4]  380 	ret
                                    381 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 166: void ADC1_DataBufferCmd(FunctionalState NewState)
                                    382 ;	-----------------------------------------
                                    383 ;	 function ADC1_DataBufferCmd
                                    384 ;	-----------------------------------------
      0001F0                        385 _ADC1_DataBufferCmd:
      0001F0 88               [ 1]  386 	push	a
                                    387 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 169: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0001F1 6B 01            [ 1]  388 	ld	(0x01, sp), a
      0001F3 27 10            [ 1]  389 	jreq	00107$
      0001F5 0D 01            [ 1]  390 	tnz	(0x01, sp)
      0001F7 26 0C            [ 1]  391 	jrne	00107$
      0001F9 4B A9            [ 1]  392 	push	#0xa9
      0001FB 5F               [ 1]  393 	clrw	x
      0001FC 89               [ 2]  394 	pushw	x
      0001FD 4B 00            [ 1]  395 	push	#0x00
      0001FF AEr00r00         [ 2]  396 	ldw	x, #(___str_0+0)
      000202 CDr00r00         [ 4]  397 	call	_assert_failed
      000205                        398 00107$:
                                    399 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 173: ADC1->CR3 |= ADC1_CR3_DBUF;
      000205 C6 54 03         [ 1]  400 	ld	a, 0x5403
                                    401 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 171: if (NewState != DISABLE)
      000208 0D 01            [ 1]  402 	tnz	(0x01, sp)
      00020A 27 07            [ 1]  403 	jreq	00102$
                                    404 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 173: ADC1->CR3 |= ADC1_CR3_DBUF;
      00020C AA 80            [ 1]  405 	or	a, #0x80
      00020E C7 54 03         [ 1]  406 	ld	0x5403, a
      000211 20 05            [ 2]  407 	jra	00104$
      000213                        408 00102$:
                                    409 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 177: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_DBUF);
      000213 A4 7F            [ 1]  410 	and	a, #0x7f
      000215 C7 54 03         [ 1]  411 	ld	0x5403, a
      000218                        412 00104$:
                                    413 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 179: }
      000218 84               [ 1]  414 	pop	a
      000219 81               [ 4]  415 	ret
                                    416 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 190: void ADC1_ITConfig(ADC1_IT_TypeDef ADC1_IT, FunctionalState NewState)
                                    417 ;	-----------------------------------------
                                    418 ;	 function ADC1_ITConfig
                                    419 ;	-----------------------------------------
      00021A                        420 _ADC1_ITConfig:
      00021A 52 04            [ 2]  421 	sub	sp, #4
      00021C 1F 03            [ 2]  422 	ldw	(0x03, sp), x
      00021E 6B 02            [ 1]  423 	ld	(0x02, sp), a
                                    424 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 193: assert_param(IS_ADC1_IT_OK(ADC1_IT));
      000220 1E 03            [ 2]  425 	ldw	x, (0x03, sp)
      000222 A3 00 20         [ 2]  426 	cpw	x, #0x0020
      000225 27 15            [ 1]  427 	jreq	00107$
      000227 A3 00 10         [ 2]  428 	cpw	x, #0x0010
      00022A 27 10            [ 1]  429 	jreq	00107$
      00022C 89               [ 2]  430 	pushw	x
      00022D 4B C1            [ 1]  431 	push	#0xc1
      00022F 4B 00            [ 1]  432 	push	#0x00
      000231 4B 00            [ 1]  433 	push	#0x00
      000233 4B 00            [ 1]  434 	push	#0x00
      000235 AEr00r00         [ 2]  435 	ldw	x, #(___str_0+0)
      000238 CDr00r00         [ 4]  436 	call	_assert_failed
      00023B 85               [ 2]  437 	popw	x
      00023C                        438 00107$:
                                    439 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 194: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      00023C 0D 02            [ 1]  440 	tnz	(0x02, sp)
      00023E 27 14            [ 1]  441 	jreq	00112$
      000240 0D 02            [ 1]  442 	tnz	(0x02, sp)
      000242 26 10            [ 1]  443 	jrne	00112$
      000244 89               [ 2]  444 	pushw	x
      000245 4B C2            [ 1]  445 	push	#0xc2
      000247 4B 00            [ 1]  446 	push	#0x00
      000249 4B 00            [ 1]  447 	push	#0x00
      00024B 4B 00            [ 1]  448 	push	#0x00
      00024D AEr00r00         [ 2]  449 	ldw	x, #(___str_0+0)
      000250 CDr00r00         [ 4]  450 	call	_assert_failed
      000253 85               [ 2]  451 	popw	x
      000254                        452 00112$:
                                    453 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 199: ADC1->CSR |= (uint8_t)ADC1_IT;
      000254 C6 54 00         [ 1]  454 	ld	a, 0x5400
      000257 6B 01            [ 1]  455 	ld	(0x01, sp), a
                                    456 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 196: if (NewState != DISABLE)
      000259 0D 02            [ 1]  457 	tnz	(0x02, sp)
      00025B 27 09            [ 1]  458 	jreq	00102$
                                    459 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 199: ADC1->CSR |= (uint8_t)ADC1_IT;
      00025D 7B 04            [ 1]  460 	ld	a, (0x04, sp)
      00025F 1A 01            [ 1]  461 	or	a, (0x01, sp)
      000261 C7 54 00         [ 1]  462 	ld	0x5400, a
      000264 20 07            [ 2]  463 	jra	00104$
      000266                        464 00102$:
                                    465 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 204: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ADC1_IT);
      000266 53               [ 2]  466 	cplw	x
      000267 9F               [ 1]  467 	ld	a, xl
      000268 14 01            [ 1]  468 	and	a, (0x01, sp)
      00026A C7 54 00         [ 1]  469 	ld	0x5400, a
      00026D                        470 00104$:
                                    471 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 206: }
      00026D 5B 04            [ 2]  472 	addw	sp, #4
      00026F 81               [ 4]  473 	ret
                                    474 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 214: void ADC1_PrescalerConfig(ADC1_PresSel_TypeDef ADC1_Prescaler)
                                    475 ;	-----------------------------------------
                                    476 ;	 function ADC1_PrescalerConfig
                                    477 ;	-----------------------------------------
      000270                        478 _ADC1_PrescalerConfig:
      000270 88               [ 1]  479 	push	a
                                    480 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 217: assert_param(IS_ADC1_PRESSEL_OK(ADC1_Prescaler));
      000271 6B 01            [ 1]  481 	ld	(0x01, sp), a
      000273 27 36            [ 1]  482 	jreq	00104$
      000275 7B 01            [ 1]  483 	ld	a, (0x01, sp)
      000277 A1 10            [ 1]  484 	cp	a, #0x10
      000279 27 30            [ 1]  485 	jreq	00104$
      00027B 7B 01            [ 1]  486 	ld	a, (0x01, sp)
      00027D A1 20            [ 1]  487 	cp	a, #0x20
      00027F 27 2A            [ 1]  488 	jreq	00104$
      000281 7B 01            [ 1]  489 	ld	a, (0x01, sp)
      000283 A1 30            [ 1]  490 	cp	a, #0x30
      000285 27 24            [ 1]  491 	jreq	00104$
      000287 7B 01            [ 1]  492 	ld	a, (0x01, sp)
      000289 A1 40            [ 1]  493 	cp	a, #0x40
      00028B 27 1E            [ 1]  494 	jreq	00104$
      00028D 7B 01            [ 1]  495 	ld	a, (0x01, sp)
      00028F A1 50            [ 1]  496 	cp	a, #0x50
      000291 27 18            [ 1]  497 	jreq	00104$
      000293 7B 01            [ 1]  498 	ld	a, (0x01, sp)
      000295 A1 60            [ 1]  499 	cp	a, #0x60
      000297 27 12            [ 1]  500 	jreq	00104$
      000299 7B 01            [ 1]  501 	ld	a, (0x01, sp)
      00029B A1 70            [ 1]  502 	cp	a, #0x70
      00029D 27 0C            [ 1]  503 	jreq	00104$
      00029F 4B D9            [ 1]  504 	push	#0xd9
      0002A1 5F               [ 1]  505 	clrw	x
      0002A2 89               [ 2]  506 	pushw	x
      0002A3 4B 00            [ 1]  507 	push	#0x00
      0002A5 AEr00r00         [ 2]  508 	ldw	x, #(___str_0+0)
      0002A8 CDr00r00         [ 4]  509 	call	_assert_failed
      0002AB                        510 00104$:
                                    511 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 220: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_SPSEL);
      0002AB C6 54 01         [ 1]  512 	ld	a, 0x5401
      0002AE A4 8F            [ 1]  513 	and	a, #0x8f
      0002B0 C7 54 01         [ 1]  514 	ld	0x5401, a
                                    515 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 222: ADC1->CR1 |= (uint8_t)(ADC1_Prescaler);
      0002B3 C6 54 01         [ 1]  516 	ld	a, 0x5401
      0002B6 1A 01            [ 1]  517 	or	a, (0x01, sp)
      0002B8 C7 54 01         [ 1]  518 	ld	0x5401, a
                                    519 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 223: }
      0002BB 84               [ 1]  520 	pop	a
      0002BC 81               [ 4]  521 	ret
                                    522 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 233: void ADC1_SchmittTriggerConfig(ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState NewState)
                                    523 ;	-----------------------------------------
                                    524 ;	 function ADC1_SchmittTriggerConfig
                                    525 ;	-----------------------------------------
      0002BD                        526 _ADC1_SchmittTriggerConfig:
      0002BD 88               [ 1]  527 	push	a
                                    528 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 236: assert_param(IS_ADC1_SCHMITTTRIG_OK(ADC1_SchmittTriggerChannel));
      0002BE 97               [ 1]  529 	ld	xl, a
      0002BF 4C               [ 1]  530 	inc	a
      0002C0 26 05            [ 1]  531 	jrne	00292$
      0002C2 A6 01            [ 1]  532 	ld	a, #0x01
      0002C4 95               [ 1]  533 	ld	xh, a
      0002C5 20 02            [ 2]  534 	jra	00293$
      0002C7                        535 00292$:
      0002C7 4F               [ 1]  536 	clr	a
      0002C8 95               [ 1]  537 	ld	xh, a
      0002C9                        538 00293$:
      0002C9 9F               [ 1]  539 	ld	a, xl
      0002CA 4D               [ 1]  540 	tnz	a
      0002CB 27 45            [ 1]  541 	jreq	00119$
      0002CD 9F               [ 1]  542 	ld	a, xl
      0002CE 4A               [ 1]  543 	dec	a
      0002CF 27 41            [ 1]  544 	jreq	00119$
      0002D1 9F               [ 1]  545 	ld	a, xl
      0002D2 A1 02            [ 1]  546 	cp	a, #0x02
      0002D4 27 3C            [ 1]  547 	jreq	00119$
      0002D6 9F               [ 1]  548 	ld	a, xl
      0002D7 A1 03            [ 1]  549 	cp	a, #0x03
      0002D9 27 37            [ 1]  550 	jreq	00119$
      0002DB 9F               [ 1]  551 	ld	a, xl
      0002DC A1 04            [ 1]  552 	cp	a, #0x04
      0002DE 27 32            [ 1]  553 	jreq	00119$
      0002E0 9F               [ 1]  554 	ld	a, xl
      0002E1 A1 05            [ 1]  555 	cp	a, #0x05
      0002E3 27 2D            [ 1]  556 	jreq	00119$
      0002E5 9F               [ 1]  557 	ld	a, xl
      0002E6 A1 06            [ 1]  558 	cp	a, #0x06
      0002E8 27 28            [ 1]  559 	jreq	00119$
      0002EA 9F               [ 1]  560 	ld	a, xl
      0002EB A1 07            [ 1]  561 	cp	a, #0x07
      0002ED 27 23            [ 1]  562 	jreq	00119$
      0002EF 9F               [ 1]  563 	ld	a, xl
      0002F0 A1 08            [ 1]  564 	cp	a, #0x08
      0002F2 27 1E            [ 1]  565 	jreq	00119$
      0002F4 9F               [ 1]  566 	ld	a, xl
      0002F5 A1 0C            [ 1]  567 	cp	a, #0x0c
      0002F7 27 19            [ 1]  568 	jreq	00119$
      0002F9 9E               [ 1]  569 	ld	a, xh
      0002FA 4D               [ 1]  570 	tnz	a
      0002FB 26 15            [ 1]  571 	jrne	00119$
      0002FD 9F               [ 1]  572 	ld	a, xl
      0002FE A1 09            [ 1]  573 	cp	a, #0x09
      000300 27 10            [ 1]  574 	jreq	00119$
      000302 89               [ 2]  575 	pushw	x
      000303 4B EC            [ 1]  576 	push	#0xec
      000305 4B 00            [ 1]  577 	push	#0x00
      000307 4B 00            [ 1]  578 	push	#0x00
      000309 4B 00            [ 1]  579 	push	#0x00
      00030B AEr00r00         [ 2]  580 	ldw	x, #(___str_0+0)
      00030E CDr00r00         [ 4]  581 	call	_assert_failed
      000311 85               [ 2]  582 	popw	x
      000312                        583 00119$:
                                    584 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 237: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000312 0D 04            [ 1]  585 	tnz	(0x04, sp)
      000314 27 14            [ 1]  586 	jreq	00154$
      000316 0D 04            [ 1]  587 	tnz	(0x04, sp)
      000318 26 10            [ 1]  588 	jrne	00154$
      00031A 89               [ 2]  589 	pushw	x
      00031B 4B ED            [ 1]  590 	push	#0xed
      00031D 4B 00            [ 1]  591 	push	#0x00
      00031F 4B 00            [ 1]  592 	push	#0x00
      000321 4B 00            [ 1]  593 	push	#0x00
      000323 AEr00r00         [ 2]  594 	ldw	x, #(___str_0+0)
      000326 CDr00r00         [ 4]  595 	call	_assert_failed
      000329 85               [ 2]  596 	popw	x
      00032A                        597 00154$:
                                    598 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 239: if (ADC1_SchmittTriggerChannel == ADC1_SCHMITTTRIG_ALL)
      00032A 9E               [ 1]  599 	ld	a, xh
      00032B 4D               [ 1]  600 	tnz	a
      00032C 27 21            [ 1]  601 	jreq	00114$
                                    602 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 243: ADC1->TDRL &= (uint8_t)0x0;
      00032E C6 54 07         [ 1]  603 	ld	a, 0x5407
                                    604 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 241: if (NewState != DISABLE)
      000331 0D 04            [ 1]  605 	tnz	(0x04, sp)
      000333 27 0D            [ 1]  606 	jreq	00102$
                                    607 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 243: ADC1->TDRL &= (uint8_t)0x0;
      000335 35 00 54 07      [ 1]  608 	mov	0x5407+0, #0x00
                                    609 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 244: ADC1->TDRH &= (uint8_t)0x0;
      000339 C6 54 06         [ 1]  610 	ld	a, 0x5406
      00033C 35 00 54 06      [ 1]  611 	mov	0x5406+0, #0x00
      000340 20 5D            [ 2]  612 	jra	00116$
      000342                        613 00102$:
                                    614 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 248: ADC1->TDRL |= (uint8_t)0xFF;
      000342 35 FF 54 07      [ 1]  615 	mov	0x5407+0, #0xff
                                    616 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 249: ADC1->TDRH |= (uint8_t)0xFF;
      000346 C6 54 06         [ 1]  617 	ld	a, 0x5406
      000349 35 FF 54 06      [ 1]  618 	mov	0x5406+0, #0xff
      00034D 20 50            [ 2]  619 	jra	00116$
      00034F                        620 00114$:
                                    621 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 252: else if (ADC1_SchmittTriggerChannel < ADC1_SCHMITTTRIG_CHANNEL8)
      00034F 9F               [ 1]  622 	ld	a, xl
      000350 A1 08            [ 1]  623 	cp	a, #0x08
      000352 24 25            [ 1]  624 	jrnc	00111$
                                    625 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 243: ADC1->TDRL &= (uint8_t)0x0;
      000354 C6 54 07         [ 1]  626 	ld	a, 0x5407
      000357 6B 01            [ 1]  627 	ld	(0x01, sp), a
                                    628 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 256: ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
      000359 A6 01            [ 1]  629 	ld	a, #0x01
      00035B 88               [ 1]  630 	push	a
      00035C 9F               [ 1]  631 	ld	a, xl
      00035D 4D               [ 1]  632 	tnz	a
      00035E 27 05            [ 1]  633 	jreq	00332$
      000360                        634 00331$:
      000360 08 01            [ 1]  635 	sll	(1, sp)
      000362 4A               [ 1]  636 	dec	a
      000363 26 FB            [ 1]  637 	jrne	00331$
      000365                        638 00332$:
      000365 84               [ 1]  639 	pop	a
                                    640 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 254: if (NewState != DISABLE)
      000366 0D 04            [ 1]  641 	tnz	(0x04, sp)
      000368 27 08            [ 1]  642 	jreq	00105$
                                    643 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 256: ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
      00036A 43               [ 1]  644 	cpl	a
      00036B 14 01            [ 1]  645 	and	a, (0x01, sp)
      00036D C7 54 07         [ 1]  646 	ld	0x5407, a
      000370 20 2D            [ 2]  647 	jra	00116$
      000372                        648 00105$:
                                    649 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 260: ADC1->TDRL |= (uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel);
      000372 1A 01            [ 1]  650 	or	a, (0x01, sp)
      000374 C7 54 07         [ 1]  651 	ld	0x5407, a
      000377 20 26            [ 2]  652 	jra	00116$
      000379                        653 00111$:
                                    654 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 244: ADC1->TDRH &= (uint8_t)0x0;
      000379 C6 54 06         [ 1]  655 	ld	a, 0x5406
      00037C 6B 01            [ 1]  656 	ld	(0x01, sp), a
                                    657 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 267: ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
      00037E 1D 00 08         [ 2]  658 	subw	x, #8
      000381 A6 01            [ 1]  659 	ld	a, #0x01
      000383 88               [ 1]  660 	push	a
      000384 9F               [ 1]  661 	ld	a, xl
      000385 4D               [ 1]  662 	tnz	a
      000386 27 05            [ 1]  663 	jreq	00335$
      000388                        664 00334$:
      000388 08 01            [ 1]  665 	sll	(1, sp)
      00038A 4A               [ 1]  666 	dec	a
      00038B 26 FB            [ 1]  667 	jrne	00334$
      00038D                        668 00335$:
      00038D 84               [ 1]  669 	pop	a
                                    670 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 265: if (NewState != DISABLE)
      00038E 0D 04            [ 1]  671 	tnz	(0x04, sp)
      000390 27 08            [ 1]  672 	jreq	00108$
                                    673 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 267: ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
      000392 43               [ 1]  674 	cpl	a
      000393 14 01            [ 1]  675 	and	a, (0x01, sp)
      000395 C7 54 06         [ 1]  676 	ld	0x5406, a
      000398 20 05            [ 2]  677 	jra	00116$
      00039A                        678 00108$:
                                    679 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 271: ADC1->TDRH |= (uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8));
      00039A 1A 01            [ 1]  680 	or	a, (0x01, sp)
      00039C C7 54 06         [ 1]  681 	ld	0x5406, a
      00039F                        682 00116$:
                                    683 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 274: }
      00039F 84               [ 1]  684 	pop	a
      0003A0 85               [ 2]  685 	popw	x
      0003A1 84               [ 1]  686 	pop	a
      0003A2 FC               [ 2]  687 	jp	(x)
                                    688 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 286: void ADC1_ConversionConfig(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_Align_TypeDef ADC1_Align)
                                    689 ;	-----------------------------------------
                                    690 ;	 function ADC1_ConversionConfig
                                    691 ;	-----------------------------------------
      0003A3                        692 _ADC1_ConversionConfig:
      0003A3 88               [ 1]  693 	push	a
                                    694 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 289: assert_param(IS_ADC1_CONVERSIONMODE_OK(ADC1_ConversionMode));
      0003A4 6B 01            [ 1]  695 	ld	(0x01, sp), a
      0003A6 27 10            [ 1]  696 	jreq	00107$
      0003A8 0D 01            [ 1]  697 	tnz	(0x01, sp)
      0003AA 26 0C            [ 1]  698 	jrne	00107$
      0003AC 4B 21            [ 1]  699 	push	#0x21
      0003AE 4B 01            [ 1]  700 	push	#0x01
      0003B0 5F               [ 1]  701 	clrw	x
      0003B1 89               [ 2]  702 	pushw	x
      0003B2 AEr00r00         [ 2]  703 	ldw	x, #(___str_0+0)
      0003B5 CDr00r00         [ 4]  704 	call	_assert_failed
      0003B8                        705 00107$:
                                    706 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 290: assert_param(IS_ADC1_CHANNEL_OK(ADC1_Channel));
      0003B8 0D 04            [ 1]  707 	tnz	(0x04, sp)
      0003BA 27 47            [ 1]  708 	jreq	00112$
      0003BC 7B 04            [ 1]  709 	ld	a, (0x04, sp)
      0003BE 4A               [ 1]  710 	dec	a
      0003BF 27 42            [ 1]  711 	jreq	00112$
      0003C1 7B 04            [ 1]  712 	ld	a, (0x04, sp)
      0003C3 A1 02            [ 1]  713 	cp	a, #0x02
      0003C5 27 3C            [ 1]  714 	jreq	00112$
      0003C7 7B 04            [ 1]  715 	ld	a, (0x04, sp)
      0003C9 A1 03            [ 1]  716 	cp	a, #0x03
      0003CB 27 36            [ 1]  717 	jreq	00112$
      0003CD 7B 04            [ 1]  718 	ld	a, (0x04, sp)
      0003CF A1 04            [ 1]  719 	cp	a, #0x04
      0003D1 27 30            [ 1]  720 	jreq	00112$
      0003D3 7B 04            [ 1]  721 	ld	a, (0x04, sp)
      0003D5 A1 05            [ 1]  722 	cp	a, #0x05
      0003D7 27 2A            [ 1]  723 	jreq	00112$
      0003D9 7B 04            [ 1]  724 	ld	a, (0x04, sp)
      0003DB A1 06            [ 1]  725 	cp	a, #0x06
      0003DD 27 24            [ 1]  726 	jreq	00112$
      0003DF 7B 04            [ 1]  727 	ld	a, (0x04, sp)
      0003E1 A1 07            [ 1]  728 	cp	a, #0x07
      0003E3 27 1E            [ 1]  729 	jreq	00112$
      0003E5 7B 04            [ 1]  730 	ld	a, (0x04, sp)
      0003E7 A1 08            [ 1]  731 	cp	a, #0x08
      0003E9 27 18            [ 1]  732 	jreq	00112$
      0003EB 7B 04            [ 1]  733 	ld	a, (0x04, sp)
      0003ED A1 0C            [ 1]  734 	cp	a, #0x0c
      0003EF 27 12            [ 1]  735 	jreq	00112$
      0003F1 7B 04            [ 1]  736 	ld	a, (0x04, sp)
      0003F3 A1 09            [ 1]  737 	cp	a, #0x09
      0003F5 27 0C            [ 1]  738 	jreq	00112$
      0003F7 4B 22            [ 1]  739 	push	#0x22
      0003F9 4B 01            [ 1]  740 	push	#0x01
      0003FB 5F               [ 1]  741 	clrw	x
      0003FC 89               [ 2]  742 	pushw	x
      0003FD AEr00r00         [ 2]  743 	ldw	x, #(___str_0+0)
      000400 CDr00r00         [ 4]  744 	call	_assert_failed
      000403                        745 00112$:
                                    746 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 291: assert_param(IS_ADC1_ALIGN_OK(ADC1_Align));
      000403 0D 05            [ 1]  747 	tnz	(0x05, sp)
      000405 27 12            [ 1]  748 	jreq	00144$
      000407 7B 05            [ 1]  749 	ld	a, (0x05, sp)
      000409 A1 08            [ 1]  750 	cp	a, #0x08
      00040B 27 0C            [ 1]  751 	jreq	00144$
      00040D 4B 23            [ 1]  752 	push	#0x23
      00040F 4B 01            [ 1]  753 	push	#0x01
      000411 5F               [ 1]  754 	clrw	x
      000412 89               [ 2]  755 	pushw	x
      000413 AEr00r00         [ 2]  756 	ldw	x, #(___str_0+0)
      000416 CDr00r00         [ 4]  757 	call	_assert_failed
      000419                        758 00144$:
                                    759 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 294: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_ALIGN);
      000419 72 17 54 02      [ 1]  760 	bres	0x5402, #3
                                    761 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 296: ADC1->CR2 |= (uint8_t)(ADC1_Align);
      00041D C6 54 02         [ 1]  762 	ld	a, 0x5402
      000420 1A 05            [ 1]  763 	or	a, (0x05, sp)
      000422 C7 54 02         [ 1]  764 	ld	0x5402, a
                                    765 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 301: ADC1->CR1 |= ADC1_CR1_CONT;
      000425 C6 54 01         [ 1]  766 	ld	a, 0x5401
                                    767 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 298: if (ADC1_ConversionMode == ADC1_CONVERSIONMODE_CONTINUOUS)
      000428 0D 01            [ 1]  768 	tnz	(0x01, sp)
      00042A 27 07            [ 1]  769 	jreq	00102$
                                    770 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 301: ADC1->CR1 |= ADC1_CR1_CONT;
      00042C AA 02            [ 1]  771 	or	a, #0x02
      00042E C7 54 01         [ 1]  772 	ld	0x5401, a
      000431 20 05            [ 2]  773 	jra	00103$
      000433                        774 00102$:
                                    775 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 306: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_CONT);
      000433 A4 FD            [ 1]  776 	and	a, #0xfd
      000435 C7 54 01         [ 1]  777 	ld	0x5401, a
      000438                        778 00103$:
                                    779 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 310: ADC1->CSR &= (uint8_t)(~ADC1_CSR_CH);
      000438 C6 54 00         [ 1]  780 	ld	a, 0x5400
      00043B A4 F0            [ 1]  781 	and	a, #0xf0
      00043D C7 54 00         [ 1]  782 	ld	0x5400, a
                                    783 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 312: ADC1->CSR |= (uint8_t)(ADC1_Channel);
      000440 C6 54 00         [ 1]  784 	ld	a, 0x5400
      000443 1A 04            [ 1]  785 	or	a, (0x04, sp)
      000445 C7 54 00         [ 1]  786 	ld	0x5400, a
                                    787 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 313: }
      000448 1E 02            [ 2]  788 	ldw	x, (2, sp)
      00044A 5B 05            [ 2]  789 	addw	sp, #5
      00044C FC               [ 2]  790 	jp	(x)
                                    791 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 325: void ADC1_ExternalTriggerConfig(ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState NewState)
                                    792 ;	-----------------------------------------
                                    793 ;	 function ADC1_ExternalTriggerConfig
                                    794 ;	-----------------------------------------
      00044D                        795 _ADC1_ExternalTriggerConfig:
      00044D 88               [ 1]  796 	push	a
                                    797 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 328: assert_param(IS_ADC1_EXTTRIG_OK(ADC1_ExtTrigger));
      00044E 6B 01            [ 1]  798 	ld	(0x01, sp), a
      000450 27 12            [ 1]  799 	jreq	00107$
      000452 7B 01            [ 1]  800 	ld	a, (0x01, sp)
      000454 A1 10            [ 1]  801 	cp	a, #0x10
      000456 27 0C            [ 1]  802 	jreq	00107$
      000458 4B 48            [ 1]  803 	push	#0x48
      00045A 4B 01            [ 1]  804 	push	#0x01
      00045C 5F               [ 1]  805 	clrw	x
      00045D 89               [ 2]  806 	pushw	x
      00045E AEr00r00         [ 2]  807 	ldw	x, #(___str_0+0)
      000461 CDr00r00         [ 4]  808 	call	_assert_failed
      000464                        809 00107$:
                                    810 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 329: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000464 0D 04            [ 1]  811 	tnz	(0x04, sp)
      000466 27 10            [ 1]  812 	jreq	00112$
      000468 0D 04            [ 1]  813 	tnz	(0x04, sp)
      00046A 26 0C            [ 1]  814 	jrne	00112$
      00046C 4B 49            [ 1]  815 	push	#0x49
      00046E 4B 01            [ 1]  816 	push	#0x01
      000470 5F               [ 1]  817 	clrw	x
      000471 89               [ 2]  818 	pushw	x
      000472 AEr00r00         [ 2]  819 	ldw	x, #(___str_0+0)
      000475 CDr00r00         [ 4]  820 	call	_assert_failed
      000478                        821 00112$:
                                    822 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 332: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTSEL);
      000478 C6 54 02         [ 1]  823 	ld	a, 0x5402
      00047B A4 CF            [ 1]  824 	and	a, #0xcf
      00047D C7 54 02         [ 1]  825 	ld	0x5402, a
      000480 C6 54 02         [ 1]  826 	ld	a, 0x5402
                                    827 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 334: if (NewState != DISABLE)
      000483 0D 04            [ 1]  828 	tnz	(0x04, sp)
      000485 27 07            [ 1]  829 	jreq	00102$
                                    830 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 337: ADC1->CR2 |= (uint8_t)(ADC1_CR2_EXTTRIG);
      000487 AA 40            [ 1]  831 	or	a, #0x40
      000489 C7 54 02         [ 1]  832 	ld	0x5402, a
      00048C 20 05            [ 2]  833 	jra	00103$
      00048E                        834 00102$:
                                    835 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 342: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTTRIG);
      00048E A4 BF            [ 1]  836 	and	a, #0xbf
      000490 C7 54 02         [ 1]  837 	ld	0x5402, a
      000493                        838 00103$:
                                    839 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 346: ADC1->CR2 |= (uint8_t)(ADC1_ExtTrigger);
      000493 C6 54 02         [ 1]  840 	ld	a, 0x5402
      000496 1A 01            [ 1]  841 	or	a, (0x01, sp)
      000498 C7 54 02         [ 1]  842 	ld	0x5402, a
                                    843 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 347: }
      00049B 84               [ 1]  844 	pop	a
      00049C 85               [ 2]  845 	popw	x
      00049D 84               [ 1]  846 	pop	a
      00049E FC               [ 2]  847 	jp	(x)
                                    848 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 358: void ADC1_StartConversion(void)
                                    849 ;	-----------------------------------------
                                    850 ;	 function ADC1_StartConversion
                                    851 ;	-----------------------------------------
      00049F                        852 _ADC1_StartConversion:
                                    853 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 360: ADC1->CR1 |= ADC1_CR1_ADON;
      00049F 72 10 54 01      [ 1]  854 	bset	0x5401, #0
                                    855 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 361: }
      0004A3 81               [ 4]  856 	ret
                                    857 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 370: uint16_t ADC1_GetConversionValue(void)
                                    858 ;	-----------------------------------------
                                    859 ;	 function ADC1_GetConversionValue
                                    860 ;	-----------------------------------------
      0004A4                        861 _ADC1_GetConversionValue:
      0004A4 52 04            [ 2]  862 	sub	sp, #4
                                    863 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 375: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0004A6 72 07 54 02 10   [ 2]  864 	btjf	0x5402, #3, 00102$
                                    865 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 378: templ = ADC1->DRL;
      0004AB C6 54 05         [ 1]  866 	ld	a, 0x5405
      0004AE 97               [ 1]  867 	ld	xl, a
                                    868 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 380: temph = ADC1->DRH;
      0004AF C6 54 04         [ 1]  869 	ld	a, 0x5404
      0004B2 95               [ 1]  870 	ld	xh, a
                                    871 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 382: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      0004B3 4F               [ 1]  872 	clr	a
      0004B4 89               [ 2]  873 	pushw	x
      0004B5 1A 02            [ 1]  874 	or	a, (2, sp)
      0004B7 85               [ 2]  875 	popw	x
      0004B8 97               [ 1]  876 	ld	xl, a
      0004B9 20 1E            [ 2]  877 	jra	00103$
      0004BB                        878 00102$:
                                    879 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 387: temph = ADC1->DRH;
      0004BB C6 54 04         [ 1]  880 	ld	a, 0x5404
      0004BE 90 5F            [ 1]  881 	clrw	y
      0004C0 90 97            [ 1]  882 	ld	yl, a
                                    883 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 389: templ = ADC1->DRL;
      0004C2 C6 54 05         [ 1]  884 	ld	a, 0x5405
                                    885 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 391: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)((uint16_t)temph << 8));
      0004C5 5F               [ 1]  886 	clrw	x
      0004C6 97               [ 1]  887 	ld	xl, a
      0004C7 58               [ 2]  888 	sllw	x
      0004C8 58               [ 2]  889 	sllw	x
      0004C9 58               [ 2]  890 	sllw	x
      0004CA 58               [ 2]  891 	sllw	x
      0004CB 58               [ 2]  892 	sllw	x
      0004CC 58               [ 2]  893 	sllw	x
      0004CD 1F 01            [ 2]  894 	ldw	(0x01, sp), x
      0004CF 90 9F            [ 1]  895 	ld	a, yl
      0004D1 0F 04            [ 1]  896 	clr	(0x04, sp)
      0004D3 1A 01            [ 1]  897 	or	a, (0x01, sp)
      0004D5 95               [ 1]  898 	ld	xh, a
      0004D6 7B 02            [ 1]  899 	ld	a, (0x02, sp)
      0004D8 97               [ 1]  900 	ld	xl, a
      0004D9                        901 00103$:
                                    902 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 394: return ((uint16_t)temph);
                                    903 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 395: }
      0004D9 5B 04            [ 2]  904 	addw	sp, #4
      0004DB 81               [ 4]  905 	ret
                                    906 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 405: void ADC1_AWDChannelConfig(ADC1_Channel_TypeDef Channel, FunctionalState NewState)
                                    907 ;	-----------------------------------------
                                    908 ;	 function ADC1_AWDChannelConfig
                                    909 ;	-----------------------------------------
      0004DC                        910 _ADC1_AWDChannelConfig:
      0004DC 89               [ 2]  911 	pushw	x
                                    912 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 408: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0004DD 0D 05            [ 1]  913 	tnz	(0x05, sp)
      0004DF 27 12            [ 1]  914 	jreq	00113$
      0004E1 0D 05            [ 1]  915 	tnz	(0x05, sp)
      0004E3 26 0E            [ 1]  916 	jrne	00113$
      0004E5 88               [ 1]  917 	push	a
      0004E6 4B 98            [ 1]  918 	push	#0x98
      0004E8 4B 01            [ 1]  919 	push	#0x01
      0004EA 5F               [ 1]  920 	clrw	x
      0004EB 89               [ 2]  921 	pushw	x
      0004EC AEr00r00         [ 2]  922 	ldw	x, #(___str_0+0)
      0004EF CDr00r00         [ 4]  923 	call	_assert_failed
      0004F2 84               [ 1]  924 	pop	a
      0004F3                        925 00113$:
                                    926 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 409: assert_param(IS_ADC1_CHANNEL_OK(Channel));
      0004F3 4D               [ 1]  927 	tnz	a
      0004F4 27 36            [ 1]  928 	jreq	00118$
      0004F6 A1 01            [ 1]  929 	cp	a, #0x01
      0004F8 27 32            [ 1]  930 	jreq	00118$
      0004FA A1 02            [ 1]  931 	cp	a, #0x02
      0004FC 27 2E            [ 1]  932 	jreq	00118$
      0004FE A1 03            [ 1]  933 	cp	a, #0x03
      000500 27 2A            [ 1]  934 	jreq	00118$
      000502 A1 04            [ 1]  935 	cp	a, #0x04
      000504 27 26            [ 1]  936 	jreq	00118$
      000506 A1 05            [ 1]  937 	cp	a, #0x05
      000508 27 22            [ 1]  938 	jreq	00118$
      00050A A1 06            [ 1]  939 	cp	a, #0x06
      00050C 27 1E            [ 1]  940 	jreq	00118$
      00050E A1 07            [ 1]  941 	cp	a, #0x07
      000510 27 1A            [ 1]  942 	jreq	00118$
      000512 A1 08            [ 1]  943 	cp	a, #0x08
      000514 27 16            [ 1]  944 	jreq	00118$
      000516 A1 0C            [ 1]  945 	cp	a, #0x0c
      000518 27 12            [ 1]  946 	jreq	00118$
      00051A A1 09            [ 1]  947 	cp	a, #0x09
      00051C 27 0E            [ 1]  948 	jreq	00118$
      00051E 88               [ 1]  949 	push	a
      00051F 4B 99            [ 1]  950 	push	#0x99
      000521 4B 01            [ 1]  951 	push	#0x01
      000523 5F               [ 1]  952 	clrw	x
      000524 89               [ 2]  953 	pushw	x
      000525 AEr00r00         [ 2]  954 	ldw	x, #(___str_0+0)
      000528 CDr00r00         [ 4]  955 	call	_assert_failed
      00052B 84               [ 1]  956 	pop	a
      00052C                        957 00118$:
                                    958 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 411: if (Channel < (uint8_t)8)
      00052C A1 08            [ 1]  959 	cp	a, #0x08
      00052E 24 2B            [ 1]  960 	jrnc	00108$
                                    961 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 415: ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
      000530 AE 54 0F         [ 2]  962 	ldw	x, #0x540f
      000533 88               [ 1]  963 	push	a
      000534 F6               [ 1]  964 	ld	a, (x)
      000535 6B 02            [ 1]  965 	ld	(0x02, sp), a
      000537 A6 01            [ 1]  966 	ld	a, #0x01
      000539 6B 03            [ 1]  967 	ld	(0x03, sp), a
      00053B 84               [ 1]  968 	pop	a
      00053C 4D               [ 1]  969 	tnz	a
      00053D 27 05            [ 1]  970 	jreq	00296$
      00053F                        971 00295$:
      00053F 08 02            [ 1]  972 	sll	(0x02, sp)
      000541 4A               [ 1]  973 	dec	a
      000542 26 FB            [ 1]  974 	jrne	00295$
      000544                        975 00296$:
                                    976 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 413: if (NewState != DISABLE)
      000544 0D 05            [ 1]  977 	tnz	(0x05, sp)
      000546 27 09            [ 1]  978 	jreq	00102$
                                    979 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 415: ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
      000548 7B 01            [ 1]  980 	ld	a, (0x01, sp)
      00054A 1A 02            [ 1]  981 	or	a, (0x02, sp)
      00054C C7 54 0F         [ 1]  982 	ld	0x540f, a
      00054F 20 33            [ 2]  983 	jra	00110$
      000551                        984 00102$:
                                    985 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 419: ADC1->AWCRL &= (uint8_t)~(uint8_t)((uint8_t)1 << Channel);
      000551 7B 02            [ 1]  986 	ld	a, (0x02, sp)
      000553 43               [ 1]  987 	cpl	a
      000554 14 01            [ 1]  988 	and	a, (0x01, sp)
      000556 C7 54 0F         [ 1]  989 	ld	0x540f, a
      000559 20 29            [ 2]  990 	jra	00110$
      00055B                        991 00108$:
                                    992 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 426: ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
      00055B AE 54 0E         [ 2]  993 	ldw	x, #0x540e
      00055E 88               [ 1]  994 	push	a
      00055F F6               [ 1]  995 	ld	a, (x)
      000560 6B 03            [ 1]  996 	ld	(0x03, sp), a
      000562 84               [ 1]  997 	pop	a
      000563 A0 08            [ 1]  998 	sub	a, #0x08
      000565 97               [ 1]  999 	ld	xl, a
      000566 A6 01            [ 1] 1000 	ld	a, #0x01
      000568 88               [ 1] 1001 	push	a
      000569 9F               [ 1] 1002 	ld	a, xl
      00056A 4D               [ 1] 1003 	tnz	a
      00056B 27 05            [ 1] 1004 	jreq	00299$
      00056D                       1005 00298$:
      00056D 08 01            [ 1] 1006 	sll	(1, sp)
      00056F 4A               [ 1] 1007 	dec	a
      000570 26 FB            [ 1] 1008 	jrne	00298$
      000572                       1009 00299$:
      000572 84               [ 1] 1010 	pop	a
                                   1011 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 424: if (NewState != DISABLE)
      000573 0D 05            [ 1] 1012 	tnz	(0x05, sp)
      000575 27 07            [ 1] 1013 	jreq	00105$
                                   1014 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 426: ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
      000577 1A 02            [ 1] 1015 	or	a, (0x02, sp)
      000579 C7 54 0E         [ 1] 1016 	ld	0x540e, a
      00057C 20 06            [ 2] 1017 	jra	00110$
      00057E                       1018 00105$:
                                   1019 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 430: ADC1->AWCRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (uint8_t)(Channel - (uint8_t)8));
      00057E 43               [ 1] 1020 	cpl	a
      00057F 14 02            [ 1] 1021 	and	a, (0x02, sp)
      000581 C7 54 0E         [ 1] 1022 	ld	0x540e, a
      000584                       1023 00110$:
                                   1024 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 433: }
      000584 85               [ 2] 1025 	popw	x
      000585 85               [ 2] 1026 	popw	x
      000586 84               [ 1] 1027 	pop	a
      000587 FC               [ 2] 1028 	jp	(x)
                                   1029 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 441: void ADC1_SetHighThreshold(uint16_t Threshold)
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function ADC1_SetHighThreshold
                                   1032 ;	-----------------------------------------
      000588                       1033 _ADC1_SetHighThreshold:
                                   1034 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 443: ADC1->HTRH = (uint8_t)(Threshold >> (uint8_t)2);
      000588 90 93            [ 1] 1035 	ldw	y, x
      00058A 54               [ 2] 1036 	srlw	x
      00058B 54               [ 2] 1037 	srlw	x
      00058C 9F               [ 1] 1038 	ld	a, xl
      00058D C7 54 08         [ 1] 1039 	ld	0x5408, a
                                   1040 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 444: ADC1->HTRL = (uint8_t)Threshold;
      000590 90 9F            [ 1] 1041 	ld	a, yl
      000592 C7 54 09         [ 1] 1042 	ld	0x5409, a
                                   1043 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 445: }
      000595 81               [ 4] 1044 	ret
                                   1045 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 453: void ADC1_SetLowThreshold(uint16_t Threshold)
                                   1046 ;	-----------------------------------------
                                   1047 ;	 function ADC1_SetLowThreshold
                                   1048 ;	-----------------------------------------
      000596                       1049 _ADC1_SetLowThreshold:
                                   1050 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 455: ADC1->LTRL = (uint8_t)Threshold;
      000596 9F               [ 1] 1051 	ld	a, xl
      000597 C7 54 0B         [ 1] 1052 	ld	0x540b, a
                                   1053 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 456: ADC1->LTRH = (uint8_t)(Threshold >> (uint8_t)2);
      00059A 54               [ 2] 1054 	srlw	x
      00059B 54               [ 2] 1055 	srlw	x
      00059C 9F               [ 1] 1056 	ld	a, xl
      00059D C7 54 0A         [ 1] 1057 	ld	0x540a, a
                                   1058 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 457: }
      0005A0 81               [ 4] 1059 	ret
                                   1060 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 466: uint16_t ADC1_GetBufferValue(uint8_t Buffer)
                                   1061 ;	-----------------------------------------
                                   1062 ;	 function ADC1_GetBufferValue
                                   1063 ;	-----------------------------------------
      0005A1                       1064 _ADC1_GetBufferValue:
      0005A1 52 06            [ 2] 1065 	sub	sp, #6
                                   1066 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 472: assert_param(IS_ADC1_BUFFER_OK(Buffer));
      0005A3 A1 09            [ 1] 1067 	cp	a, #0x09
      0005A5 23 0E            [ 2] 1068 	jrule	00107$
      0005A7 88               [ 1] 1069 	push	a
      0005A8 4B D8            [ 1] 1070 	push	#0xd8
      0005AA 4B 01            [ 1] 1071 	push	#0x01
      0005AC 5F               [ 1] 1072 	clrw	x
      0005AD 89               [ 2] 1073 	pushw	x
      0005AE AEr00r00         [ 2] 1074 	ldw	x, #(___str_0+0)
      0005B1 CDr00r00         [ 4] 1075 	call	_assert_failed
      0005B4 84               [ 1] 1076 	pop	a
      0005B5                       1077 00107$:
                                   1078 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 474: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0005B5 AE 54 02         [ 2] 1079 	ldw	x, #0x5402
      0005B8 88               [ 1] 1080 	push	a
      0005B9 F6               [ 1] 1081 	ld	a, (x)
      0005BA 6B 04            [ 1] 1082 	ld	(0x04, sp), a
      0005BC 84               [ 1] 1083 	pop	a
                                   1084 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0005BD 48               [ 1] 1085 	sll	a
      0005BE 5F               [ 1] 1086 	clrw	x
      0005BF 97               [ 1] 1087 	ld	xl, a
      0005C0 90 93            [ 1] 1088 	ldw	y, x
      0005C2 72 A9 53 E1      [ 2] 1089 	addw	y, #0x53e1
                                   1090 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0005C6 1C 53 E0         [ 2] 1091 	addw	x, #0x53e0
                                   1092 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                   1093 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                   1094 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0005C9 90 F6            [ 1] 1095 	ld	a, (y)
      0005CB 6B 06            [ 1] 1096 	ld	(0x06, sp), a
                                   1097 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0005CD F6               [ 1] 1098 	ld	a, (x)
      0005CE 6B 05            [ 1] 1099 	ld	(0x05, sp), a
      0005D0 0F 04            [ 1] 1100 	clr	(0x04, sp)
                                   1101 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 474: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0005D2 7B 03            [ 1] 1102 	ld	a, (0x03, sp)
      0005D4 A5 08            [ 1] 1103 	bcp	a, #0x08
      0005D6 27 16            [ 1] 1104 	jreq	00102$
                                   1105 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 477: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                   1106 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 479: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0005D8 16 04            [ 2] 1107 	ldw	y, (0x04, sp)
      0005DA 17 01            [ 2] 1108 	ldw	(0x01, sp), y
                                   1109 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 481: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      0005DC 7B 02            [ 1] 1110 	ld	a, (0x02, sp)
      0005DE 6B 03            [ 1] 1111 	ld	(0x03, sp), a
      0005E0 0F 04            [ 1] 1112 	clr	(0x04, sp)
      0005E2 0F 05            [ 1] 1113 	clr	(0x05, sp)
      0005E4 7B 06            [ 1] 1114 	ld	a, (0x06, sp)
      0005E6 6B 02            [ 1] 1115 	ld	(0x02, sp), a
      0005E8 7B 03            [ 1] 1116 	ld	a, (0x03, sp)
      0005EA 6B 01            [ 1] 1117 	ld	(0x01, sp), a
      0005EC 20 1A            [ 2] 1118 	jra	00103$
      0005EE                       1119 00102$:
                                   1120 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 486: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      0005EE 16 04            [ 2] 1121 	ldw	y, (0x04, sp)
                                   1122 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 488: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      0005F0 7B 06            [ 1] 1123 	ld	a, (0x06, sp)
                                   1124 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 490: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)(temph << 8));
      0005F2 5F               [ 1] 1125 	clrw	x
      0005F3 97               [ 1] 1126 	ld	xl, a
      0005F4 58               [ 2] 1127 	sllw	x
      0005F5 58               [ 2] 1128 	sllw	x
      0005F6 58               [ 2] 1129 	sllw	x
      0005F7 58               [ 2] 1130 	sllw	x
      0005F8 58               [ 2] 1131 	sllw	x
      0005F9 58               [ 2] 1132 	sllw	x
      0005FA 1F 03            [ 2] 1133 	ldw	(0x03, sp), x
      0005FC 90 9F            [ 1] 1134 	ld	a, yl
      0005FE 0F 06            [ 1] 1135 	clr	(0x06, sp)
      000600 1A 03            [ 1] 1136 	or	a, (0x03, sp)
      000602 6B 01            [ 1] 1137 	ld	(0x01, sp), a
      000604 7B 04            [ 1] 1138 	ld	a, (0x04, sp)
      000606 6B 02            [ 1] 1139 	ld	(0x02, sp), a
      000608                       1140 00103$:
                                   1141 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 493: return ((uint16_t)temph);
      000608 1E 01            [ 2] 1142 	ldw	x, (0x01, sp)
                                   1143 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 494: }
      00060A 5B 06            [ 2] 1144 	addw	sp, #6
      00060C 81               [ 4] 1145 	ret
                                   1146 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 502: FlagStatus ADC1_GetAWDChannelStatus(ADC1_Channel_TypeDef Channel)
                                   1147 ;	-----------------------------------------
                                   1148 ;	 function ADC1_GetAWDChannelStatus
                                   1149 ;	-----------------------------------------
      00060D                       1150 _ADC1_GetAWDChannelStatus:
      00060D 88               [ 1] 1151 	push	a
                                   1152 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 507: assert_param(IS_ADC1_CHANNEL_OK(Channel));
      00060E 4D               [ 1] 1153 	tnz	a
      00060F 27 36            [ 1] 1154 	jreq	00107$
      000611 A1 01            [ 1] 1155 	cp	a, #0x01
      000613 27 32            [ 1] 1156 	jreq	00107$
      000615 A1 02            [ 1] 1157 	cp	a, #0x02
      000617 27 2E            [ 1] 1158 	jreq	00107$
      000619 A1 03            [ 1] 1159 	cp	a, #0x03
      00061B 27 2A            [ 1] 1160 	jreq	00107$
      00061D A1 04            [ 1] 1161 	cp	a, #0x04
      00061F 27 26            [ 1] 1162 	jreq	00107$
      000621 A1 05            [ 1] 1163 	cp	a, #0x05
      000623 27 22            [ 1] 1164 	jreq	00107$
      000625 A1 06            [ 1] 1165 	cp	a, #0x06
      000627 27 1E            [ 1] 1166 	jreq	00107$
      000629 A1 07            [ 1] 1167 	cp	a, #0x07
      00062B 27 1A            [ 1] 1168 	jreq	00107$
      00062D A1 08            [ 1] 1169 	cp	a, #0x08
      00062F 27 16            [ 1] 1170 	jreq	00107$
      000631 A1 0C            [ 1] 1171 	cp	a, #0x0c
      000633 27 12            [ 1] 1172 	jreq	00107$
      000635 A1 09            [ 1] 1173 	cp	a, #0x09
      000637 27 0E            [ 1] 1174 	jreq	00107$
      000639 88               [ 1] 1175 	push	a
      00063A 4B FB            [ 1] 1176 	push	#0xfb
      00063C 4B 01            [ 1] 1177 	push	#0x01
      00063E 5F               [ 1] 1178 	clrw	x
      00063F 89               [ 2] 1179 	pushw	x
      000640 AEr00r00         [ 2] 1180 	ldw	x, #(___str_0+0)
      000643 CDr00r00         [ 4] 1181 	call	_assert_failed
      000646 84               [ 1] 1182 	pop	a
      000647                       1183 00107$:
                                   1184 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 509: if (Channel < (uint8_t)8)
      000647 A1 08            [ 1] 1185 	cp	a, #0x08
      000649 24 18            [ 1] 1186 	jrnc	00102$
                                   1187 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 511: status = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << Channel));
      00064B AE 54 0D         [ 2] 1188 	ldw	x, #0x540d
      00064E 88               [ 1] 1189 	push	a
      00064F F6               [ 1] 1190 	ld	a, (x)
      000650 97               [ 1] 1191 	ld	xl, a
      000651 A6 01            [ 1] 1192 	ld	a, #0x01
      000653 6B 02            [ 1] 1193 	ld	(0x02, sp), a
      000655 84               [ 1] 1194 	pop	a
      000656 4D               [ 1] 1195 	tnz	a
      000657 27 05            [ 1] 1196 	jreq	00255$
      000659                       1197 00254$:
      000659 08 01            [ 1] 1198 	sll	(0x01, sp)
      00065B 4A               [ 1] 1199 	dec	a
      00065C 26 FB            [ 1] 1200 	jrne	00254$
      00065E                       1201 00255$:
      00065E 9F               [ 1] 1202 	ld	a, xl
      00065F 14 01            [ 1] 1203 	and	a, (0x01, sp)
      000661 20 1A            [ 2] 1204 	jra	00103$
      000663                       1205 00102$:
                                   1206 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 515: status = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8)));
      000663 AE 54 0C         [ 2] 1207 	ldw	x, #0x540c
      000666 88               [ 1] 1208 	push	a
      000667 F6               [ 1] 1209 	ld	a, (x)
      000668 6B 02            [ 1] 1210 	ld	(0x02, sp), a
      00066A 84               [ 1] 1211 	pop	a
      00066B A0 08            [ 1] 1212 	sub	a, #0x08
      00066D 97               [ 1] 1213 	ld	xl, a
      00066E A6 01            [ 1] 1214 	ld	a, #0x01
      000670 88               [ 1] 1215 	push	a
      000671 9F               [ 1] 1216 	ld	a, xl
      000672 4D               [ 1] 1217 	tnz	a
      000673 27 05            [ 1] 1218 	jreq	00257$
      000675                       1219 00256$:
      000675 08 01            [ 1] 1220 	sll	(1, sp)
      000677 4A               [ 1] 1221 	dec	a
      000678 26 FB            [ 1] 1222 	jrne	00256$
      00067A                       1223 00257$:
      00067A 84               [ 1] 1224 	pop	a
      00067B 14 01            [ 1] 1225 	and	a, (0x01, sp)
      00067D                       1226 00103$:
                                   1227 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 518: return ((FlagStatus)status);
      00067D 40               [ 1] 1228 	neg	a
      00067E 4F               [ 1] 1229 	clr	a
      00067F 49               [ 1] 1230 	rlc	a
                                   1231 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 519: }
      000680 5B 01            [ 2] 1232 	addw	sp, #1
      000682 81               [ 4] 1233 	ret
                                   1234 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 527: FlagStatus ADC1_GetFlagStatus(ADC1_Flag_TypeDef Flag)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function ADC1_GetFlagStatus
                                   1237 ;	-----------------------------------------
      000683                       1238 _ADC1_GetFlagStatus:
      000683 89               [ 2] 1239 	pushw	x
                                   1240 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 533: assert_param(IS_ADC1_FLAG_OK(Flag));
      000684 6B 02            [ 1] 1241 	ld	(0x02, sp), a
      000686 A1 80            [ 1] 1242 	cp	a, #0x80
      000688 27 54            [ 1] 1243 	jreq	00113$
      00068A 7B 02            [ 1] 1244 	ld	a, (0x02, sp)
      00068C A1 41            [ 1] 1245 	cp	a, #0x41
      00068E 27 4E            [ 1] 1246 	jreq	00113$
      000690 7B 02            [ 1] 1247 	ld	a, (0x02, sp)
      000692 A1 40            [ 1] 1248 	cp	a, #0x40
      000694 27 48            [ 1] 1249 	jreq	00113$
      000696 7B 02            [ 1] 1250 	ld	a, (0x02, sp)
      000698 A1 10            [ 1] 1251 	cp	a, #0x10
      00069A 27 42            [ 1] 1252 	jreq	00113$
      00069C 7B 02            [ 1] 1253 	ld	a, (0x02, sp)
      00069E A1 11            [ 1] 1254 	cp	a, #0x11
      0006A0 27 3C            [ 1] 1255 	jreq	00113$
      0006A2 7B 02            [ 1] 1256 	ld	a, (0x02, sp)
      0006A4 A1 12            [ 1] 1257 	cp	a, #0x12
      0006A6 27 36            [ 1] 1258 	jreq	00113$
      0006A8 7B 02            [ 1] 1259 	ld	a, (0x02, sp)
      0006AA A1 13            [ 1] 1260 	cp	a, #0x13
      0006AC 27 30            [ 1] 1261 	jreq	00113$
      0006AE 7B 02            [ 1] 1262 	ld	a, (0x02, sp)
      0006B0 A1 14            [ 1] 1263 	cp	a, #0x14
      0006B2 27 2A            [ 1] 1264 	jreq	00113$
      0006B4 7B 02            [ 1] 1265 	ld	a, (0x02, sp)
      0006B6 A1 15            [ 1] 1266 	cp	a, #0x15
      0006B8 27 24            [ 1] 1267 	jreq	00113$
      0006BA 7B 02            [ 1] 1268 	ld	a, (0x02, sp)
      0006BC A1 16            [ 1] 1269 	cp	a, #0x16
      0006BE 27 1E            [ 1] 1270 	jreq	00113$
      0006C0 7B 02            [ 1] 1271 	ld	a, (0x02, sp)
      0006C2 A1 17            [ 1] 1272 	cp	a, #0x17
      0006C4 27 18            [ 1] 1273 	jreq	00113$
      0006C6 7B 02            [ 1] 1274 	ld	a, (0x02, sp)
      0006C8 A1 18            [ 1] 1275 	cp	a, #0x18
      0006CA 27 12            [ 1] 1276 	jreq	00113$
      0006CC 7B 02            [ 1] 1277 	ld	a, (0x02, sp)
      0006CE A1 19            [ 1] 1278 	cp	a, #0x19
      0006D0 27 0C            [ 1] 1279 	jreq	00113$
      0006D2 4B 15            [ 1] 1280 	push	#0x15
      0006D4 4B 02            [ 1] 1281 	push	#0x02
      0006D6 5F               [ 1] 1282 	clrw	x
      0006D7 89               [ 2] 1283 	pushw	x
      0006D8 AEr00r00         [ 2] 1284 	ldw	x, #(___str_0+0)
      0006DB CDr00r00         [ 4] 1285 	call	_assert_failed
      0006DE                       1286 00113$:
                                   1287 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 535: if ((Flag & 0x0F) == 0x01)
      0006DE 7B 02            [ 1] 1288 	ld	a, (0x02, sp)
      0006E0 97               [ 1] 1289 	ld	xl, a
      0006E1 A4 0F            [ 1] 1290 	and	a, #0x0f
      0006E3 4A               [ 1] 1291 	dec	a
      0006E4 26 07            [ 1] 1292 	jrne	00108$
                                   1293 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 538: flagstatus = (uint8_t)(ADC1->CR3 & ADC1_CR3_OVR);
      0006E6 C6 54 03         [ 1] 1294 	ld	a, 0x5403
      0006E9 A4 40            [ 1] 1295 	and	a, #0x40
      0006EB 20 44            [ 2] 1296 	jra	00109$
      0006ED                       1297 00108$:
                                   1298 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 540: else if ((Flag & 0xF0) == 0x10)
      0006ED 9F               [ 1] 1299 	ld	a, xl
      0006EE A4 F0            [ 1] 1300 	and	a, #0xf0
      0006F0 A1 10            [ 1] 1301 	cp	a, #0x10
      0006F2 26 38            [ 1] 1302 	jrne	00105$
                                   1303 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 543: temp = (uint8_t)(Flag & (uint8_t)0x0F);
      0006F4 7B 02            [ 1] 1304 	ld	a, (0x02, sp)
      0006F6 A4 0F            [ 1] 1305 	and	a, #0x0f
                                   1306 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 544: if (temp < 8)
      0006F8 97               [ 1] 1307 	ld	xl, a
      0006F9 A1 08            [ 1] 1308 	cp	a, #0x08
      0006FB 24 16            [ 1] 1309 	jrnc	00102$
                                   1310 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 546: flagstatus = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      0006FD C6 54 0D         [ 1] 1311 	ld	a, 0x540d
      000700 6B 01            [ 1] 1312 	ld	(0x01, sp), a
      000702 A6 01            [ 1] 1313 	ld	a, #0x01
      000704 88               [ 1] 1314 	push	a
      000705 9F               [ 1] 1315 	ld	a, xl
      000706 4D               [ 1] 1316 	tnz	a
      000707 27 05            [ 1] 1317 	jreq	00309$
      000709                       1318 00308$:
      000709 08 01            [ 1] 1319 	sll	(1, sp)
      00070B 4A               [ 1] 1320 	dec	a
      00070C 26 FB            [ 1] 1321 	jrne	00308$
      00070E                       1322 00309$:
      00070E 84               [ 1] 1323 	pop	a
      00070F 14 01            [ 1] 1324 	and	a, (0x01, sp)
      000711 20 1E            [ 2] 1325 	jra	00109$
      000713                       1326 00102$:
                                   1327 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 550: flagstatus = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      000713 C6 54 0C         [ 1] 1328 	ld	a, 0x540c
      000716 6B 01            [ 1] 1329 	ld	(0x01, sp), a
      000718 1D 00 08         [ 2] 1330 	subw	x, #8
      00071B A6 01            [ 1] 1331 	ld	a, #0x01
      00071D 88               [ 1] 1332 	push	a
      00071E 9F               [ 1] 1333 	ld	a, xl
      00071F 4D               [ 1] 1334 	tnz	a
      000720 27 05            [ 1] 1335 	jreq	00311$
      000722                       1336 00310$:
      000722 08 01            [ 1] 1337 	sll	(1, sp)
      000724 4A               [ 1] 1338 	dec	a
      000725 26 FB            [ 1] 1339 	jrne	00310$
      000727                       1340 00311$:
      000727 84               [ 1] 1341 	pop	a
      000728 14 01            [ 1] 1342 	and	a, (0x01, sp)
      00072A 20 05            [ 2] 1343 	jra	00109$
      00072C                       1344 00105$:
                                   1345 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 555: flagstatus = (uint8_t)(ADC1->CSR & Flag);
      00072C C6 54 00         [ 1] 1346 	ld	a, 0x5400
      00072F 14 02            [ 1] 1347 	and	a, (0x02, sp)
      000731                       1348 00109$:
                                   1349 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 557: return ((FlagStatus)flagstatus);
      000731 40               [ 1] 1350 	neg	a
      000732 4F               [ 1] 1351 	clr	a
      000733 49               [ 1] 1352 	rlc	a
                                   1353 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 559: }
      000734 85               [ 2] 1354 	popw	x
      000735 81               [ 4] 1355 	ret
                                   1356 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 567: void ADC1_ClearFlag(ADC1_Flag_TypeDef Flag)
                                   1357 ;	-----------------------------------------
                                   1358 ;	 function ADC1_ClearFlag
                                   1359 ;	-----------------------------------------
      000736                       1360 _ADC1_ClearFlag:
      000736 88               [ 1] 1361 	push	a
                                   1362 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 572: assert_param(IS_ADC1_FLAG_OK(Flag));
      000737 A1 80            [ 1] 1363 	cp	a, #0x80
      000739 27 3E            [ 1] 1364 	jreq	00113$
      00073B A1 41            [ 1] 1365 	cp	a, #0x41
      00073D 27 3A            [ 1] 1366 	jreq	00113$
      00073F A1 40            [ 1] 1367 	cp	a, #0x40
      000741 27 36            [ 1] 1368 	jreq	00113$
      000743 A1 10            [ 1] 1369 	cp	a, #0x10
      000745 27 32            [ 1] 1370 	jreq	00113$
      000747 A1 11            [ 1] 1371 	cp	a, #0x11
      000749 27 2E            [ 1] 1372 	jreq	00113$
      00074B A1 12            [ 1] 1373 	cp	a, #0x12
      00074D 27 2A            [ 1] 1374 	jreq	00113$
      00074F A1 13            [ 1] 1375 	cp	a, #0x13
      000751 27 26            [ 1] 1376 	jreq	00113$
      000753 A1 14            [ 1] 1377 	cp	a, #0x14
      000755 27 22            [ 1] 1378 	jreq	00113$
      000757 A1 15            [ 1] 1379 	cp	a, #0x15
      000759 27 1E            [ 1] 1380 	jreq	00113$
      00075B A1 16            [ 1] 1381 	cp	a, #0x16
      00075D 27 1A            [ 1] 1382 	jreq	00113$
      00075F A1 17            [ 1] 1383 	cp	a, #0x17
      000761 27 16            [ 1] 1384 	jreq	00113$
      000763 A1 18            [ 1] 1385 	cp	a, #0x18
      000765 27 12            [ 1] 1386 	jreq	00113$
      000767 A1 19            [ 1] 1387 	cp	a, #0x19
      000769 27 0E            [ 1] 1388 	jreq	00113$
      00076B 88               [ 1] 1389 	push	a
      00076C 4B 3C            [ 1] 1390 	push	#0x3c
      00076E 4B 02            [ 1] 1391 	push	#0x02
      000770 5F               [ 1] 1392 	clrw	x
      000771 89               [ 2] 1393 	pushw	x
      000772 AEr00r00         [ 2] 1394 	ldw	x, #(___str_0+0)
      000775 CDr00r00         [ 4] 1395 	call	_assert_failed
      000778 84               [ 1] 1396 	pop	a
      000779                       1397 00113$:
                                   1398 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 574: if ((Flag & 0x0F) == 0x01)
      000779 6B 01            [ 1] 1399 	ld	(0x01, sp), a
      00077B 88               [ 1] 1400 	push	a
      00077C 7B 02            [ 1] 1401 	ld	a, (0x02, sp)
      00077E A4 0F            [ 1] 1402 	and	a, #0x0f
      000780 4A               [ 1] 1403 	dec	a
      000781 84               [ 1] 1404 	pop	a
      000782 26 06            [ 1] 1405 	jrne	00108$
                                   1406 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 577: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_OVR);
      000784 72 1D 54 03      [ 1] 1407 	bres	0x5403, #6
      000788 20 56            [ 2] 1408 	jra	00110$
      00078A                       1409 00108$:
                                   1410 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 579: else if ((Flag & 0xF0) == 0x10)
      00078A 88               [ 1] 1411 	push	a
      00078B 7B 02            [ 1] 1412 	ld	a, (0x02, sp)
      00078D A4 F0            [ 1] 1413 	and	a, #0xf0
      00078F A1 10            [ 1] 1414 	cp	a, #0x10
      000791 84               [ 1] 1415 	pop	a
      000792 26 3E            [ 1] 1416 	jrne	00105$
                                   1417 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 582: temp = (uint8_t)(Flag & (uint8_t)0x0F);
      000794 A4 0F            [ 1] 1418 	and	a, #0x0f
                                   1419 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 583: if (temp < 8)
      000796 97               [ 1] 1420 	ld	xl, a
      000797 A1 08            [ 1] 1421 	cp	a, #0x08
      000799 24 1A            [ 1] 1422 	jrnc	00102$
                                   1423 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 585: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      00079B C6 54 0D         [ 1] 1424 	ld	a, 0x540d
      00079E 6B 01            [ 1] 1425 	ld	(0x01, sp), a
      0007A0 A6 01            [ 1] 1426 	ld	a, #0x01
      0007A2 88               [ 1] 1427 	push	a
      0007A3 9F               [ 1] 1428 	ld	a, xl
      0007A4 4D               [ 1] 1429 	tnz	a
      0007A5 27 05            [ 1] 1430 	jreq	00309$
      0007A7                       1431 00308$:
      0007A7 08 01            [ 1] 1432 	sll	(1, sp)
      0007A9 4A               [ 1] 1433 	dec	a
      0007AA 26 FB            [ 1] 1434 	jrne	00308$
      0007AC                       1435 00309$:
      0007AC 84               [ 1] 1436 	pop	a
      0007AD 43               [ 1] 1437 	cpl	a
      0007AE 14 01            [ 1] 1438 	and	a, (0x01, sp)
      0007B0 C7 54 0D         [ 1] 1439 	ld	0x540d, a
      0007B3 20 2B            [ 2] 1440 	jra	00110$
      0007B5                       1441 00102$:
                                   1442 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 589: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      0007B5 C6 54 0C         [ 1] 1443 	ld	a, 0x540c
      0007B8 6B 01            [ 1] 1444 	ld	(0x01, sp), a
      0007BA 1D 00 08         [ 2] 1445 	subw	x, #8
      0007BD A6 01            [ 1] 1446 	ld	a, #0x01
      0007BF 88               [ 1] 1447 	push	a
      0007C0 9F               [ 1] 1448 	ld	a, xl
      0007C1 4D               [ 1] 1449 	tnz	a
      0007C2 27 05            [ 1] 1450 	jreq	00311$
      0007C4                       1451 00310$:
      0007C4 08 01            [ 1] 1452 	sll	(1, sp)
      0007C6 4A               [ 1] 1453 	dec	a
      0007C7 26 FB            [ 1] 1454 	jrne	00310$
      0007C9                       1455 00311$:
      0007C9 84               [ 1] 1456 	pop	a
      0007CA 43               [ 1] 1457 	cpl	a
      0007CB 14 01            [ 1] 1458 	and	a, (0x01, sp)
      0007CD C7 54 0C         [ 1] 1459 	ld	0x540c, a
      0007D0 20 0E            [ 2] 1460 	jra	00110$
      0007D2                       1461 00105$:
                                   1462 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 594: ADC1->CSR &= (uint8_t) (~Flag);
      0007D2 AE 54 00         [ 2] 1463 	ldw	x, #0x5400
      0007D5 88               [ 1] 1464 	push	a
      0007D6 F6               [ 1] 1465 	ld	a, (x)
      0007D7 6B 02            [ 1] 1466 	ld	(0x02, sp), a
      0007D9 84               [ 1] 1467 	pop	a
      0007DA 43               [ 1] 1468 	cpl	a
      0007DB 14 01            [ 1] 1469 	and	a, (0x01, sp)
      0007DD C7 54 00         [ 1] 1470 	ld	0x5400, a
      0007E0                       1471 00110$:
                                   1472 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 596: }
      0007E0 84               [ 1] 1473 	pop	a
      0007E1 81               [ 4] 1474 	ret
                                   1475 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 616: ITStatus ADC1_GetITStatus(ADC1_IT_TypeDef ITPendingBit)
                                   1476 ;	-----------------------------------------
                                   1477 ;	 function ADC1_GetITStatus
                                   1478 ;	-----------------------------------------
      0007E2                       1479 _ADC1_GetITStatus:
      0007E2 52 03            [ 2] 1480 	sub	sp, #3
                                   1481 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 622: assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
      0007E4 1F 02            [ 2] 1482 	ldw	(0x02, sp), x
      0007E6 A3 00 80         [ 2] 1483 	cpw	x, #0x0080
      0007E9 27 48            [ 1] 1484 	jreq	00110$
      0007EB A3 01 40         [ 2] 1485 	cpw	x, #0x0140
      0007EE 27 43            [ 1] 1486 	jreq	00110$
      0007F0 A3 01 10         [ 2] 1487 	cpw	x, #0x0110
      0007F3 27 3E            [ 1] 1488 	jreq	00110$
      0007F5 A3 01 11         [ 2] 1489 	cpw	x, #0x0111
      0007F8 27 39            [ 1] 1490 	jreq	00110$
      0007FA A3 01 12         [ 2] 1491 	cpw	x, #0x0112
      0007FD 27 34            [ 1] 1492 	jreq	00110$
      0007FF A3 01 13         [ 2] 1493 	cpw	x, #0x0113
      000802 27 2F            [ 1] 1494 	jreq	00110$
      000804 A3 01 14         [ 2] 1495 	cpw	x, #0x0114
      000807 27 2A            [ 1] 1496 	jreq	00110$
      000809 A3 01 15         [ 2] 1497 	cpw	x, #0x0115
      00080C 27 25            [ 1] 1498 	jreq	00110$
      00080E A3 01 16         [ 2] 1499 	cpw	x, #0x0116
      000811 27 20            [ 1] 1500 	jreq	00110$
      000813 A3 01 17         [ 2] 1501 	cpw	x, #0x0117
      000816 27 1B            [ 1] 1502 	jreq	00110$
      000818 A3 01 18         [ 2] 1503 	cpw	x, #0x0118
      00081B 27 16            [ 1] 1504 	jreq	00110$
      00081D A3 01 1C         [ 2] 1505 	cpw	x, #0x011c
      000820 27 11            [ 1] 1506 	jreq	00110$
      000822 A3 01 19         [ 2] 1507 	cpw	x, #0x0119
      000825 27 0C            [ 1] 1508 	jreq	00110$
      000827 4B 6E            [ 1] 1509 	push	#0x6e
      000829 4B 02            [ 1] 1510 	push	#0x02
      00082B 5F               [ 1] 1511 	clrw	x
      00082C 89               [ 2] 1512 	pushw	x
      00082D AEr00r00         [ 2] 1513 	ldw	x, #(___str_0+0)
      000830 CDr00r00         [ 4] 1514 	call	_assert_failed
      000833                       1515 00110$:
                                   1516 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 624: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      000833 5F               [ 1] 1517 	clrw	x
      000834 7B 03            [ 1] 1518 	ld	a, (0x03, sp)
      000836 A4 F0            [ 1] 1519 	and	a, #0xf0
      000838 97               [ 1] 1520 	ld	xl, a
      000839 A3 00 10         [ 2] 1521 	cpw	x, #0x0010
      00083C 26 3E            [ 1] 1522 	jrne	00105$
                                   1523 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 627: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      00083E 7B 03            [ 1] 1524 	ld	a, (0x03, sp)
      000840 A4 0F            [ 1] 1525 	and	a, #0x0f
                                   1526 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 628: if (temp < 8)
      000842 97               [ 1] 1527 	ld	xl, a
      000843 A1 08            [ 1] 1528 	cp	a, #0x08
      000845 24 19            [ 1] 1529 	jrnc	00102$
                                   1530 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 630: itstatus = (ITStatus)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      000847 C6 54 0D         [ 1] 1531 	ld	a, 0x540d
      00084A 88               [ 1] 1532 	push	a
      00084B A6 01            [ 1] 1533 	ld	a, #0x01
      00084D 6B 02            [ 1] 1534 	ld	(0x02, sp), a
      00084F 9F               [ 1] 1535 	ld	a, xl
      000850 4D               [ 1] 1536 	tnz	a
      000851 27 05            [ 1] 1537 	jreq	00296$
      000853                       1538 00295$:
      000853 08 02            [ 1] 1539 	sll	(0x02, sp)
      000855 4A               [ 1] 1540 	dec	a
      000856 26 FB            [ 1] 1541 	jrne	00295$
      000858                       1542 00296$:
      000858 84               [ 1] 1543 	pop	a
      000859 14 01            [ 1] 1544 	and	a, (0x01, sp)
      00085B 40               [ 1] 1545 	neg	a
      00085C 4F               [ 1] 1546 	clr	a
      00085D 49               [ 1] 1547 	rlc	a
      00085E 20 28            [ 2] 1548 	jra	00106$
      000860                       1549 00102$:
                                   1550 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 634: itstatus = (ITStatus)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      000860 C6 54 0C         [ 1] 1551 	ld	a, 0x540c
      000863 6B 01            [ 1] 1552 	ld	(0x01, sp), a
      000865 1D 00 08         [ 2] 1553 	subw	x, #8
      000868 A6 01            [ 1] 1554 	ld	a, #0x01
      00086A 88               [ 1] 1555 	push	a
      00086B 9F               [ 1] 1556 	ld	a, xl
      00086C 4D               [ 1] 1557 	tnz	a
      00086D 27 05            [ 1] 1558 	jreq	00298$
      00086F                       1559 00297$:
      00086F 08 01            [ 1] 1560 	sll	(1, sp)
      000871 4A               [ 1] 1561 	dec	a
      000872 26 FB            [ 1] 1562 	jrne	00297$
      000874                       1563 00298$:
      000874 84               [ 1] 1564 	pop	a
      000875 14 01            [ 1] 1565 	and	a, (0x01, sp)
      000877 40               [ 1] 1566 	neg	a
      000878 4F               [ 1] 1567 	clr	a
      000879 49               [ 1] 1568 	rlc	a
      00087A 20 0C            [ 2] 1569 	jra	00106$
      00087C                       1570 00105$:
                                   1571 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 639: itstatus = (ITStatus)(ADC1->CSR & (uint8_t)ITPendingBit);
      00087C C6 54 00         [ 1] 1572 	ld	a, 0x5400
      00087F 6B 01            [ 1] 1573 	ld	(0x01, sp), a
      000881 7B 03            [ 1] 1574 	ld	a, (0x03, sp)
      000883 14 01            [ 1] 1575 	and	a, (0x01, sp)
      000885 40               [ 1] 1576 	neg	a
      000886 4F               [ 1] 1577 	clr	a
      000887 49               [ 1] 1578 	rlc	a
      000888                       1579 00106$:
                                   1580 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 641: return ((ITStatus)itstatus);
                                   1581 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 642: }
      000888 5B 03            [ 2] 1582 	addw	sp, #3
      00088A 81               [ 4] 1583 	ret
                                   1584 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 662: void ADC1_ClearITPendingBit(ADC1_IT_TypeDef ITPendingBit)
                                   1585 ;	-----------------------------------------
                                   1586 ;	 function ADC1_ClearITPendingBit
                                   1587 ;	-----------------------------------------
      00088B                       1588 _ADC1_ClearITPendingBit:
      00088B 52 03            [ 2] 1589 	sub	sp, #3
                                   1590 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 667: assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
      00088D 1F 02            [ 2] 1591 	ldw	(0x02, sp), x
      00088F A3 00 80         [ 2] 1592 	cpw	x, #0x0080
      000892 27 4C            [ 1] 1593 	jreq	00110$
      000894 A3 01 40         [ 2] 1594 	cpw	x, #0x0140
      000897 27 47            [ 1] 1595 	jreq	00110$
      000899 A3 01 10         [ 2] 1596 	cpw	x, #0x0110
      00089C 27 42            [ 1] 1597 	jreq	00110$
      00089E A3 01 11         [ 2] 1598 	cpw	x, #0x0111
      0008A1 27 3D            [ 1] 1599 	jreq	00110$
      0008A3 A3 01 12         [ 2] 1600 	cpw	x, #0x0112
      0008A6 27 38            [ 1] 1601 	jreq	00110$
      0008A8 A3 01 13         [ 2] 1602 	cpw	x, #0x0113
      0008AB 27 33            [ 1] 1603 	jreq	00110$
      0008AD A3 01 14         [ 2] 1604 	cpw	x, #0x0114
      0008B0 27 2E            [ 1] 1605 	jreq	00110$
      0008B2 A3 01 15         [ 2] 1606 	cpw	x, #0x0115
      0008B5 27 29            [ 1] 1607 	jreq	00110$
      0008B7 A3 01 16         [ 2] 1608 	cpw	x, #0x0116
      0008BA 27 24            [ 1] 1609 	jreq	00110$
      0008BC A3 01 17         [ 2] 1610 	cpw	x, #0x0117
      0008BF 27 1F            [ 1] 1611 	jreq	00110$
      0008C1 A3 01 18         [ 2] 1612 	cpw	x, #0x0118
      0008C4 27 1A            [ 1] 1613 	jreq	00110$
      0008C6 A3 01 1C         [ 2] 1614 	cpw	x, #0x011c
      0008C9 27 15            [ 1] 1615 	jreq	00110$
      0008CB A3 01 19         [ 2] 1616 	cpw	x, #0x0119
      0008CE 27 10            [ 1] 1617 	jreq	00110$
      0008D0 89               [ 2] 1618 	pushw	x
      0008D1 4B 9B            [ 1] 1619 	push	#0x9b
      0008D3 4B 02            [ 1] 1620 	push	#0x02
      0008D5 4B 00            [ 1] 1621 	push	#0x00
      0008D7 4B 00            [ 1] 1622 	push	#0x00
      0008D9 AEr00r00         [ 2] 1623 	ldw	x, #(___str_0+0)
      0008DC CDr00r00         [ 4] 1624 	call	_assert_failed
      0008DF 85               [ 2] 1625 	popw	x
      0008E0                       1626 00110$:
                                   1627 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 669: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      0008E0 90 5F            [ 1] 1628 	clrw	y
      0008E2 7B 03            [ 1] 1629 	ld	a, (0x03, sp)
      0008E4 A4 F0            [ 1] 1630 	and	a, #0xf0
      0008E6 90 97            [ 1] 1631 	ld	yl, a
      0008E8 90 A3 00 10      [ 2] 1632 	cpw	y, #0x0010
      0008EC 26 40            [ 1] 1633 	jrne	00105$
                                   1634 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 672: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      0008EE 7B 03            [ 1] 1635 	ld	a, (0x03, sp)
      0008F0 A4 0F            [ 1] 1636 	and	a, #0x0f
                                   1637 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 673: if (temp < 8)
      0008F2 97               [ 1] 1638 	ld	xl, a
      0008F3 A1 08            [ 1] 1639 	cp	a, #0x08
      0008F5 24 1A            [ 1] 1640 	jrnc	00102$
                                   1641 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 675: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      0008F7 C6 54 0D         [ 1] 1642 	ld	a, 0x540d
      0008FA 6B 01            [ 1] 1643 	ld	(0x01, sp), a
      0008FC A6 01            [ 1] 1644 	ld	a, #0x01
      0008FE 88               [ 1] 1645 	push	a
      0008FF 9F               [ 1] 1646 	ld	a, xl
      000900 4D               [ 1] 1647 	tnz	a
      000901 27 05            [ 1] 1648 	jreq	00296$
      000903                       1649 00295$:
      000903 08 01            [ 1] 1650 	sll	(1, sp)
      000905 4A               [ 1] 1651 	dec	a
      000906 26 FB            [ 1] 1652 	jrne	00295$
      000908                       1653 00296$:
      000908 84               [ 1] 1654 	pop	a
      000909 43               [ 1] 1655 	cpl	a
      00090A 14 01            [ 1] 1656 	and	a, (0x01, sp)
      00090C C7 54 0D         [ 1] 1657 	ld	0x540d, a
      00090F 20 2A            [ 2] 1658 	jra	00107$
      000911                       1659 00102$:
                                   1660 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 679: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      000911 C6 54 0C         [ 1] 1661 	ld	a, 0x540c
      000914 6B 01            [ 1] 1662 	ld	(0x01, sp), a
      000916 1D 00 08         [ 2] 1663 	subw	x, #8
      000919 A6 01            [ 1] 1664 	ld	a, #0x01
      00091B 88               [ 1] 1665 	push	a
      00091C 9F               [ 1] 1666 	ld	a, xl
      00091D 4D               [ 1] 1667 	tnz	a
      00091E 27 05            [ 1] 1668 	jreq	00298$
      000920                       1669 00297$:
      000920 08 01            [ 1] 1670 	sll	(1, sp)
      000922 4A               [ 1] 1671 	dec	a
      000923 26 FB            [ 1] 1672 	jrne	00297$
      000925                       1673 00298$:
      000925 84               [ 1] 1674 	pop	a
      000926 43               [ 1] 1675 	cpl	a
      000927 14 01            [ 1] 1676 	and	a, (0x01, sp)
      000929 C7 54 0C         [ 1] 1677 	ld	0x540c, a
      00092C 20 0D            [ 2] 1678 	jra	00107$
      00092E                       1679 00105$:
                                   1680 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 684: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ITPendingBit);
      00092E C6 54 00         [ 1] 1681 	ld	a, 0x5400
      000931 88               [ 1] 1682 	push	a
      000932 53               [ 2] 1683 	cplw	x
      000933 84               [ 1] 1684 	pop	a
      000934 89               [ 2] 1685 	pushw	x
      000935 14 02            [ 1] 1686 	and	a, (2, sp)
      000937 85               [ 2] 1687 	popw	x
      000938 C7 54 00         [ 1] 1688 	ld	0x5400, a
      00093B                       1689 00107$:
                                   1690 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_adc1.c: 686: }
      00093B 5B 03            [ 2] 1691 	addw	sp, #3
      00093D 81               [ 4] 1692 	ret
                                   1693 	.area CODE
                                   1694 	.area CONST
                                   1695 	.area CONST
      000000                       1696 ___str_0:
      000000 2E 2F 53 54 4D 38 53  1697 	.ascii "./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/s"
             5F 53 74 64 50 65 72
             69 70 68 5F 4C 69 62
             2F 4C 69 62 72 61 72
             69 65 73 2F 53 54 4D
             38 53 5F 53 74 64 50
             65 72 69 70 68 5F 44
             72 69 76 65 72 2F 73
             72 63 2F 73
      00003C 74 6D 38 73 5F 61 64  1698 	.ascii "tm8s_adc1.c"
             63 31 2E 63
      000047 00                    1699 	.db 0x00
                                   1700 	.area CODE
                                   1701 	.area INITIALIZER
                                   1702 	.area CABS (ABS)
