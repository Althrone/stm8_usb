                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_wwdg
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _WWDG_Init
                                     13 	.globl _WWDG_SetCounter
                                     14 	.globl _WWDG_GetCounter
                                     15 	.globl _WWDG_SWReset
                                     16 	.globl _WWDG_SetWindowValue
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; absolute external ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area DABS (ABS)
                                     29 
                                     30 ; default segment ordering for linker
                                     31 	.area HOME
                                     32 	.area GSINIT
                                     33 	.area GSFINAL
                                     34 	.area CONST
                                     35 	.area INITIALIZER
                                     36 	.area CODE
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; global & static initialisations
                                     40 ;--------------------------------------------------------
                                     41 	.area HOME
                                     42 	.area GSINIT
                                     43 	.area GSFINAL
                                     44 	.area GSINIT
                                     45 ;--------------------------------------------------------
                                     46 ; Home
                                     47 ;--------------------------------------------------------
                                     48 	.area HOME
                                     49 	.area HOME
                                     50 ;--------------------------------------------------------
                                     51 ; code
                                     52 ;--------------------------------------------------------
                                     53 	.area CODE
                                     54 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 53: void WWDG_Init(uint8_t Counter, uint8_t WindowValue)
                                     55 ;	-----------------------------------------
                                     56 ;	 function WWDG_Init
                                     57 ;	-----------------------------------------
      000000                         58 _WWDG_Init:
      000000 88               [ 1]   59 	push	a
      000001 6B 01            [ 1]   60 	ld	(0x01, sp), a
                                     61 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 56: assert_param(IS_WWDG_WINDOWLIMITVALUE_OK(WindowValue));
      000003 7B 04            [ 1]   62 	ld	a, (0x04, sp)
      000005 A1 7F            [ 1]   63 	cp	a, #0x7f
      000007 23 0C            [ 2]   64 	jrule	00104$
      000009 4B 38            [ 1]   65 	push	#0x38
      00000B 5F               [ 1]   66 	clrw	x
      00000C 89               [ 2]   67 	pushw	x
      00000D 4B 00            [ 1]   68 	push	#0x00
      00000F AEr00r00         [ 2]   69 	ldw	x, #(___str_0+0)
      000012 CDr00r00         [ 4]   70 	call	_assert_failed
      000015                         71 00104$:
                                     72 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 58: WWDG->WR = WWDG_WR_RESET_VALUE;
      000015 35 7F 50 D2      [ 1]   73 	mov	0x50d2+0, #0x7f
                                     74 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 59: WWDG->CR = (uint8_t)((uint8_t)(WWDG_CR_WDGA | WWDG_CR_T6) | (uint8_t)Counter);
      000019 7B 01            [ 1]   75 	ld	a, (0x01, sp)
      00001B AA C0            [ 1]   76 	or	a, #0xc0
      00001D C7 50 D1         [ 1]   77 	ld	0x50d1, a
                                     78 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 60: WWDG->WR = (uint8_t)((uint8_t)(~WWDG_CR_WDGA) & (uint8_t)(WWDG_CR_T6 | WindowValue));
      000020 7B 04            [ 1]   79 	ld	a, (0x04, sp)
      000022 AA 40            [ 1]   80 	or	a, #0x40
      000024 A4 7F            [ 1]   81 	and	a, #0x7f
      000026 C7 50 D2         [ 1]   82 	ld	0x50d2, a
                                     83 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 61: }
      000029 84               [ 1]   84 	pop	a
      00002A 85               [ 2]   85 	popw	x
      00002B 84               [ 1]   86 	pop	a
      00002C FC               [ 2]   87 	jp	(x)
                                     88 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 69: void WWDG_SetCounter(uint8_t Counter)
                                     89 ;	-----------------------------------------
                                     90 ;	 function WWDG_SetCounter
                                     91 ;	-----------------------------------------
      00002D                         92 _WWDG_SetCounter:
                                     93 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 72: assert_param(IS_WWDG_COUNTERVALUE_OK(Counter));
      00002D A1 7F            [ 1]   94 	cp	a, #0x7f
      00002F 23 0E            [ 2]   95 	jrule	00104$
      000031 88               [ 1]   96 	push	a
      000032 4B 48            [ 1]   97 	push	#0x48
      000034 5F               [ 1]   98 	clrw	x
      000035 89               [ 2]   99 	pushw	x
      000036 4B 00            [ 1]  100 	push	#0x00
      000038 AEr00r00         [ 2]  101 	ldw	x, #(___str_0+0)
      00003B CDr00r00         [ 4]  102 	call	_assert_failed
      00003E 84               [ 1]  103 	pop	a
      00003F                        104 00104$:
                                    105 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 76: WWDG->CR = (uint8_t)(Counter & (uint8_t)BIT_MASK);
      00003F A4 7F            [ 1]  106 	and	a, #0x7f
      000041 C7 50 D1         [ 1]  107 	ld	0x50d1, a
                                    108 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 77: }
      000044 81               [ 4]  109 	ret
                                    110 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 86: uint8_t WWDG_GetCounter(void)
                                    111 ;	-----------------------------------------
                                    112 ;	 function WWDG_GetCounter
                                    113 ;	-----------------------------------------
      000045                        114 _WWDG_GetCounter:
                                    115 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 88: return(WWDG->CR);
      000045 C6 50 D1         [ 1]  116 	ld	a, 0x50d1
                                    117 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 89: }
      000048 81               [ 4]  118 	ret
                                    119 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 96: void WWDG_SWReset(void)
                                    120 ;	-----------------------------------------
                                    121 ;	 function WWDG_SWReset
                                    122 ;	-----------------------------------------
      000049                        123 _WWDG_SWReset:
                                    124 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 98: WWDG->CR = WWDG_CR_WDGA; /* Activate WWDG, with clearing T6 */
      000049 35 80 50 D1      [ 1]  125 	mov	0x50d1+0, #0x80
                                    126 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 99: }
      00004D 81               [ 4]  127 	ret
                                    128 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 108: void WWDG_SetWindowValue(uint8_t WindowValue)
                                    129 ;	-----------------------------------------
                                    130 ;	 function WWDG_SetWindowValue
                                    131 ;	-----------------------------------------
      00004E                        132 _WWDG_SetWindowValue:
                                    133 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 111: assert_param(IS_WWDG_WINDOWLIMITVALUE_OK(WindowValue));
      00004E A1 7F            [ 1]  134 	cp	a, #0x7f
      000050 23 0E            [ 2]  135 	jrule	00104$
      000052 88               [ 1]  136 	push	a
      000053 4B 6F            [ 1]  137 	push	#0x6f
      000055 5F               [ 1]  138 	clrw	x
      000056 89               [ 2]  139 	pushw	x
      000057 4B 00            [ 1]  140 	push	#0x00
      000059 AEr00r00         [ 2]  141 	ldw	x, #(___str_0+0)
      00005C CDr00r00         [ 4]  142 	call	_assert_failed
      00005F 84               [ 1]  143 	pop	a
      000060                        144 00104$:
                                    145 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 113: WWDG->WR = (uint8_t)((uint8_t)(~WWDG_CR_WDGA) & (uint8_t)(WWDG_CR_T6 | WindowValue));
      000060 AA 40            [ 1]  146 	or	a, #0x40
      000062 A4 7F            [ 1]  147 	and	a, #0x7f
      000064 C7 50 D2         [ 1]  148 	ld	0x50d2, a
                                    149 ;	./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/stm8s_wwdg.c: 114: }
      000067 81               [ 4]  150 	ret
                                    151 	.area CODE
                                    152 	.area CONST
                                    153 	.area CONST
      000000                        154 ___str_0:
      000000 2E 2F 53 54 4D 38 53   155 	.ascii "./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/src/s"
             5F 53 74 64 50 65 72
             69 70 68 5F 4C 69 62
             2F 4C 69 62 72 61 72
             69 65 73 2F 53 54 4D
             38 53 5F 53 74 64 50
             65 72 69 70 68 5F 44
             72 69 76 65 72 2F 73
             72 63 2F 73
      00003C 74 6D 38 73 5F 77 77   156 	.ascii "tm8s_wwdg.c"
             64 67 2E 63
      000047 00                     157 	.db 0x00
                                    158 	.area CODE
                                    159 	.area INITIALIZER
                                    160 	.area CABS (ABS)
